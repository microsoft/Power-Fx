#
# Used in PowerFx-CI.
#

parameters:
  - name: packageFeed
    displayName: Feed for API compatibility contract
    type: string
    default: Azure
    values:
    - Azure
    - NuGet
    
# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Date:yyyyMMdd).$(Build.BuildId)

pool:
  vmImage: 'windows-latest'
  demands:
  - msbuild
  - visualstudio
  - vstest

variables:
  BuildPlatform: 'any cpu'
  BuildSolution: src/Microsoft.PowerFx.sln
  PowerFx_daily_feed_Url: 'https://pkgs.dev.azure.com/ConversationalAI/BotFramework/_packaging/SDK/nuget/v3/index.json'
  skipComponentGovernanceDetection: false
# ApiContractVersion: define this in Azure. E.g. 0.2.2-preview # The packages version for API validation in the NuGet feed option case.
# BuildConfiguration: define this in Azure
# DisableApiCompatibityValidation: define this in Azure, settable by user.
# PackagesToValidate: define this in Azure. E.g. Microsoft.PowerFx.Connectors,Microsoft.PowerFx.Core,Microsoft.PowerFx.Interpreter,Microsoft.PowerFx.LanguageServerProtocol,Microsoft.PowerFx.Transport.Attributes
# PowerFxCoverallsToken: define this in Azure

stages:
- stage: Build
  jobs:
  - job: build_and_test
    steps:
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(BuildSolution)'
        feedsToUse: config
        nugetConfigPath: .
      displayName: 'NuGet restore'

    - task: VSBuild@1
      inputs:
        solution: '$(BuildSolution)'
        vsVersion: 16.0
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
      displayName: 'Build Microsoft.PowerFx.sln'

    - powershell: |
        Remove-Item CodeCoverage -Force -Recurse -ErrorAction Ignore
        New-Item CodeCoverage -ItemType Directory -Force
      displayName: 'Create CodeCoverage directory'

    # - task: DotNetCoreCLI@2
    #   inputs:
    #     command: test
    #     projects: 'src\tests\**\*.Tests.csproj'
    #     arguments: '--configuration $(BuildConfiguration) --collect "Code Coverage"'
    #   displayName: 'dotnet test'
    #   enabled: false

    - task: VSTest@2
      inputs:
        testAssemblyVer2: |
          src\tests\*\bin\**\*.Tests.dll
          !**\*TestAdapter.dll
          !**\obj\**
        resultsFolder: '$(Build.ArtifactStagingDirectory)\TestResults'
        runSettingsFile: 'src\CodeCoverage.runsettings'
        codeCoverageEnabled: true
        configuration: '$(BuildConfiguration)'
      displayName: VsTest

    - powershell: |
        # This task copies the code coverage file created by dotnet test into a well known location. In all
        # checks I've done, dotnet test ALWAYS outputs the coverage file to the temp directory. $(Agent.TempDirectory)
        # My attempts to override this and have it go directly to the CodeCoverage directory have
        # all failed, so I'm just doing the copy here.  (cmullins)
        
        Get-ChildItem -Path $(Build.ArtifactStagingDirectory)\TestResults -Include "*.coverage" -Recurse | Copy-Item -Destination CodeCoverage
      displayName: 'Copy .coverage Files to CodeCoverage folder'

    - powershell: 'echo "##vso[task.setvariable variable=CoverallsToken]$(PowerFxCoverallsToken)"'
      displayName: 'Set CoverallsToken for PublishToCoveralls.ps1'
      continueOnError: true
      condition: and(succeeded(), ne(variables['PowerFxCoverallsToken'], ''), eq(variables['System.PullRequest.IsFork'], 'false'))

    - task: PowerShell@2
      inputs:
        targetType: filePath
        filePath: './$(Build.SourcesDirectory)\src\build\PublishToCoveralls.ps1'
        arguments: '-pathToCoverageFiles "$(Build.SourcesDirectory)\CodeCoverage" -serviceName "PR build"'
      displayName: 'Upload Coverage Files to Coveralls.io https://coveralls.io/github/microsoft/Power-Fx'
      continueOnError: true
      condition: and(succeeded(), ne(variables['PowerFxCoverallsToken'], ''), eq(variables['System.PullRequest.IsFork'], 'false'))

    - powershell: |
        New-Item -ItemType directory -Path "outputLibraries\" -Force
        
        $env:PackagesToValidate.Split(",") | ForEach {
          $library = $_.Trim()
          Write-Host $library
      
          Get-ChildItem -Path "./src/libraries/$library/bin/$(BuildConfiguration)/netstandard2.0/$library.dll" -Recurse | Copy-Item -Destination 'outputLibraries\' -Force
        }
      displayName: 'Copy DLLs to outputLibraries folder'

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'OutputDlls-$(BuildConfiguration)'
        targetPath: outputLibraries
      displayName: 'Push to OutputDlls-$(BuildConfiguration) in Artifacts'
      continueOnError: true

    - powershell: |
        gci env:* | sort-object name | Format-Table -AutoSize -Wrap
      displayName: 'Display env vars'
      condition: succeededOrFailed()

    - script: |
        cd ..
        dir *.* /s
      displayName: 'Dir workspace'
      continueOnError: true
      condition: succeededOrFailed()

- stage: API_Compatibility_Validation
  dependsOn: Build
  variables:
    skipComponentGovernanceDetection: true # the task is already injected into the build job, so skip it here.
  jobs:
  - job: generate_multiconfig_var
    steps:
    - checkout: none

    - template: feed-setup-step.yml
      parameters: 
        feedName: "${{ parameters.packageFeed }}"

    - template: get-contract-version-step.yml
      parameters: 
        feedName: "${{ parameters.packageFeed }}"
        apiContractVersion: "$(ApiContractVersion)"

    - task: tagBuildOrRelease@0
      displayName: Tag Build with API contract version
      inputs:
        tags: |
          Comparing API against v $(GetContract.ContractVersion)
          From ${{ parameters.packageFeed }} feed 
      condition: and(succeeded(), ne(variables['System.PullRequest.IsFork'], 'True'))
      continueOnError: true

    - powershell: |
        $multiconfig = '{';
        $env:PackagesToValidate.Split(",") | ForEach {
          $library = $_.Trim()
          $threadName = $library -replace "Microsoft.", "";
          $multiconfig += "'" + $threadName + "':{'PackageName':'" + $library + "'}, ";
        }
        $multiconfig = $multiconfig.TrimEnd(' ').TrimEnd(',') + "}";
        echo $multiconfig
        "##vso[task.setVariable variable=MULTICONFIG;isOutput=true]$multiconfig"
      name: generate_var

    - script: echo $(generate_var.MULTICONFIG)
      displayName: show var MULTICONFIG

  - job: check_api_for
    dependsOn: generate_multiconfig_var
    condition: ne(dependencies.generate_multiconfig_var.outputs['generate_var.MULTICONFIG'], '{}')
    timeoutInMinutes: 10
    strategy:
      maxParallel: 10
      matrix: $[ dependencies.generate_multiconfig_var.outputs['generate_var.MULTICONFIG'] ]

    variables:
      contractVersion: $[ dependencies.generate_multiconfig_var.outputs['GetContract.ContractVersion'] ]

    steps:
    - checkout: none

    - template: feed-setup-step.yml
      parameters: 
        feedName: "${{ parameters.packageFeed }}"

    - template: ci-api-validation-steps.yml
      parameters: 
        ContractVersion: "$(contractVersion)"

  - job: post_results_to_gitHub
    dependsOn: check_api_for
    condition: and(succeeded(), ne(dependencies.generate_multiconfig_var.outputs['generate_var.MULTICONFIG'], '{}'), ne(variables['System.PullRequest.IsFork'], 'True'))

    steps:
    - checkout: none

    - template: ci-post-to-github-steps.yml
