<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrDivByZero" xml:space="preserve">
    <value>Invalid operation: division by zero.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrRuntimeTypeMismatch" xml:space="preserve">
    <value>Runtime type mismatch.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrArgumentOutOfRange" xml:space="preserve">
    <value>Argument out of range.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrInvalidCharValue" xml:space="preserve">
    <value>Invalid numerical value, must be in 1...255 range.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrBadLanguageCode" xml:space="preserve">
    <value>Language code '{0}' not supported.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrNonFiniteArgument" xml:space="preserve">
    <value>Arguments to the '{0}' function must be finite.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrNonFiniteResult" xml:space="preserve">
    <value>The function '{0}' returned a non-finite number.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrInvalidDateTimeParsingError" xml:space="preserve">
    <value>The Date/Time could not be parsed.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrInvalidDateTimeError" xml:space="preserve">
    <value>Invalid date/time value.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrInvalidBooleanFormatError" xml:space="preserve">
    <value>The value could not be interpreted as a Boolean.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrInvalidColorFormatError" xml:space="preserve">
    <value>The value could not be interpreted as a Color.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrUnreachableCodeError" xml:space="preserve">
    <value>Unknown error.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrNotYetImplementedFunctionError" xml:space="preserve">
    <value>Not yet implemented function: {0}.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrNotYetImplementedUnaryOpratorError" xml:space="preserve">
    <value>Not yet implemented unary operator: {0}.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrInvalidChain" xml:space="preserve">
    <value>Invalid Chain: {0}.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrMaxCallDepth" xml:space="preserve">
    <value>Max call depth exceeded.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrRecordNotFound" xml:space="preserve">
    <value>The specified record was not found.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrOnlyPrimitiveValuesAllowed" xml:space="preserve">
    <value>Only primitive values are allowed for the operation.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrCanNotConvertToNumber" xml:space="preserve">
    <value>The value '{0}' cannot be converted to a number.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrStartOfWeekInvalid" xml:space="preserve">
    <value>Expected a value from the StartOfWeek enumeration to indicate how to number the weekdays.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrRuntimeExceptionError" xml:space="preserve">
    <value>An exception has been thrown: {0}</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrNameIsNotValid" xml:space="preserve">
    <value>Name isn't valid. '{0}' isn't recognized.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrMondayZeroValueNotSupported" xml:space="preserve">
    <value>The MondayZero value, from the StartOfWeek enumeration, is not supported in the WeekNum function.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrAggregateArgsSameNumberOfRecords" xml:space="preserve">
    <value>Both aggregate args must have the same number of records.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrInvalidArgument" xml:space="preserve">
    <value>Invalid argument.</value>
    <comment>Error Message.</comment>
  </data>
  <data name="ErrUntypedObjectDoesNotImplementSetProperty" xml:space="preserve">
    <value>Class '{0}' does not implement 'SetProperty'.</value>
    <comment>Error Message.</comment>
  </data>
</root>