>> UniChar(955)
"λ"

>> UniChar(65)
"A"

>> UniChar(6500/100)
"A"

>> UniChar(66)
"B"

>> UniChar(119137)
"𝅘𝅥𝅯"

// using result from hex2dec
>> UniChar(Hex2Dec("1F600"))
"😀"

// UniChar(1114111) and UniChar(1114111.99) should return same value
>> If(UniChar(1114111) = UniChar(1114111.99), UniChar(Hex2Dec("1F600")))
"😀"

// UniChar(1.001) and UniChar(1.99) should return same value
>> If(UniChar(1.001) = UniChar(1.99), "works")
"works"

// UniChar(55295) and UniChar(55295.99) should return same value
>> If(UniChar(55295) = UniChar(55295.99), UniChar(Hex2Dec("1F600")))
"😀"

// true (1) returns a value
>> IsBlank(UniChar(true))
false

// Partial surrogate
>> UniChar(55296)
Error({Kind:ErrorKind.NotApplicable})

>> UniChar(57343)
Error({Kind:ErrorKind.NotApplicable})

// Out of bounds
>> UniChar(0)
Error({Kind:ErrorKind.InvalidArgument})

>> UniChar(0.9999)
Error({Kind:ErrorKind.InvalidArgument})

>> UniChar(-42)
Error({Kind:ErrorKind.InvalidArgument})

>> UniChar(1114112)
Error({Kind:ErrorKind.InvalidArgument})

>> UniChar(2114111)
Error({Kind:ErrorKind.InvalidArgument})

>> UniChar(-1114112)
Error({Kind:ErrorKind.InvalidArgument})

// String input tests
>> UniChar("67")
"C"

>> UniChar("abc")
Error({Kind:ErrorKind.InvalidArgument})

>> UniChar("-1")
Error({Kind:ErrorKind.InvalidArgument})

>> UniChar("65.1")
"A"

// Decimal values test
>> UniChar(68.1234)
"D"

// Decimal values test
>> UniChar(0.1)
Error({Kind:ErrorKind.InvalidArgument})

>> UniChar(119137.99)
"𝅘𝅥𝅯"

// ******** NULL and ERROR PARAMETERS ********
>> UniChar(Blank())
Error({Kind:ErrorKind.InvalidArgument})

>> IsBlank(UniChar(Blank()))
Error({Kind:ErrorKind.InvalidArgument})

>> IsError(UniChar(Blank()))
true

>> UniChar(1/0)
Error({Kind:ErrorKind.Div0})