#SETUP: disable:NumberIsFloat,PowerFxV1CompatibilityRules,DecimalSupport

// MOD (which should have the same type semantics as DIVIDE)

// In these tests, 1E100 or some other very large/small number is used to test floating point results which decimal can not represent, 
// and a highly precise number is used for decimal, such as 2.00000000000000000000000000002 that would be rounded in floating point.
// For example, if a decimal test results with 25+ signficant digits results in 2, then an inappropriate conversion to floating point was made.

// The expected results matrix, also in BinderUtils.cs:
//
// Non NumberIsFloat (no flag)                     NumberIsFloat
//  *, /  | n  s  b  N  D  d  T  w  O  (right)       *, / | n  s  b  N  D  d  T  w  O  (right)
// =======|====================================    =======|====================================
//      n | n  n  n  n  n  n  n  n  n                   n | n  n  n  n  n  n  n  n  n 
//      s | n  w  w  w  w  w  w  w  w                   s | n  n  n  n  n  n  n  n  n 
//      b | n  w  w  w  w  w  w  w  w                   b | n  n  n  n  n  n  n  n  n 
//      N | n  w  w  w  w  w  w  w  w                   N | n  n  n  n  n  n  n  n  n 
//      D | n  w  w  w  w  w  w  w  w                   D | n  n  n  n  n  n  n  n  n  
//      d | n  w  w  w  w  w  w  w  w                   d | n  n  n  n  n  n  n  n  n  
//      T | n  w  w  w  w  w  w  w  w                   T | n  n  n  n  n  n  n  n  n  
//      w | n  w  w  w  w  w  w  w  w                   w | n  n  n  n  n  n  n  w  n 
//      O | n  w  w  w  w  w  w  w  w                   O | n  n  n  n  n  n  n  n  n 
// (left) |                                        (left) |

// Float

>> Mod( Float(17), Float(2) )
1

>> Mod( Float("1e40"), Float("1e10") )
3666890752

>> Mod( Float(17), "2" )
1

>> Mod( Float("1e40"), "1e10" )
3666890752

>> Mod( Float(17), true )
0

>> Mod( Float(7922816251426433759354395032), 3961408125713216879677197517 )
0

>> Mod( Float(7922816251426433759354395032), 3961408125713216879677197515 )
0

>> Mod( Float(-79228162514264337593543950335), -79228162514264337593543950332 )
0

>> Mod( Float(-79228162514264337593543950335), -79228162514264337593543950325 )
0

>> Mod( Float(7922816251426433759354395032), Float(3961408125713216879677197517) )
0

>> Mod( Float(7922816251426433759354395032), Float(3961408125713216879677197515) )
0

>> Mod( Float(-79228162514264337593543950335), Float(-79228162514264337593543950332) )
0

>> Mod( Float(-79228162514264337593543950335), Float(-79228162514264337593543950325) )
0

>> Mod( 7922816251426433759354395032, Float(3961408125713216879677197517) )
0

>> Mod( 7922816251426433759354395032, Float(3961408125713216879677197515) )
0

>> Mod( -79228162514264337593543950335, Float(-79228162514264337593543950332) )
0

>> Mod( -79228162514264337593543950335, Float(-79228162514264337593543950325) )
0

>> Mod( Float("1e100"), true )
0

>> Mod( Float(16), Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( Float("1e100"), Blank() )
Error({Kind:ErrorKind.Div0})

>> Value(Date(2000,1,1))
36526

>> Mod( Float(365260123), Date(2000,1,1) )
123

>> Value(DateTime(2000,1,1,12,0,0))
36526.5

>> Mod( Float(365265123), DateTime(2000,1,1,12,0,0) )
123

>> Value(Time(12,0,0))
0.5

>> Mod( Float(4.25), Time(12,0,0) )
0.25

>> Mod( Float(16), Decimal("2.00000000000000000000000002") )
0

>> Mod( Float("1e28"), Decimal("2.00000000000000000000000002") )
0

>> Mod( Decimal("1e28"), Decimal("2.00000000000000000000000002") )
0.000000000000000000000001

>> Mod( Float(19), ParseJSON("4") )
3

>> Mod( Float(16), ParseJSON("1e100") )
16

>> Mod( Float(16), Float("1e100") )
16

>> Mod( Decimal(16.00000000000000000001), Float("1e100") )
16

>> Mod( Decimal(16.00000000000000000001), Decimal(1e28) )
16.00000000000000000001

>> Mod( Float("1e100"), ParseJSON("2") )
0

>> Mod( Float("1e100"), ParseJSON("1e100") )
0

>> Mod( Float("1e100"), ParseJSON("1e100") ) + 1.00000000000000000001
1

>> Mod( Decimal(1e28), Decimal(1e28) )
0

>> Mod( Decimal(1e28), Decimal(1e28) ) + 1.00000000000000000001
1.00000000000000000001

>> Mod( Float(1e28), Decimal(1e28) )
0

>> Mod( Float(1e28), Decimal(1e28) ) + 1.00000000000000000001
1

>> Mod( Decimal(1e28), Float(1e28) )
0

>> Mod( Decimal(1e28), Float(1e28) ) + 1.00000000000000000001
1

>> Mod( Float(1e28), Float(1e28) )
0

>> Mod( Float(1e28), Float(1e28) ) + 1.00000000000000000001
1

>> Mod( Float(3), ParseJSON("null") )
Error({Kind:ErrorKind.Div0})

// Text

>> Mod( "17", Float(2) )
1

>> Mod( "1e100", Float(2) )
0

>> Mod( "1e28", Float(2) )
0

>> Mod( "1e28", Decimal(2) )
0

>> Mod( "1e28", Decimal(2.00000000000000001) )
0.00000025

>> Mod( Float( "1e28" ), Decimal(2.00000000000000001) )
0

>> Mod( "7922816251426433759354395032", 3961408125713216879677197517 )
3961408125713216879677197515

>> Mod( "7922816251426433759354395032", 3961408125713216879677197515 )
2

>> Mod( "-79228162514264337593543950335", -79228162514264337593543950332 )
-3

>> Mod( "-79228162514264337593543950335", -79228162514264337593543950325 )
-10

>> Mod( "7922816251426433759354395032", "3961408125713216879677197517" )
3961408125713216879677197515

>> Mod( "7922816251426433759354395032", "3961408125713216879677197515" )
2

>> Mod( "-79228162514264337593543950335", "-79228162514264337593543950332" )
-3

>> Mod( "-79228162514264337593543950335", "-79228162514264337593543950325" )
-10

>> Mod( 7922816251426433759354395032, "3961408125713216879677197517" )
3961408125713216879677197515

>> Mod( 7922816251426433759354395032, "3961408125713216879677197515" )
2

>> Mod( -79228162514264337593543950335, "-79228162514264337593543950332" )
-3

>> Mod( -79228162514264337593543950335, "-79228162514264337593543950325" )
-10

>> Mod( "17", "2" )
1

>> Mod( "17", "2.00000000000000000000000002" )
0.99999999999999999999999984

>> Mod( "1e100", "2" )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( "17", true )
0

>> Mod( "1e100", true )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( "16", Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( "1e100", Blank() )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( "365260123", Date(2000,1,1) )
123

>> Mod( "365265123", DateTime(2000,1,1,12,0,0) )
123

>> Mod( "4.25", Time(12,0,0) )
0.25

>> Mod( "16", Decimal("2.000000000000000000000002") )
1.999999999999999999999986

>> Mod( "1e100", Decimal("2.000000000000000000000002") )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( "19", ParseJSON("4") )
3

>> Mod( "1e100", ParseJSON("1e100") )
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.InvalidArgument}))

>> Mod( "1e100", ParseJSON("2") )
Error({Kind:ErrorKind.InvalidArgument})

// Boolean

>> Mod( true, Float(2) )
1

>> Mod( true, Float("1e100") )
1

>> Mod( true, Decimal(2) )
1

>> Mod( true, 0.1 )
0

>> Mod( true, Decimal(0.000000000000000000001) )
0

>> Mod( true, Decimal(0.000000000000000000001) ) + 1.00000000000000000001
1.00000000000000000001

>> Mod( true, 3961408125713216879677197517 )
1

>> Mod( true, 3961408125713216879677197515 )
1

>> Mod( true, -79228162514264337593543950332 )
-79228162514264337593543950331

>> Mod( true, -79228162514264337593543950325 )
-79228162514264337593543950324

>> Mod( true, Float(3961408125713216879677197517) )
1

>> Mod( true, Float(3961408125713216879677197515) )
1

>> Mod( true, Float(-79228162514264337593543950332) )
-7.922816251426434E+28

>> Mod( true, Float(-79228162514264337593543950325) )
-7.922816251426434E+28

>> Mod( true, "2" )
1

>> Mod( true, "1E+100" )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( true, true )
0

>> Mod( true, Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( true, Date(1927,5,18) )
1

>> Mod( true, DateTime(1927,5,18,0,0,0) )
1

>> Mod( true, Time(12,0,0) )
0

>> Mod( true, Decimal("2.000000000000000000000002") )
1

>> Mod( true, ParseJSON("2") )
1

>> Mod( true, ParseJSON("1e100") )
Error({Kind:ErrorKind.InvalidArgument})

// Blank

>> Mod( Blank(), Float(2) )
0

>> Mod( Blank(), Float("1e100") )
0

>> Mod( Blank(), 3961408125713216879677197517 )
0

>> Mod( Blank(), 3961408125713216879677197515 )
0

>> Mod( Blank(), -3961408125713216879677197517 )
0

>> Mod( Blank(), -3961408125713216879677197515 )
0

>> Mod( 3961408125713216879677197517, Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( 3961408125713216879677197515, Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( -3961408125713216879677197517, Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( -3961408125713216879677197515, Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( Blank(), "2" )
0

>> Mod( Blank(), "1e100" )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( Blank(), true )
0

>> Mod( Blank(), Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( Blank(), Date(2000,1,1) )
0

>> Mod( Blank(), DateTime(2000,1,1,12,0,0) )
0

>> Mod( Blank(), Time(12,0,0) )
0

>> Mod( Blank(), Decimal("2.000000000000000000000002") )
0

>> Mod( Blank(), Decimal("2.000000000000000000000002")+2.000000000000000000000002 )
0

>> Mod( Blank(), ParseJSON("2") )
0

>> Mod( Blank(), ParseJSON("1e100") )
Error({Kind:ErrorKind.InvalidArgument})

// Date

>> Mod( Date(2000,1,2), Float(2) )
1

>> Mod( Date(2000,1,2), "2" )
1

>> Mod( Date(2000,1,2), 3961408125713216879677197517 )
36527

>> Mod( Date(2000,1,2), 3961408125713216879677197515 ) + 2.0000000000000000002
36529.0000000000000000002

>> Mod( 3961408125713216879677197517, Date(2000,1,2) )
24756

>> Mod( 3961408125713216879677197515, Date(2000,1,2) ) + 2.0000000000000000002
24756.0000000000000000002

>> Mod( Date(2000,1,2), true )
0

>> Mod( Date(2000,1,1), Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( Date(1954,10,3), Date(1927,5,20) ) + 1.0000000000000000001
9999.0000000000000000001

>> Mod( Date(1954,10,3), Date(1900,1,2) ) + 1.0000000000000000001
3.0000000000000000001

>> Mod( Date(1954,10,3), DateTime(1927,5,20,0,0,0) ) + 1.0000000000000000001
9999.0000000000000000001

>> Mod( Date(2000,1,1), Time(12,0,0) ) + 1.0000000000000000001
1.0000000000000000001

>> Mod( Date(2000,1,1), Decimal("2.000000000000000000000002") )
1.999999999999999999963476

>> Mod( Date(2000,1,1), ParseJSON("2.000000000000000000000002") )
1.999999999999999999963476

>> Mod( Date(2000,1,1), ParseJSON("1e100") )
Error({Kind:ErrorKind.InvalidArgument})

// DateTime

>> Mod( DateTime(2000,1,1,12,0,0), Float(2) )
0.5

>> Mod( DateTime(2000,1,1,12,0,0), "2" )
0.5

>> Mod( DateTime(2000,1,1,12,0,0), Float(2) ) + 1.0000000000000000001
1.5

>> Mod( DateTime(2000,1,1,12,0,0), "2" ) + 1.0000000000000000001
1.5000000000000000001

>> Mod( DateTime(2000,1,1,12,0,0), 3961408125713216879677197517 )
36526.5

>> Mod( DateTime(2000,1,1,12,0,0), 3961408125713216879677197515 ) + 2.0000000000000000002
36528.5000000000000000002

>> Mod( 3961408125713216879677197517, DateTime(2000,1,1,12,0,0) )
9502

>> Mod( 3961408125713216879677197515, DateTime(2000,1,1,12,0,0) ) + 2.0000000000000000002
9502.0000000000000000002

>> Mod( DateTime(2000,1,1,12,0,0), true )
0.5

>> Mod( DateTime(2000,1,1,12,0,0), Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( DateTime(1954,10,3,0,0,0), Date(1927,5,20) )
9998

>> Mod( DateTime(1954,10,3,0,0,0), Date(1900,1,2) )
2

>> Mod( DateTime(1954,10,5,0,0,0), DateTime(1927,5,18,0,0,0) )
2
 
>> Mod( DateTime(1954,10,5,0,0,0), DateTime(1900,1,1,12,0,0) ) + 1.0000000000000000001
3.0000000000000000001

>> Mod( DateTime(2000,1,1,21,0,0), Time(12,0,0) )
0.375

>> Mod( DateTime(2000,1,1,12,0,0), Decimal("2.0000000000000000000002") )
0.4999999999999999963474

>> Mod( DateTime(2000,1,1,12,0,0), ParseJSON("2") )
0.5

>> Mod( DateTime(2000,1,1,12,0,0), ParseJSON("1e100") )
Error({Kind:ErrorKind.InvalidArgument})

// Time

>> Mod( Time(9,0,0), 123 )
0.375

>> Mod( Time(9,0,0), "123" )
0.375

>> Mod( Time(9,0,0), 3961408125713216879677197517 )
0.375

>> Mod( Time(9,0,0), 3961408125713216879677197515 ) + 2.0000000000000000002
2.3750000000000000002

>> Mod( Time(9,0,0), true )
0.375

>> Mod( Time(9,0,0), Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( Time(9,0,0), Time(6,0,0) )
0.125

>> Mod( Time(9,0,0), Time(6,0,0) ) + 2.0000000000000000002
2.1250000000000000002

>> Mod( Time(9,0,0), Date(1900,1,2) )
0.375

>> Mod( Time(9,0,0), Time(12,0,0) )
0.375

>> Mod( Time(9,0,0), Decimal("0.125") )
0

>> Mod( Time(9,0,0), Decimal("0.125000000000000000000001") )
0.124999999999999999999998

>> Mod( Time(9,0,0), ParseJSON("2") )
0.375

>> Mod( Time(9,0,0), ParseJSON("1e100") )
Error({Kind:ErrorKind.InvalidArgument})

// Decimal

>> Mod( Decimal("16.000000000000000000000001"), Float(2) )
0

>> Mod( Decimal("16.000000000000000000000001"), Float(2) ) + 1.000000000000000000001
1

>> Mod( Decimal("16.000000000000000000000001"), "2" )
0.000000000000000000000001

>> Mod( Decimal("16.000000000000000000000001"), true )
0.000000000000000000000001

>> Mod( Decimal(7922816251426433759354395032), 3961408125713216879677197517 )
3961408125713216879677197515

>> Mod( Decimal(7922816251426433759354395032), 3961408125713216879677197515 )
2

>> Mod( Decimal(-79228162514264337593543950335), -79228162514264337593543950332 )
-3

>> Mod( Decimal(-79228162514264337593543950335), -79228162514264337593543950325 )
-10

>> Mod( Decimal("16.000000000000000000000001"), Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( Decimal("16.0000000000000000000001"), Date(1900,1,7) )
0.0000000000000000000001

>> Mod( Decimal("16.0000000000000000000001"), DateTime(1900,1,1,12,0,0) )
1.0000000000000000000001

>> Mod( Decimal("16.000000000000000000001"), Time(12,0,0) )
0.000000000000000000001

>> Mod( Decimal("16.000000000000000000000002"), Decimal("2.000000000000000000000001") )
1.999999999999999999999995

>> Mod( Decimal("7.999999999999999999999997"), Decimal("2.000000000000000000000001") )
1.999999999999999999999994

>> Mod( Decimal("16.000000000000000000000002"), ParseJSON("2") )
0.000000000000000000000002

>> Mod( Decimal("16.000000000000000000000002"), ParseJSON("1e100") )
Error({Kind:ErrorKind.InvalidArgument})

// Untyped

>> Mod( ParseJSON("16.00000000000000000000001"), Decimal(2) )
0.00000000000000000000001

>> Mod( ParseJSON("16.00000000000000000000001"), Float(2) )
0

>> Mod( ParseJSON("1e28"), Float(2) )
0

>> Mod( ParseJSON("1e28"), Decimal(2) )
0

>> Mod( ParseJSON("1e28"), Decimal(2.00000000000000001) )
0.00000025

>> Mod( Float( ParseJSON("1e28") ), Decimal(2.00000000000000001) )
0

>> Mod( ParseJSON("16.00000000000000000000001"), "2" )
0.00000000000000000000001

>> Mod( ParseJSON("7922816251426433759354395032"), 3961408125713216879677197517 )
3961408125713216879677197515

>> Mod( ParseJSON("7922816251426433759354395032"), 3961408125713216879677197515 )
2

>> Mod( ParseJSON("-79228162514264337593543950335"), -79228162514264337593543950332 )
-3

>> Mod( ParseJSON("-79228162514264337593543950335"), -79228162514264337593543950325 )
-10

>> Mod( 7922816251426433759354395032, ParseJSON("3961408125713216879677197517") )
3961408125713216879677197515

>> Mod( 7922816251426433759354395032, ParseJSON("3961408125713216879677197515") )
2

>> Mod( -79228162514264337593543950335, ParseJSON("-79228162514264337593543950332") )
-3

>> Mod( -79228162514264337593543950335, ParseJSON("-79228162514264337593543950325") )
-10

>> Mod( ParseJSON("1e100"), "2" )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( ParseJSON("16.000000000000000000000001"), true )
0.000000000000000000000001

>> Mod( ParseJSON("1e100"), true )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( ParseJSON("16.000000000000000000000001"), Blank() )
Error({Kind:ErrorKind.Div0})

>> Mod( ParseJSON("1e100"), Blank() )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( ParseJSON("16.0000000000000000000001"), Date(1900,1,7) )
0.0000000000000000000001

>> Mod( ParseJSON("1e100"), Date(1900,1,7) )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( ParseJSON("16.0000000000000000000001"), DateTime(1900,1,1,12,0,0) )
1.0000000000000000000001

>> Mod( ParseJSON("1e100"), DateTime(1900,1,7,12,0,0) )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( ParseJSON("16.000000000000000000001"), Time(12,0,0) )
0.000000000000000000001

>> Mod( ParseJSON("1e100"), Time(12,0,0) )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( ParseJSON("16.000000000000000000000002"), Decimal("2.000000000000000000000000001") )
0.000000000000000000000001992

>> Mod( ParseJSON("1e100"), Decimal("2.000000000000000000000000001") )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( ParseJSON("16.000000000000000000000002"), ParseJSON("2") )
0.000000000000000000000002

>> Mod( ParseJSON("1e100"), ParseJSON("2") )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( ParseJSON("16.000000000000000000000002"), ParseJSON("1e100") )
Error({Kind:ErrorKind.InvalidArgument})

>> Mod( ParseJSON("1e100"), ParseJSON("1e100") )
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.InvalidArgument}))
