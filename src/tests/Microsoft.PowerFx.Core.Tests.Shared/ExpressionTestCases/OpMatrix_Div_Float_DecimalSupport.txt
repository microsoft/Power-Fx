#SETUP: NumberIsFloat,DecimalSupport,PowerFxV1CompatibilityRules

>> Value(16)/Decimal("2.00000000000000000000000002")
8

>> Value("1e100")/Decimal("2.00000000000000000000000002")
5E+99

>> "16"/Decimal("2.000000000000000000000002")
8

>> "1e100"/Decimal("2.000000000000000000000002")
5E+99

>> true/Decimal("2.000000000000000000000002")
0.5

>> Blank()/Decimal("2.000000000000000000000002")
0

>> Blank()/Decimal("2.000000000000000000000002")+2.000000000000000000000002
2

>> Date(2000,1,1)/Decimal("2.000000000000000000000002")
18263

>> DateTime(2000,1,1,12,0,0)/Decimal("2.0000000000000000000002")
18263.25

>> Time(9,0,0)/Decimal("0.125000000000000000000001")
3

// Decimal

>> Decimal("16.000000000000000000000001")/Value(2)
8

>> Decimal("16.000000000000000000000001")/"2"
8

>> Decimal("16.000000000000000000000001")/true
16

>> Decimal("16.000000000000000000000001")/Blank()
Error({Kind:ErrorKind.Div0})

>> Decimal("16.0000000000000000000001")/Date(1900,1,7)
2

>> Decimal("16.0000000000000000000001")/DateTime(1900,1,1,12,0,0)
6.4

>> Decimal("16.000000000000000000001")/Time(12,0,0)
32

// these next two tests are the only ones in this file that should be decimal, everything else is done in floating point
>> Decimal("16.000000000000000000000002")/Decimal("2.000000000000000000000001")
7.999999999999999999999997

>> Decimal("7.999999999999999999999997")/Decimal("2.000000000000000000000001")
3.9999999999999999999999965

>> Decimal("16.000000000000000000000002")/ParseJSON("2")
8

>> Decimal("16.000000000000000000000002")/ParseJSON("1e100")
1.6E-99

// Untyped

>> ParseJSON("16.000000000000000000000002")/Decimal("2.000000000000000000000000001")
8

>> ParseJSON("1e100")/Decimal("2.000000000000000000000000001")
5E+99
