#SETUP: RegEx,PowerFxV1CompatibilityRules,SupportColumnNamesAsIdentifiers,DisableMemChecks

// Unicode character behavior in Power Fx regular expressions.
//
//  Effective                                        Usage                 .NET        ECMAScript       PCRE2         Power Fx
// =====================================================================================================================================
//  \p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Lm}\p{Nd}\p{Pc}       \w, \W, \b, \B        Yes         No               Yes           Yes
//  \p{Nd}                                           \d, \D                Yes         No               Yes           Yes
//  \p{Category}                                     \p, \P                Yes         Yes              Yes           No
//  \p{Script}                                       \p, \P                Yes         Yes              Yes           No (syntax varies)
//
// We chose to use canonical .NET instead of RegexOptions.ECMAScript because we wanted the unicode definitions for words.
// See https://learn.microsoft.com/dotnet/standard/base-types/regular-expression-options#ecmascript-matching-behavior for more details

// Changes in case insensitive matching in .NET 7 causes different answers that are consistent with PCRE2 and Node
// See https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/#case-insensitive-matching-and-regexoptions-ignorecase

>> Match( UniChar(Hex2Dec("03a9")), "\u03c9", MatchOptions.IgnoreCase ).FullMatch
"Ω"

>> Match( UniChar(Hex2Dec("03c9")), "\u03a9", MatchOptions.IgnoreCase ).FullMatch
"ω"

#DISABLE.NET:462
>> Match( UniChar(Hex2Dec("03a9")), "\u2126", MatchOptions.IgnoreCase ).FullMatch
"Ω"

#DISABLE.NET:462
>> Match( UniChar(Hex2Dec("03c9")), "\u2126", MatchOptions.IgnoreCase ).FullMatch
"ω"

#DISABLE.NET:462
>> Match( UniChar(Hex2Dec("2126")), "\u03c9", MatchOptions.IgnoreCase ).FullMatch
"Ω"

#DISABLE.NET:462
>> Match( UniChar(Hex2Dec("2126")), "\u03a9", MatchOptions.IgnoreCase ).FullMatch
"Ω"

// newline characters not matched by "."
>> JSON( MatchAll( Char(9) & Char(13) & Char(10) & Char(Hex2Dec("85")) & UniChar(Hex2Dec("2028")) & UniChar(Hex2Dec("2029")) & Char(Hex2Dec("C")) & Char(Hex2Dec("B")) & Char(14), "." ) )
"[{""FullMatch"":""\t"",""StartMatch"":1},{""FullMatch"":""\u000E"",""StartMatch"":9}]"

// surrogate pairs not supported in character class, same for .NET and browser JavaScript

// browser: console.log("😀".length)
>> Len( "😀" )
2

// .NET returns 1, Node returns 2, JavaScript in browser returns 1
// browser: console.log( /[\uD83D\uDE00]/.exec("😀" )[0].length)
// >> Len( Match( "😀", "[\uD83D\uDE00]" ).FullMatch )
// 1
//
// >> Len( Match( "😀", "[😀]" ).FullMatch )
// 1

>> Len( Match( "😀", "\uD83D\uDE00" ).FullMatch )
2

>> Len( Match( "😀", "😀" ).FullMatch )
2

// .NET, Node, Browser, PCRE2 all agree with these range error messages, apparently not looking at surrogates as a pair
>> Match( "😀", "[\uD83D\uDE00-\uD83D\uDE06]" )
Errors: Error 13-42: Invalid regular expression: The characters in a character class range are reversed, found at the end of "\uD83D".|Error 0-5: The function 'Match' has some invalid arguments.

// also gives an error, but results in a single surrogate pair character which throws off the testing infrastructure
// >> Match( "😀", "[😀-😆]" )
// Errors: Error 13-22: Invalid regular expression: The characters in a character class range are reversed, found at the end of "�".|Error 0-5: The function 'Match' has some invalid arguments.

