#SETUP: NumberIsFloat,DecimalSupport,PowerFxV1CompatibilityRules

>> Value(16)*Decimal("2.00000000000000000000000000002")
32

>> Value("1e100")*Decimal("2.00000000000000000000000000002")
2E+100

>> "16"*Decimal("2.000000000000000000000002")
32

>> "1e100"*Decimal("2.000000000000000000000002")
2E+100

>> true*Decimal("2.000000000000000000000002")
2

>> Blank()*Decimal("2.000000000000000000000002")
0

>> Blank()*Decimal("2.000000000000000000000002")+2.000000000000000000000002
2

>> Date(2000,1,1)*Decimal("2.000000000000000000000002")
73052

>> DateTime(2000,1,1,12,0,0)*Decimal("2.000000000000000000000002")
73053

>> Time(9,0,0)*Decimal("0.125000000000000000000001")
0.046875

// Decimal

>> Decimal("16.000000000000000000000001")*Value(2)
32

>> Decimal("16.000000000000000000000001")*"2"
32

>> Decimal("16.000000000000000000000001")*true
16

>> Decimal("16.000000000000000000000001")*Blank()
0

>> Decimal("16.0000000000000000000001")*Date(2000,1,1)
584416

>> Decimal("16.0000000000000000000001")*DateTime(2000,1,1,12,0,0)
584424

>> Decimal("16.000000000000000000001")*Time(12,0,0)
8

// this is the one result in this file that should be decimal, everything else is done in floating point
>> Decimal("16.000000000000000000000002")*Decimal("2.000000000000000000000001")
32.00000000000000000000002

>> Decimal("16.000000000000000000000002")*ParseJSON("2")
32

>> Decimal("16.000000000000000000000002")*ParseJSON("1e100")
1.6E+101

// Untyped

>> ParseJSON("16.000000000000000000000002")*Decimal("2.000000000000000000000000001")
32

>> ParseJSON("1e100")*Decimal("2.000000000000000000000000001")
2E+100
