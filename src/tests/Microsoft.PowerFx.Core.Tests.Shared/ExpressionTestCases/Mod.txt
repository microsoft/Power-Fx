
//MOD(NUMBER, DIVISOR)

// ******** INTEGER PARAMETERS ********

//Positive "NUMBER" and "DIVISOR" parameter

// Invalid operation: Division by zero
>> Mod(0,0)
Error({Kind:ErrorKind.Div0})

>> Mod(0,1)
0

// Invalid operation: Division by zero
>> Mod(230,0)
Error({Kind:ErrorKind.Div0})

>> Mod(230,1)
0

>> Mod(230,2)
0

>> Mod(230,3)
2

//Negative "NUMBER" Parameter

>> Mod(-0,1)
0

// Invalid operation: Division by zero
>> Mod(-456,0)
Error({Kind:ErrorKind.Div0})

>> Mod(-456,1)
0

>> Mod(-456,15)
9

//Negative "DIVISOR" Parameter

>> Mod(3456,-1)
0

>> Mod(3456,-2)
0

>> Mod(3456,-11)
-9

//Negative "NUMBER" and "DIVISOR" parameter

>> Mod(-3456,-1)
0

>> Mod(-3456,-2)
0

>> Mod(-3456,-11)
-2

// ******** DECIMAL PARAMETERS ********
// Decimal NUMBER parameter

// Invalid operation: Division by zero
>> Mod(14.123456,0)
Error({Kind:ErrorKind.Div0})

>> Mod(14.123456,1)
0.123456

>> Mod(14.123456,2)
0.123456

>> Mod(14.123456,3)
2.123456

>> Mod(14.123456,18)
14.123456

>> Mod(14.123456,-1)
-0.876544

>> Mod(14.123456,-2)
-1.876544

>> Mod(14.123456,-3)
-0.876544

>> Mod(14.123456,-18)
-3.876544

//Negative Decimal NUMBER parameter

// Invalid operation: Division by zero
>> Mod(-14.123456,0)
Error({Kind:ErrorKind.Div0})

>> Mod(-14.123456,1)
0.876544

>> Mod(-14.123456,2)
1.876544

>> Mod(-14.123456,3)
0.876544

>> Mod(-14.123456,18)
3.876544

>> Mod(-14.123456,-1)
-0.123456

>> Mod(-14.123456,-2)
-0.123456

>> Mod(-14.123456,-3)
-2.123456

>> Mod(-14.123456,-18)
-14.123456

//Decimal NUMBER and DIVISOR parameter

>> Mod(14.123456,1111111111)
14.123456

>> Mod(14.123456,0.123)
0.101456

>> Mod(14.123456,1.67)
0.763456

>> Mod(14.123456,2.12)
1.403456

>> Mod(-14.123456,3.678)
0.588544

>> Mod(-1412.34567,4.78)
2.53433

>> Mod(1412.34,-1.2)
-0.06

>> Mod(-1412.34,-1.6)
-1.14

>> Mod(-1412.34,-2.9)
-0.04

>> Mod(1500.34,-3.5)
-1.16

>> Mod(3*0.415, 2)
1.245


// ******** NULL and ERROR PARAMETERS ********
// Invalid operation: Division by zero
>> Mod(1/0,1)
Error({Kind:ErrorKind.Div0})

>> Mod(1,1/0)
Error({Kind:ErrorKind.Div0})

>> Mod(Blank(),1)
0

>> Mod(Blank(), -1)
0

// Invalid operation: Division by zero
>> Mod(56.78, Blank())
Error({Kind:ErrorKind.Div0})

// Invalid operation: Division by zero
>> Mod(-56.78, Blank())
Error({Kind:ErrorKind.Div0})

// Invalid operation: Division by zero
>> Mod(Blank(),Blank())
Error({Kind:ErrorKind.Div0})

// ******** STRING PARAMETERS ********

>> Mod("sampleText",1)
Error({Kind:ErrorKind.InvalidArgument})

>> Mod("10.5678","ABC")
Error({Kind:ErrorKind.InvalidArgument})

>> Mod("-10.5678","2")
1.4322

>> Mod("-10.5678","-2")
-0.5678

>> Mod("-10.123", "1.234")
0.983

// ******** BOOLEAN PARAMETERS ********

>> Mod(true,true)
0

// Invalid operation: Division by zero
>> Mod(true,false)
Error({Kind:ErrorKind.Div0})

>> Mod(false,true)
0

// Invalid operation: Division by zero
>> Mod(false,false)
Error({Kind:ErrorKind.Div0})

>> Mod("false","true")
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.InvalidArgument}))

// ********* DATE PARAMETERS

// Date(2022, 9, 9) = 44813
>> Mod(Date(2022,9,9), 10)
3

>> Mod(Date(2022, 9, 10), Date(2022, 9, 9))
1

// Misc

// C# returns -1.2.  Excel and PA both add the divisor to the result to get the final result, see Mod code in LibraryMath.cs.
>> Mod( -5.2, 2.0 )
0.8

>> Mod( 5.9, 3.1 )
2.8

>> Mod( 100, 100 )
0

>> Mod( 100, 99 )
1

>> Mod( 100, 98 )
2

>> Mod( 100, 90 )
10

>> Mod( 100, 100.1 )
100

>> Mod( 100, 99.9 )
0.1

>> Mod( -100, -100 )
0

>> Mod( -100, -99 )
-1

>> Mod( -100, -98 )
-2

>> Mod( -100, -90 )
-10

>> Mod( -100, -100.1 )
-100

>> Mod( -100, -99.9 )
-0.1

>> Mod( 99, 100 )
99

>> Mod( -99, -100 )
-99

>> Mod( -99, 100 )
1

>> Mod( 99, -100 )
-1

