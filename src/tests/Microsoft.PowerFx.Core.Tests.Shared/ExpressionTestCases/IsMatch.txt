#SETUP: RegEx

>> IsMatch("Hi", "H", MatchOptions.Complete)
false

>> IsMatch("Hi", "Hi")
true

>> IsMatch("Hi", "Hi", MatchOptions.Complete)
true

>> IsMatch("Bye", "H")
false

>> IsMatch("Hi", "H", MatchOptions.Contains)
true

>> IsMatch("Hi", "H", MatchOptions.Contains & MatchOptions.Complete)
false

>> IsMatch("Hi", "H", MatchOptions.Contains & MatchOptions.BeginsWith)
true

>> IsMatch("Hi", "H.*")
true

>> IsMatch("Hi", "H.*i")
true

>> IsMatch("000", Match.Digit & Match.Digit & Match.Digit)
true

>> IsMatch("JohnDoe@microsoft.com", Match.Email)
true

>> IsMatch("JohnDoe@microsoftcom", Match.Email)
false

>> IsMatch("Joe 164" & Char(10) & "Sam 208" & Char(10), "(\w+)\s(\d+)", MatchOptions.Complete & MatchOptions.Multiline)
true

>> IsMatch("Joe 164" & Char(10) & "Sam 208" & Char(10), "(\w+)\s(\d+)", MatchOptions.Complete)
false

>> IsMatch(1/0, "Hi")
Error({Kind:ErrorKind.Div0})

>> IsMatch(Blank(), "Hi")
false

>> IsMatch(28, "Bar")
false

>> IsMatch("", "")
true

>> IsMatch(Blank(), ".")
false

>> IsMatch("!@#$%^&*()-=_+<>,.:;\'{}[]\|?/~` A 1234567890", "\p{L}", MatchOptions.Complete)
false

>> IsMatch("!@#$%^&*()-=_+<>,.:;\'{}[]\|?/~`  1234567890", "\p{L}", MatchOptions.Complete)
false

// With Icelandic Eth
>> IsMatch("!@#$%^&*()-=_+<>,.:;\'{}[]\|?/~` Ð 1234567890", "\p{L}", MatchOptions.Complete)
false

>> IsMatch("!@#$%^&*()-=_+<>,.:;\'{}[]\|?/~` A 1234567890", "\p{L}", MatchOptions.Contains)
true

>> IsMatch("!@#$%^&*()-=_+<>,.:;\'{}[]\|?/~`  1234567890", "\p{L}", MatchOptions.Contains)
false

// With Icelandic Eth
>> IsMatch("!@#$%^&*()-=_+<>,.:;\'{}[]\|?/~` Ð 1234567890", "\p{L}", MatchOptions.Contains)
true

>> IsMatch("(555) 123-4567", "^[\+]?[\(]?[0-9]{3}[\)]?[\-\s\.]?[0-9]{3}[\-\s\.]?[0-9]{4,6}$")
true

>> IsMatch("(555)_123-4567", "^[\+]?[\(]?[0-9]{3}[\)]?[\-\s\.]?[0-9]{3}[\-\s\.]?[0-9]{4,6}$")
false

>> IsMatch("147 123-4567", "^[\+]?[\(]?[0-9]{3}[\)]?[\-\s\.]?[0-9]{3}[\-\s\.]?[0-9]{4,6}$")
true

>> IsMatch("(44) 123-4567", "^[\+]?[\(]?[0-9]{3}[\)]?[\-\s\.]?[0-9]{3}[\-\s\.]?[0-9]{4,6}$")
false

>> IsMatch("""Hello world""", Char(34) & "Hello", MatchOptions.Contains)
true

>> IsMatch("""Hello world""", UniChar(34) & "Hello", MatchOptions.Contains)
true

>> IsMatch("👽Hello world", UniChar(Hex2Dec("1F47D")) & "Hello", MatchOptions.Contains)
true

>> IsMatch("👽Hello world", UniChar(128125) & "Hello", MatchOptions.Contains)
true

>> IsMatch("👽Hello world", "\ud83d\udc7dHello", MatchOptions.Contains) // surrrogate pairs
true

>> IsMatch(UniChar(Hex2Dec("1f47d")) & "Hello world", UniChar(128125) & "Hello", MatchOptions.Contains)
true

>> IsMatch("Hello 123 world", $"Hello", MatchOptions.Contains)
true

>> IsMatch("Hello", "Hello", MatchOptions.IgnoreCase)
true

>> IsMatch("Hi", "Hi", MatchOptions.Multiline)
true

>> IsMatch("Hi", "H", MatchOptions.EndsWith )
false

>> IsMatch("Hi", "H", MatchOptions.BeginsWith)
true

>> IsMatch("Hi", "i", MatchOptions.EndsWith)
true

>> IsMatch("Hi", "I", MatchOptions.EndsWith)
false

>> IsMatch("Hi", "I", MatchOptions.EndsWith & MatchOptions.IgnoreCase)
true

>> IsMatch( "abcba", "abcba", MatchOptions.Complete )
true

>> IsMatch( "abcba", "abcba", MatchOptions.BeginsWith & MatchOptions.EndsWith )
true

>> IsMatch( "abcba", "bcba", MatchOptions.BeginsWith & MatchOptions.EndsWith )
false

>> IsMatch( "abcba", "bcba", MatchOptions.EndsWith )
true

>> IsMatch( "abcba", "abcb", MatchOptions.BeginsWith & MatchOptions.EndsWith )
false

>> IsMatch( "abcba", "abcb", MatchOptions.BeginsWith )
true

// newer IsMatch "contains" semantics by default, even when in V1CompatDisabled as the C# interpreter is always in this mode

>> IsMatch( "ihi", "h" )
true

// being explicit, for comparison

>> IsMatch( "ihi", "h", MatchOptions.Complete )
false

>> IsMatch( "ihi", "h", MatchOptions.Contains )
true

