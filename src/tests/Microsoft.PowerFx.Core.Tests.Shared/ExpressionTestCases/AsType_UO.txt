#SETUP: AllowTypeLiteral, TimeZoneInfo("Pacific Standard Time")

// Primitives
>> AsType(ParseJSON("987654321"), Number)
987654321

>> AsType(ParseJSON("98765.4321"), Decimal)
98765.4321

>> AsType(ParseJSON("12345678901234.567890123456"), Decimal)
12345678901234.567890123456

>> AsType(ParseJSON("-1.3"), Decimal)
-1.3

>> AsType(ParseJSON("2e3"), Decimal)
2000

>> AsType(ParseJSON("98765.4321"), Number) > AsType(ParseJSON("98765.4320"), Number)
true

>> AsType(ParseJSON("""AstypeFunction"""), Type(Text))
"AstypeFunction"

>> AsType(ParseJSON("""1984-01-01"""), Date)
Date(1984,1,1)

>> AsType(ParseJSON("""1900-12-31T23:59:59.999Z"""), DateTime)
DateTime(1900,12,31,15,59,59,999)

>> AsType(ParseJSON("""1900-12-31T23:59:59.999"""), DateTime)
DateTime(1900,12,31,23,59,59,999)

>> AsType(ParseJSON("""1900-12-31T23:59:59.999+00:00"""), DateTime)
DateTime(1900,12,31,15,59,59,999)

>> AsType(ParseJSON("""1900-12-31T23:59:59.999-08:00"""), DateTime)
DateTime(1900,12,31,23,59,59,999)

>> AsType(ParseJSON("""1900-12-31"""), DateTime)
DateTime(1900,12,31,0,0,0,0)

>> AsType(ParseJSON("""1900-12-31T23:59:59.999"""), Date)
Date(1900,12,31)

>> AsType(ParseJSON("""1900-12-31T00:00:00.000Z"""), Date)
Date(1900,12,31)

>> AsType(ParseJSON("""11:59:59.999"""), Time)
Time(11,59,59,999)

>> AsType(ParseJSON("""00:00:00"""), Time)
Time(0,0,0,0)

>> AsType(ParseJSON("""12:34:56.789"""), Time) = TimeValue(ParseJSON("""12:34:56.789"""))
true

>> AsType(ParseJSON("""12:34:56.789"""), Time) = TimeValue(ParseJSON("""12:34:56.7891"""))
false

>> AsType(ParseJSON("""1900-12-31T00:00:00.000Z"""), DateTimeTZInd)
DateTime(1900,12,31,0,0,0,0)

>> AsType(ParseJSON("""1900-12-31T00:00:00.000-08:00"""), DateTimeTZInd)
DateTime(1900,12,31,8,0,0,0)

>> DateTimeValue(AsType(ParseJSON("""1900-12-31T00:00:00.000Z"""), UntypedObject))
DateTime(1900,12,30,16,0,0,0)

>> DateValue(AsType(ParseJSON("""1900-12-31T00:00:00.000Z"""), UntypedObject))
Date(1900,12,30)

>> Value(AsType(ParseJSON("42"), UntypedObject))
42

>> Value(AsType(ParseJSON("true"), UntypedObject))
1

>> If(AsType(ParseJSON("false"), Boolean), "MyFalse", "MyTrue")
"MyTrue"

>> AsType(ParseJSON("42"), Number) = 42
true

>> UniChar(AsType(ParseJSON("66"), Number))
"B"

// record
>> AsType(ParseJSON("{""foo"": true, ""bar"": 1.1}"), Type({foo: Boolean, bar: Number}))
{bar:1.1,foo:true}

// record missing field
>> AsType(ParseJSON("{""Name"": ""SpongeBob"", ""Age"": 1}"), Type({Name: Text, Age: Number, Aquatic: Boolean})).Name
"SpongeBob"

// Deeply nested record with table
>> AsType(ParseJSON("{""a"": {""b"" : { ""c"" : [1, 2, 3, 4]}}}"), Type({a: {b: {c: [Number]}}}))
{a:{b:{c:Table({Value:1},{Value:2},{Value:3},{Value:4})}}}

// Table
>> AsType(ParseJSON("[{""a"": ""Hello"", ""b"": ""2012-01-02""}, {""a"": ""Hi"", ""b"": ""2012-01-03""}]"), Type([{a: Text, b: Date}]))
Table({a:"Hello",b:Date(2012,1,2)},{a:"Hi",b:Date(2012,1,3)})

>> AsType(ParseJSON("[{""a"": [{""z"": true}, {""z"": false}]}, {""a"": [{""z"": false}, {""z"": true}]}]"), Type([{a: [{z: Boolean}]}]))
Table({a:Table({z:true},{z:false})},{a:Table({z:false},{z:true})})

// Negative tests
>> AsType(ParseJSON("5"), Text)
Error({Kind:ErrorKind.InvalidArgument})

>> AsType(ParseJSON("""42"""), Number)
Error({Kind:ErrorKind.InvalidArgument})

>> AsType(ParseJSON("""1900-12-31T24:59:59.1002Z"""), DateTime)
Error({Kind:ErrorKind.InvalidArgument})

>> AsType(ParseJSON("""24:59:59.12345678"""), Time)
Error({Kind:ErrorKind.InvalidArgument})

>> AsType(ParseJSON("1"), 1)
Errors: Error 23-24: Invalid argument '1'. Expected valid type name or type literal.

>> AsType(ParseJSON("5"), Type(5))
Errors: Error 28-29: Type literal declaration is invalid. The expression '5' cannot be used in a type definition.|Error 27-28: Type literal declaration is invalid. The expression 'Type(5)' cannot be used in a type definition.

>> AsType(ParseJSON("true"), UnKnown)
Errors: Error 26-33: Name isn't valid. 'UnKnown' isn't recognized.|Error 0-34: Invalid argument 'UnKnown'. Expected valid type name or type literal.

>> AsType(ParseJSON("fasle"), Boolean)
Error({Kind:ErrorKind.InvalidJSON})

>> AsType(ParseJSON("true"), Void)
Errors: Error 26-30: Unsupported untyped/JSON conversion type 'Void' in argument.

>> AsType(ParseJSON("{""a"": 5, ""b"":true}"), Type({a: Number}))
Error({Kind:ErrorKind.InvalidArgument})

>> AsType(ParseJSON("{""a"": 5}"), Type({a: Number}), "Hello")
Errors: Error 0-59: Invalid number of arguments: received 3, expected 2.

>> AsType(ParseJSON("true"), None)
Errors: Error 26-30: Unsupported untyped/JSON conversion type 'ObjNull' in argument.

>> AsType(ParseJSON("null"), None)
Errors: Error 26-30: Unsupported untyped/JSON conversion type 'ObjNull' in argument.

>> AsType(ParseJSON("{}"), Type({a: Text, b: [Color]}))
Errors: Error 28-29: Unsupported untyped/JSON conversion type 'Color' in argument.

>> AsType(If(1/0 > 1, ParseJSON("42")), Number)
Error({Kind:ErrorKind.Div0})

>> AsType(ParseJSON(Blank()), Number)
Blank()

>> AsType(ParseJSON("42"), Blank())
Errors: Error 24-31: Invalid argument 'Blank()'. Expected valid type name or type literal.

>> AsType(ParseJSON("42"), 1/0)
Errors: Error 25-26: Invalid argument '1 / 0'. Expected valid type name or type literal.