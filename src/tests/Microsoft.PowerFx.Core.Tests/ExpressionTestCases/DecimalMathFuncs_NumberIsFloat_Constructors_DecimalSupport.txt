#SETUP: NumberIsFloat,DecimalSupport

// decimal aware aggregate functions with mixed inputs -> float

>> Sum( 1.0000000000000000000000001, 2.0000000000000000000000002, Float(3))
6

>> Sum( [1.0000000000000000000000001, 2.0000000000000000000000002, Float(3)], Value )
6

>> Average( 1.0000000000000000000000001, 2.0000000000000000000000002, Float(3) )
2

>> Average( [1.0000000000000000000000001, 2.0000000000000000000000002, Float(3)], Value )
2

>> Min( 1.0000000000000000000000001, 2.0000000000000000000000002, Float(3) )
1

>> Min( [1.0000000000000000000000001, 2.0000000000000000000000002, Float(3)], Value )
1

>> Max( 1.0000000000000000000000001, 2.0000000000000000000000002, Float(-3) )
2

>> Max( [1.0000000000000000000000001, 2.0000000000000000000000002, Float(-3)], Value )
2

// non-decimal aware aggregate functions

>> VarP( 1.0000000000000000000000001, 2.0000000000000000000000002, Float(3) )
0.6666666666666666

>> VarP( [1.0000000000000000000000001, 2.0000000000000000000000002, Float(3)], Value )
0.6666666666666666

>> StdevP( 1.0000000000000000000000001, 2.0000000000000000000000002, Float(3) )
0.816496580927726

>> StdevP( [1.0000000000000000000000001, 2.0000000000000000000000002, Float(3)], Value )
0.816496580927726

// decimal aware numeric functions, stays on decimal

>> Round( 1000000000000000000000001.1, Float(2) )
1E+24

>> Round( [1000000000000000000000001.1, 2000000000000000000000002.2], Float(2) )
Table({Value:1E+24},{Value:2E+24})

>> RoundUp( 1000000000000000000000001.1, Float(2) )
1E+24

>> RoundUp( [1000000000000000000000001.1, 2000000000000000000000002.2], Float(2) )
Table({Value:1E+24},{Value:2E+24})

>> RoundDown( 1000000000000000000000001.1, Float(2) )
1E+24

>> RoundDown( [1000000000000000000000001.1, 2000000000000000000000002.2], Float(2) )
Table({Value:1E+24},{Value:2E+24})

>> Abs( [10000000000000000000000001, 20000000000000000000000002, -10000000000000000000000001, -20000000000000000000000002, Float(1)])
Table({Value:1E+25},{Value:2E+25},{Value:1E+25},{Value:2E+25},{Value:1})

// decimal aware functions with mixed inputs

>> Int( [1000000000000000000000001.1, 2000000000000000000000002.2, Float(100000.12)] )
Table({Value:1E+24},{Value:2E+24},{Value:100000})

>> Trunc( [1000000000000000000000001.1, 2000000000000000000000002.2, Float(100000.12)] )
Table({Value:1E+24},{Value:2E+24},{Value:100000})

>> Round( [1000000000000000000000001.1, 2000000000000000000000002.2, Float(300000.1234)], 2 )
Table({Value:1E+24},{Value:2E+24},{Value:300000.12})

>> RoundUp( [1000000000000000000000001.1, 2000000000000000000000002.2, Float(300000.1234)], 2 )
Table({Value:1E+24},{Value:2E+24},{Value:300000.13})

>> RoundDown( [1000000000000000000000001.1, 2000000000000000000000002.2, Float(30000.1234)], 2 )
Table({Value:1E+24},{Value:2E+24},{Value:30000.12})

>> Int( [Float(100000.12), 1000000000000000000000001.1, 2000000000000000000000002.2] )
Table({Value:100000},{Value:1E+24},{Value:2E+24})

>> Trunc( [Float(100000.12), 1000000000000000000000001.1, 2000000000000000000000002.2] )
Table({Value:100000},{Value:1E+24},{Value:2E+24})

>> Round( [Float(300000.1234), 1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
Table({Value:300000.12},{Value:1E+24},{Value:2E+24})

>> RoundUp( [Float(300000.1234), 1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
Table({Value:300000.13},{Value:1E+24},{Value:2E+24})

>> RoundDown( [Float(30000.1234), 1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
Table({Value:30000.12},{Value:1E+24},{Value:2E+24})

// non-decimal aware numeric functions

>> Sqrt( Float(1524157899404237160815376) )  // exact square of 1234567899876
1234567899876

>> Log( 10000000000000050000000, Float(10) )
22

>> Log( 10000000000000000000000, Float(10) )  
22

>> Log( Float("1e100"), 10 )
100

>> Float( 1e100 )
1E+100

>> Float( "1e100" )
1E+100

>> Float( true )
1

>> Float( "12,00000000000000000000003", "Fr-fr" )
12

>> Float( ParseJSON("""12,00000000000000000000003"""), "Fr-fr" )
12

// ParseJSON

>> Float( ParseJSON("12.00000000000000000000003") )
12

>> Float( Index( ParseJSON("[1e300,12.00000000000000000000003]"), 2 ) )
12

>> Float( ParseJSON("{""a"":12.00000000000000000000003}").a )
12
