// 'As' with Filter
>> Filter([1,2,3] As X, X.Value > 2)
Table({Value:3})

// succeeds with warning
>> Filter([1, 2, 3], true)
Table({Value:1},{Value:2},{Value:3})

// 'ThisRecord is implicit'
>> Filter([1,2,3], Value >= 2)
Table({Value:2},{Value:3})

>> Filter([1,2,3], ThisRecord.Value >= 2)
Table({Value:2},{Value:3})

>>First([1,4,2,7]).Value
1

>> First([30,20,10,40])
{Value:30}

>> Last([30,20,10,40])
{Value:40}

>> FirstN([30,20,10,40],2)
Table({Value:30},{Value:20})

>> LastN([30,20,10,40],3)
Table({Value:20},{Value:10},{Value:40})

// $$$ Corner cases like  negative indices, N > length, doubles instead of int, empty. 

>> Filter([1,4,2,7], Value > 2)
Table({Value:4},{Value:7})

>> First(Filter([1,4,2,7], Value > 2)).Value
4

>> Filter([1,2,0,3,4], 1/ThisRecord.Value >= 0)
Table({Value:1},{Value:2},Error({Kind:ErrorKind.Div0}),{Value:3},{Value:4})

>> Filter([1,2,0,3,4], Blank())
Table()

// Filter empty table
>> Filter(LastN([1,2,3,4], Blank()), 1/ThisRecord.Value >= 0)
Table()

// Filter blank table
>> Filter(Blank(), Blank())
Blank()

>> Filter(Sort([-2, -1, 0, 1, 2], 1 / Value), 1/ThisRecord.Value >= 0)
Error({Kind:ErrorKind.Div0})

>> Filter(Table({a:1},{a:2},If(1<0,{a:3}),{a:4},{a:5}), IsBlank(a) Or a > 0)
Table({a:1},{a:2},Blank(),{a:4},{a:5})

>> CountIf(Filter([{a:1},If(1/0<2,{a:2}),{a:3}], IsError(a)), true)
1
