#SETUP: disable:NumberIsFloat,DecimalSupport

// Tests translated from https://github.com/dotnet/runtime/blob/main/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/DecimalTests.cs
// FYI, there is also a BigInteger and BigDecimal implementation at the end of the file

// ==== Ctor_Double ====

>> Decimal( Float( "123456789.123456" ) )
123456789.123456

>> Decimal( Float( "2.0123456789123456" ) )
2.01234567891235

>> Decimal( Float( "2E-28" ) )
0.0000000000000000000000000002

>> Decimal( Float( "2E-29") )
0

>> Decimal( Float( "2E28") )
20000000000000000000000000000

>> Decimal( Float( "1.5" ) )
1.5

>> Decimal( Float( "0" ) )
0

>> Decimal( Float( "-0.0") )
0

>> Decimal( Float( "100000000000000.1" ) ) // loses last digit, same as C#
100000000000000

>> Decimal( Float( "10000000000000.1" ) )
10000000000000.1

>> Decimal( Float( "1000000000000.1" ) )
1000000000000.1

>> Decimal( Float( "100000000000.1" ) )
100000000000.1

>> Decimal( Float( "10000000000.1" ) )
10000000000.1

>> Decimal( Float( "1000000000.1" ) )
1000000000.1

>> Decimal( Float( "100000000.1" ) )
100000000.1

>> Decimal( Float( "10000000.1" ) )
10000000.1

>> Decimal( Float( "1000000.1" ) )
1000000.1

>> Decimal( Float( "100000.1" ) )
100000.1

>> Decimal( Float( "10000.1" ) )
10000.1

>> Decimal( Float( "1000.1" ) )
1000.1

>> Decimal( Float( "100.1" ) )
100.1

>> Decimal( Float( "10.1" ) )
10.1

>> Decimal( Float( "1.1" ) )
1.1

>> Decimal( Float( "1" ) )
1

>> Decimal( Float( "0.1" ) )
0.1

>> Decimal( Float( "0.01" ) )
0.01

>> Decimal( Float( "0.001" ) )
0.001

>> Decimal( Float( "0.0001" ) )
0.0001

>> Decimal( Float( "0.00001" ) )
0.00001

>> Decimal( Float( "0.0000000000000000000000000001" ) )
0.0000000000000000000000000001

>> Decimal( Float( "0.00000000000000000000000000001" ) )
0

// ==== Ctor_LargeDouble_ThrosOverflowException ====

>> Decimal( Float( "1e300" ) )
Error({Kind:ErrorKind.InvalidArgument})

>> Decimal( Float( "-1e300") )
Error({Kind:ErrorKind.InvalidArgument})

// ==== Add_Valid ====

>> 1 + 1
2

>> -1 + 1
0

>> 1 + 0
1

>> 79228162514264337593543950330 + 5
79228162514264337593543950335

>> 79228162514264337593543950335 + -5
79228162514264337593543950330

>> -79228162514264337593543950330 + 5
-79228162514264337593543950325

>> -79228162514264337593543950330 + -5
-79228162514264337593543950335

>> 1234.5678 + 0.00009
1234.56789

>> -1234.5678 + 0.00009
-1234.56771

>> 0.1111111111111111111111111111 + 0.1111111111111111111111111111
0.2222222222222222222222222222

>> 0.5555555555555555555555555555 + 0.5555555555555555555555555555
1.111111111111111111111111111

>> -79228162514264337593543950335 /* MinValue */ + 0
-79228162514264337593543950335

>> 79228162514264337593543950335 /* MaxValue */ + 0
79228162514264337593543950335

// ==== Add_Overflows ====

>> 79228162514264337593543950335 /* MaxValue */ + 79228162514264337593543950335 /* MaxValue */
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950330 + 6
Error({Kind:ErrorKind.Numeric})

>> -79228162514264337593543950330 - 6
Error({Kind:ErrorKind.Numeric})

// Ceiling_Test

>> RoundUp( 123, 0 )
123

>> RoundUp( 123.123, 0 )
124

>> RoundUp( 123.456, 0 )
124

>> RoundUp( -123.123, 0 ) // different result than C# Ceiling, but consistent with Excel
-124

>> RoundUp( -123.456, 0 ) // different result than C# Ceiling, but consistent with Excel
-124

// ==== Compare ====

>> 5 < 15
true

>> 5 >= 15
false

>> 15 >= 15
true

>> 15 < 15
false

>> 15 <= 15
true

>> 15 > 15
false

>> 15 >= 5
true

>> 15 < 5
false

>> 15 > Blank()
true

>> 15 <= Blank()
false

>> 0 <= 0 
true

>> 0 > 0
false

>> 0 >= 0
true

>> 0 <= 1
true

>> 0 > 1
false

>> 1 >= 0
true

>> 1 < 0
false

>> 79228162514264337593543950335 /* MaxValue */ >= 79228162514264337593543950335 /* MaxValue */
true

>> 79228162514264337593543950335 /* MaxValue */ < 79228162514264337593543950335 /* MaxValue */
false

>> 79228162514264337593543950335 /* MaxValue */ <= 79228162514264337593543950335 /* MaxValue */
true

>> 79228162514264337593543950335 /* MaxValue */ > 79228162514264337593543950335 /* MaxValue */
false

>> -79228162514264337593543950335 /* MinValue */ >= -79228162514264337593543950335 /* MinValue */
true

>> -79228162514264337593543950335 /* MinValue */ < -79228162514264337593543950335 /* MinValue */
false

>> -79228162514264337593543950335 /* MinValue */ <= -79228162514264337593543950335 /* MinValue */
true

>> -79228162514264337593543950335 /* MinValue */ > -79228162514264337593543950335 /* MinValue */
false

>> 79228162514264337593543950335 /* MaxValue */ >= -79228162514264337593543950335 /* MinValue */
true

>> 79228162514264337593543950335 /* MaxValue */ < -79228162514264337593543950335 /* MinValue */
false

>> -79228162514264337593543950335 /* MinValue */ <= 79228162514264337593543950335 /* MaxValue */
true

>> -79228162514264337593543950335 /* MinValue */ > 79228162514264337593543950335 /* MaxValue */
false

// ==== Divide_Valid ====

>> 1 / 1
1

>> -1 / -1
1

>> 15 / 2
7.5

>> 10 / 2
5

>> -10 / -2
5

>> 10 / -2
-5

>> -10 / 2
-5

>> 0.9214206543486529434634231456 / 79228162514264337593543950335 /* MaxValue */
0

>> 38214206543486529434634231456 / 0.49214206543486529434634231456
77648730371625094566866001277

>> -78228162514264337593543950335 / 79228162514264337593543950335 /* MaxValue */
-0.987378225516463811113412343

>> 79228162514264337593543950335 /* decimal.MaxValue */ / -1
-79228162514264337593543950335

>> -79228162514264337593543950335 /* MinValue */ / 79228162514264337593543950335 /* MaxValue */
-1

>> 79228162514264337593543950335 /* MaxValue */ / 79228162514264337593543950335 /* MaxValue */
1

>> -79228162514264337593543950335 /* MinValue */ / -79228162514264337593543950335 /* MinValue */
1

// Divide_Valid > Tests near MaxValue

>> 792281625142643375935439503.4 / 0.1
7922816251426433759354395034

>> 79228162514264337593543950.34 / 0.1
792281625142643375935439503.4

>> 7922816251426433759354395.034 / 0.1
79228162514264337593543950.34

>> 792281625142643375935439.5034 / 0.1
7922816251426433759354395.034

>> 79228162514264337593543950335 / 10
7922816251426433759354395033.5

>> 79228162514264337567774146561 / 10
7922816251426433756777414656.1

>> 79228162514264337567774146560 / 10
7922816251426433756777414656

>> 79228162514264337567774146559 / 10
7922816251426433756777414655.9

>> 79228162514264337593543950335 / 1.1
72025602285694852357767227577

>> 79228162514264337593543950335 / 1.01
78443725261647859003508861718

>> 79228162514264337593543950335 / 1.001
79149013500763574019524425909.091

>> 79228162514264337593543950335 / 1.0001
79220240490215316061937756559.344

>> 79228162514264337593543950335 / 1.00001
79227370240561931974224208092.919

>> 79228162514264337593543950335 / 1.000001
79228083286181051412492537842.462

>> 79228162514264337593543950335 / 1.0000001
79228154591448878448656105469.389

>> 79228162514264337593543950335 / 1.00000001
79228161721982720373716746597.833

>> 79228162514264337593543950335 / 1.000000001
79228162435036175158507775176.492

>> 79228162514264337593543950335 / 1.0000000001
79228162506341521342909798200.709

>> 79228162514264337593543950335 / 1.00000000001
79228162513472055968409229775.316

>> 79228162514264337593543950335 / 1.000000000001
79228162514185109431029765225.569

>> 79228162514264337593543950335 / 1.0000000000001
79228162514256414777292524693.522

>> 79228162514264337593543950335 / 1.00000000000001
79228162514263545311918807699.547

>> 79228162514264337593543950335 / 1.000000000000001
79228162514264258365381436070.742

>> 79228162514264337593543950335 / 1.0000000000000001
79228162514264329670727698908.567

>> 79228162514264337593543950335 / 1.00000000000000001
79228162514264336801262325192.357

>> 79228162514264337593543950335 / 1.000000000000000001
79228162514264337514315787820.736

>> 79228162514264337593543950335 / 1.0000000000000000001
79228162514264337585621134083.574

>> 79228162514264337593543950335 / 1.00000000000000000001
79228162514264337592751668709.857

>> 79228162514264337593543950335 / 1.000000000000000000001
79228162514264337593464722172.486

>> 79228162514264337593543950335 / 1.0000000000000000000001
79228162514264337593536027518.749

>> 79228162514264337593543950335 / 1.00000000000000000000001
79228162514264337593543158053.375

>> 79228162514264337593543950335 / 1.000000000000000000000001
79228162514264337593543871106.837

>> 79228162514264337593543950335 / 1.0000000000000000000000001
79228162514264337593543942412.184

>> 79228162514264337593543950335 / 1.00000000000000000000000001
79228162514264337593543949542.718

>> 79228162514264337593543950335 / 1.000000000000000000000000001
79228162514264337593543950255.772

>> 7922816251426433759354395033.5 / 0.9999999999999999999999999999
7922816251426433759354395034

>> 79228162514264337593543950335 / 10000000
7922816251426433759354.3950335

>> 7922816251426433759354395033.5 / 1.000001
7922808328618105141249253784.2

>> 7922816251426433759354395033.5 / 1.0000000000000000000000000001
7922816251426433759354395032.7

>> 7922816251426433759354395033.5 / 1.0000000000000000000000000002
7922816251426433759354395031.9

>> 79228162514264337593543950335 / 1.0000000000000000000000000001
79228162514264337593543950327

>> 7922816251426433759354.3950335 / 1
7922816251426433759354.3950335

>> 7922816251426433759354.3950335 / 0.0000001
79228162514264337593543950335

// ==== Divide_ZeroDenominator ====

>> 1 / 0
Error({Kind:ErrorKind.Div0})

>> 0 / 0 
Error({Kind:ErrorKind.Div0})

// ==== Divide_Overflows ====

>> 79228162514264337593543950335 / -0.9999999999999999999999999
Error({Kind:ErrorKind.Numeric})

>> 792281625142643.37593543950335 / -0.0000000000000079228162514264337593543950335
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.1
Error({Kind:ErrorKind.Numeric})

>> 7922816251426433759354395034 / 0.1
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.9
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.99
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.9999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.99999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.9999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.99999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.9999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.99999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.9999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.99999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.9999999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.99999999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.99999999999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.9999999999999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.99999999999999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.999999999999999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.9999999999999999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.999999999999999999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / 0.9999999999999999999999999999
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 / -0.1
Error({Kind:ErrorKind.Numeric})

>> (79228162514264337593543950335 /* MaxValue */ / 2) / 0.5
Error({Kind:ErrorKind.Numeric})

// Equals

>> 0 = 0
true

>> 0 <> 0
false

>> 0 = 1
false

>> 0 <> 1
true

>> 79228162514264337593543950335 /* MaxValue */ = 79228162514264337593543950335 /* MaxValue */
true

>> 79228162514264337593543950335 /* MaxValue */ <> 79228162514264337593543950335 /* MaxValue */
false

>> -79228162514264337593543950335 /* MinValue */ = -79228162514264337593543950335 /* MinValue */
true

>> -79228162514264337593543950335 /* MinValue */ <> -79228162514264337593543950335 /* MinValue */
false

>> 79228162514264337593543950335 /* MaxValue */ = -79228162514264337593543950335 /* MinValue */
false

>> 79228162514264337593543950335 /* MaxValue */ <> -79228162514264337593543950335 /* MinValue */
true

>> 1 = Blank() 
false

>> 1 <> Blank()
true

// Floor

>> Int( 123 )
123

>> Int( 123.123 )
123

>> Int( 123.456 )
123

>> Int( -123.123 )
-124

>> Int( -123.456 )
-124

// ==== Multiply_Valid ====

>> 7922816251426433759354395033.5 * 10
79228162514264337593543950335

>> 0.2352523523423422342354395033 * 56033525474612414574574757495
13182018677937129120135020796

>> 46161363632634613634.093453337 * 461613636.32634613634083453337
21308714924243214928823669051

>> 0.0000000000000345435353453563 * .0000000000000023525235234234
0.0000000000000000000000000001

// Multiply_Valid > Near decimal.MaxValue

>> 79228162514264337593543950335 * 0.9
71305346262837903834189555302

>> 79228162514264337593543950335 * 0.99
78435880889121694217608510832

>> 79228162514264337593543950335 * 0.9999999999999999999999999999
79228162514264337593543950327

>> -79228162514264337593543950335 * 0.9 
-71305346262837903834189555302

>> -79228162514264337593543950335 * 0.99
-78435880889121694217608510832

>> -79228162514264337593543950335 * 0.9999999999999999999999999999
-79228162514264337593543950327

// ==== Multiply_Invalid ====

>> 79228162514264337593543950335 /* MaxValue */ * -79228162514264337593543950335 /* MinValue */
Error({Kind:ErrorKind.Numeric})

>> -79228162514264337593543950335 /* MinValue */ * 1.1
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.1
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.01
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.0001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.00001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.0000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.00000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.0000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.00000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.0000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.00000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.0000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.00000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.000000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.0000000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.00000000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.000000000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.0000000000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.00000000000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.000000000000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.0000000000000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.00000000000000000000000001
Error({Kind:ErrorKind.Numeric})

>> 79228162514264337593543950335 * 1.000000000000000000000000001
Error({Kind:ErrorKind.Numeric})

>> (79228162514264337593543950335 /* MaxValue */ / 2) * 2
Error({Kind:ErrorKind.Numeric})

// ==== Negate ====

>> -(1)
-1

>> -(Int(1))
-1

>> -(0)
0

>> -(Int(0))
0

>> -(-1)
1

>> -(Int(-1))
1

>> -(79228162514264337593543950335 /* MaxValue */)
-79228162514264337593543950335

>> -(Int(79228162514264337593543950335 /* MaxValue */))
-79228162514264337593543950335

>> -(-79228162514264337593543950335 /* MinValue */)
79228162514264337593543950335

>> -(Int(-79228162514264337593543950335 /* MinValue */))
79228162514264337593543950335

// ==== Parse_Valid ====

>> Decimal( "-123" )
-123

>> Decimal( "-123" ) + 0.00000000000000000000001
-122.99999999999999999999999

>> Decimal( "0" )
0

>> Decimal( "0" ) + 0.00000000000000000000001
0.00000000000000000000001

>> Decimal( "123" )
123

>> Decimal( "123" ) + 0.00000000000000000000001
123.00000000000000000000001

>> Decimal( "0.6666666666666666666666666666500000000000000000000000000000000000000000000000000000000000000" )
0.6666666666666666666666666666

>> Decimal( ".234" )
0.234

>> Decimal( ".234" ) + 0.00000000000000000000001
0.23400000000000000000001

>> Decimal( "234." )
234

>> Decimal( "234." ) + 0.00000000000000000000001
234.00000000000000000000001

>> Decimal( "7" & Concat( Sequence(28), "0" ) )
70000000000000000000000000000

>> Decimal( "07" & Concat( Sequence(28), "0" ) )
70000000000000000000000000000

>> Decimal( "79228162514264337593543950335" )
79228162514264337593543950335

>> Decimal( "-79228162514264337593543950335" )
-79228162514264337593543950335

>> Decimal( "1234567890123456789012345.678456" )
1234567890123456789012345.6785

// ==== Parse_Invalid ====

>> Decimal( Blank() )
Blank()

>> Decimal( "79228162514264337593543950336" )
Error({Kind:ErrorKind.InvalidArgument})

>> Decimal( "" )
Blank()

>> Decimal( " " )
Error({Kind:ErrorKind.InvalidArgument})

>> Decimal( "Garbage" )
Error({Kind:ErrorKind.InvalidArgument})

>> Decimal( "1e23" )
100000000000000000000000

>> Decimal( "ab" ) // hex
Error({Kind:ErrorKind.InvalidArgument})

>> Decimal( "    123     " )
123

// ==== Remainder_Valid ====

// We don't support -0, converting it to just 0
// Excel uses the algorithim Mod(n,d) = n - d*Int(n/d)
// which means that the sign of d effectively doesn't matter

>> Mod( 5, 3 )
2

>> Mod( 5, -3 ) // C# result is 2
-1

>> Mod( -5, 3 ) // C# result in -2
1

>> Mod( -5, -3 ) 
-2

>> Mod( 3, 5 )
3

>> Mod( 3, -5 ) // C# result is 3
-2

>> Mod( -3, 5 ) // C# result is -3
2

>> Mod( -3, -5 )
-3

>> Mod( 10, -3 ) // C# result is 1
-2

>> Mod( -10, 3 ) // C# result is -1
2

>> Mod( 10, 3 )
1

>> Mod( -10, -3 )
-1

>> Mod( -2.0, 0.5 )
-0.0

>> Mod( 2.3, 0.531 )
0.176

>> Mod( 0.00123, 3242 )
0.00123

>> Mod( 3242, 0.00123 )
0.00044

>> Mod( 17.3, 3 )
2.3

>> Mod( 8.55, 2.25 )
1.80

>> Mod( 0.00, 3 )
0.00

>> Mod( 0, 2.2 )
0

>> Mod( 79228162514264337593543950335 /* MaxValue */, 79228162514264337593543950335 /* MaxValue */ )
0

>> Mod( 79228162514264337593543950335 /* MaxValue */, -79228162514264337593543950335 /* MinValue */ )
0

>> Mod( 79228162514264337593543950335 /* MaxValue */, 1 )
0

>> Mod( 79228162514264337593543950335 /* MaxValue */, 2394713 )
1494647

>> Mod( 79228162514264337593543950335 /* MaxValue */, -32768 ) // C# result is 32767
-1

>> Mod( 79228162514264337593543950335 /* MaxValue */, 32768 )
32767

>> Mod( -79228162514264337593543950335 /* MinValue */, -32768 )
-32767

>> Mod( -0.00, 79228162514264337593543950335 /* MaxValue */ )
0

>> Mod( 1.23984, 79228162514264337593543950335 /* MaxValue */ )
1.23984

>> Mod( 2398412.12983, 79228162514264337593543950335 /* MaxValue */ )
2398412.12983

>> Mod( -0.12938, 79228162514264337593543950335 /* MaxValue */ ) // C# result is -0.12938
79228162514264337593543950335

>> Mod( 0.12938, 79228162514264337593543950335 /* MaxValue */ )
0.12938

>> Mod( -0.12938, -79228162514264337593543950335 /* MaxValue */ )
-0.12938

>> Mod( -79228162514264337593543950335 /* MinValue */, -79228162514264337593543950335 /* MinValue */ )
0

>> Mod( -79228162514264337593543950335 /* MinValue */, 79228162514264337593543950335 /* MaxValue */ )
0

>> Mod( -79228162514264337593543950335 /* MinValue */, 1 )
0

>> Mod( -79228162514264337593543950335 /* MinValue */, 2394713 ) // C# result is -1494647
900066

>> Mod( 79228162514264337593543950335 /* MinValue */, 2394713 )
1494647

>> Mod( -79228162514264337593543950335 /* MinValue */, -2394713 )
-1494647

>> Mod( 0.0, -79228162514264337593543950335 /* MinValue */ )
0.0

>> Mod( 1.23984, -79228162514264337593543950335 /* MinValue */ ) // C# result is 1.23984
-79228162514264337593543950334

>> Mod( 2398412.12983, -79228162514264337593543950335 /* MinValue */ ) // C# result is 2398412.12983
-79228162514264337593541551923
 
>> Mod( 57675350989891243676868034225, 7 )
5

>> Mod( -57675350989891243676868034225, 7 ) // C# result is -5
2

>> Mod( 57675350989891243676868034225, -7 ) // C# result is 5
-2

>> Mod( -57675350989891243676868034225, -7 )
-5

>> Mod( 792281625142643375935439503.4, 0.1 )
0.0

>> Mod( 79228162514264337593543950.34, 0.1 )
0.04

>> Mod( 7922816251426433759354395.034, 0.1 )
0.034

>> Mod( 792281625142643375935439.5034, 0.1 )
0.0034

>> Mod( 79228162514264337593543950335, 10 )
5

>> Mod( 79228162514264337567774146561, 10 )
1

>> Mod( 79228162514264337567774146560, 10 )
0

>> Mod( 79228162514264337567774146559, 10 )
9

// Remainder_Valid > TestDataV2

>> Mod( 79228162514264337593543950335 /* MaxValue */, 0.1 )
0.0

>> Mod( 79228162514264337593543950335 /* MaxValue */, 7.081881059 )
3.702941036

>> Mod( 79228162514264337593543950335 /* MaxValue */, 2004094637636.6280382536104438 )
1980741879937.1051521151154118

>> Mod( 5, 0.0000000000000000000000000003 )
0.0000000000000000000000000002

>> Mod( 5.94499443, 0.0000000000000000000000000007 )
0.0000000000000000000000000005

>> Mod( 1667, 325.66574961026426932314500573 )
38.67125194867865338427497135

>> Mod( 1667, 0.00000000013630700224712809 )
0.00000000002527942770321278

>> Mod( 60596869520933069.9, 8063773.1275438997671 )
5700076.9722872002614

// ==== Remainder_Invalid ====

>> Mod( 5, 0 )
Error({Kind:ErrorKind.Div0})

// Round_Valid

>> Round( 0, 0 )
0

>> Round( 0.1, 0 )
0

>> Round( 0.5, 0 ) // C# result 0, Banker's rounding
1

>> Round( 0.7, 0 )
1

>> Round( 1.3, 0 )
1

>> Round( 1.5, 0 )
2

>> Round( -0.1, 0 )
0

>> Round( -0.5, 0 ) // C# result 0, Banker's rounding
-1

>> Round( -0.7, 0 )
-1

>> Round( -1.3, 0 )
-1

>> Round( -1.5, 0 )
-2

// ==== Round_Digit_Valid ====

>> Round( 1.45, 1 ) // C# result 1.4, Banker's rounding
1.5

>> Round( 1.55, 1 )
1.6

>> Round( 123.456789, 4 )
123.4568

>> Round( 123.456789, 6 )
123.456789

>> Round( 123.456789, 8 )
123.456789

>> Round( -123.456, 0 )
-123

>> Round( -123.0000000, 3 )
-123.000

>> Round( -123.0000000, 11 )
-123.0000000

>> Round( -9999999999.9999999999, 9 )
-10000000000.000000000

>> Round( -9999999999.9999999999, 10 )
-9999999999.9999999999

// ==== Round_Digit_Mid_Valid ====
// Just the tests that are AwayFromZero, most of which are above

>> Round( -1.45, 1 )
-1.5

// ==== Round_Mod_Valid ====
// Tests covered above for Round_Valid

// ==== Subract_Valid ====

>> 1 - 1
0

>> 1 - 0
1

>> 0 - 1
-1

>> -1 - 1
-2

>> 1 - -1
2

>> 79228162514264337593543950335 /* MaxValue */ - 0
79228162514264337593543950335

>> -79228162514264337593543950335 /* MinValue */ - 0
-79228162514264337593543950335

>> 79228162514264337593543950330 - -5
79228162514264337593543950335

>> 79228162514264337593543950330 - 5
79228162514264337593543950325

>> -79228162514264337593543950330 - 5
-79228162514264337593543950335

>> -79228162514264337593543950330 - -5
-79228162514264337593543950325

>> 1234.5678 - 0.00009
1234.56771

>> -1234.5678 - 0.00009
-1234.56789

>> 0.1111111111111111111111111111 - 0.1111111111111111111111111111
0

>> 0.2222222222222222222222222222 - 0.1111111111111111111111111111
0.1111111111111111111111111111

>> 1.1111111111111111111111111110 - 0.5555555555555555555555555555
0.5555555555555555555555555555

// ==== Subtract_Invalid ====

>> 79228162514264337593543950329 - -7
Error({Kind:ErrorKind.Numeric})

>> -79228162514264337593543950329 - 7
Error({Kind:ErrorKind.Numeric})

// ==== ToDouble ====

>> Float( 123456789.123456 )
123456789.123456

>> Float( 1e20 )
1E+20

>> Float( 1e27 )
1E+27

>> Float( 79228162514264337593543950335 )
7.922816251426434E+28

// ==== ToString ====

>> Text( 79228162514264337593543950335 )
"79228162514264337593543950335"

>> Text( 79228162514264337593543950335, "#,###.00" )
"79,228,162,514,264,337,593,543,950,335.00"

>> Text( 79228162514264337593543950335, "#.#################################################E000" )
"7.9228162514264337593543950335E028"

>> Text( 79228162514264337593543950335, "0.0000000000000000000000000000000000000000000000000E000" )
"7.9228162514264337593543950335000000000000000000000E028"

>> Text( 2468, "#,###" )
"2,468"

>> Text( 2467, "#-##-#" )
"2-46-7"

// ==== TestRoundTripDecimalToString ====

>> "3.00" = Text( Decimal( "3.00" ), "#.00" )
true

>> "3" = Text( Decimal( "3.00" ) )
true

>> "3.12" = Text( Decimal( "3.12" ) )
true

// ==== Truncate_Valid ====

>> Trunc( 123 )
123

>> Trunc( 123.123 )
123

>> Trunc( 123.456 )
123

>> Trunc( -123.123 )
-123

>> Trunc( -123.456 )
-123

>> Trunc( 79228162514264337593543950335 /* MaxValue */ )
79228162514264337593543950335

>> Trunc( -79228162514264337593543950335 /* MinValue */ )
-79228162514264337593543950335

>> Trunc( 0 )
0
