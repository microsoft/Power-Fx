// https://docs.microsoft.com/en-us/powerapps/maker/canvas-apps/functions/function-if

// 3 args: Test, (match,result)
>> Switch(1,1,"a")
"a"

>> Switch(99,1,"a")
Blank()

// 4 args: Test, (match,result) , default
>> Switch(99,1,"a","default")
"default"

// 5 args: Test, (match1,result1),(match2,result2) 
>> Switch(2,1,"a", 2,"b")
"b"

// 5 args: Test, (match1,result1),(match2,result2) 
>> Switch(99,1,"a", 2,"b")
Blank()

// 6 args: Test, (match1,result1),(match2,result2) , default
>> Switch(99,1,"a", 2,"b", "default")
"default"

// condition is evaluated once
// TODO: need test case to determine this

// We don't evaluate the branch not taken. 
>> Switch(99,1,1/0,99,7)
7

// We don't evaluate conditions not reached
>> Switch(99,1,8,99,7,1/0,9)
7

// works with non-literals
>> Switch(If(true,1,2),7-8,true && false, !false)
true

>> Switch(1/0, 1, 8, 2, 9)
Error({Kind:ErrorKind.Div0})

>> Switch(1, 1/0, 2, 1, 3)
Error({Kind:ErrorKind.Div0})

// works with non-literals
>> Switch(If(true,1,2),7-8,true && false,!false)
true

// ************************************** NUMBER CASES **************************************

// Switch case with exact match and without any default result
>> Switch(1,0,3,1,5,2,7)
5

// Switch case with exact match and with default result
>> Switch(1,0,3,1,5,2,7,11)
5

// Switch case without any exact match and default result
>> Switch(1,2,3)
Blank()

>> Switch(-1,0,3,1,5,2,7)
Blank()

// Switch case without any exact match, but with default result
>> Switch(1,2,3,4)
4

>> Switch(-1,0,3,1,5,2,7,11)
11

// =========================Null, Empty String and Error cases =========================

// Switch case with Blank() condition, without any exact match and default result
>> Switch(Blank(),0,3,1,5,2,7)
Blank()

// Switch case with Blank() condition, without any exact match, but with default result
>> Switch(Blank(),0,3,1,5,2,7,11)
11

// Switch case with Blank() condition, with exact match and default result
>> Switch(Blank(),0,3,Blank(),5,2,7,11)
5

// Switch case with Blank() as one of the match
>> Switch(1,0,3,Blank(),5,2,7,11)
11

// Switch case with Blank() as the result of exact match
>> Switch(1,0,3,1,Blank(),2,7,11)
Blank()

// Switch case with Error as the condition, and without default result
>> Switch(1/0,0,3,1,5,2,7)
Error({Kind:ErrorKind.Div0})

// Switch case with Error as the condition, and with default result
>> Switch(1/0,0,3,1,5,2,7,11)
Error({Kind:ErrorKind.Div0})

// Switch case with Error as the condition and as one of the result
>> Switch(1/0,1,0,3,1/0,1,5,2,7)
Error({Kind:ErrorKind.Div0})

// Switch case with Error as the result of the exact match
>> Switch(1,0,3,1,1/0,2,7)
Error({Kind:ErrorKind.Div0})

// Switch case with Error as one of the match
>> Switch(1,1/0,3,1,5,2,7,11)
Error({Kind:ErrorKind.Div0})

// Conditions not reached are not evaluated
>> Switch(1,0,3,1,5,1/0,7,11)
5

// Branch not taken is not evaluated
>> Switch(1,0,1/0,1,5,2,7)
5

// Default result not reached and evaluated 
>> Switch(1,0,3,1,5,2,7,1/0)
5

// Default result reached and evaluated 
>> Switch(-1,0,3,1,5,2,7,1/0)
Error({Kind:ErrorKind.Div0})

// ************************************** STRING CASES **************************************

// Switch case with exact match and without any default result
>> Switch("one","zero","3","one","5","two","7")
"5"

// Switch case with exact match and with default result
>> Switch("one","zero","3","one","5","two","7","11")
"5"

// Switch case without any exact match and default result
>> Switch("five","zero","3","one","5","two","7")
Blank()

>> Switch("two","one","3","one","5")
Blank()

// Switch case without any exact match, but with default result
>> Switch("five","zero","3","one","5","two","7","11")
"11"

>> Switch("two","one","3","one","5","11")
"11"

// =========================Null, Empty String and Error cases =========================

// Switch case with Blank() condition, without any exact match and default result
>> Switch(Blank(),"zero","3","one","5","two","7")
Blank()

>> Switch(Blank(),0,"3",1,"5",2,"7")
Blank()

// Switch case with Blank() condition, without any exact match, but with default result
>> Switch(Blank(),"zero","3","one","5","two","7","11")
"11"

>> Switch(Blank(),0,"3",1,"5",2,"7","11")
"11"

// Switch case with Blank() condition, with and exact match and default result
>> Switch(Blank(),"zero","3",Blank(),"5","two","7","11")
"5"

>> Switch(Blank(),0,"3",Blank(),"5",2,"7","11")
"5"

// Switch case with Blank() as the result of exact match
>> Switch("one","zero","3","one",Blank(),"two","7","11")
Blank()

>> Switch(1,0,"3",1,Blank(),2,"7","11")
Blank()

// ************************************** DIFFERENT DATAYPE RESULTS

>> Switch(1,0,"3",1,"5",2,"7")
"5"

>> Switch(1,0,false,1,true,2,false)
true

>> Switch(1,0,Date(2000,1,4),1,DateValue("1/10/2000"),2,Date(2000,1,11))
Date(2000,1,10)

>> Switch(1,0,TimeValue("10:00:00"),1,TimeValue("6:00:00"),2,TimeValue("8:00:00"))
Time(6,0,0,0)

>> Switch(1,0,DateTimeValue("4/1/2001 10:00:00"),1,DateTimeValue("5/1/2001 10:00:00"),2,DateTimeValue("6/1/2001 10:00:00"))
DateTime(2001,5,1,10,0,0,0)

// ************************************** COERCION CASES **************************************

//Switch considers the datatype of first encountered result, as the target datatype

// ====================== FIRST RESULT NUMBER, SECOND RESULT OTHER DATAYPE ======================

//Number-Number
>> Switch("Case1","Case2",1,"Case1",2)
2

//Number-String
>> Switch("Case1","Case2",1,"Case1","Result2")
Error({Kind:ErrorKind.InvalidArgument})

//Number-Boolean
>> Switch("Case1","Case2",1,"Case1",true)
1

>> Switch("Case1","Case2",1,"Case1",false)
0

// ====================== FIRST RESULT STRING, SECOND RESULT OTHER DATAYPE ======================

//String-Number
>> Switch("Case1","Case2","1","Case1",2)
"2"

//String-String
>> Switch("Case1","Case2","1","Case1","3")
"3"

//String-Boolean
>> Switch("Case1","Case2","1","Case1",true)
"true"

>> Switch("Case1","Case2","1","Case1",false)
"false"

// ====================== FIRST RESULT BOOLEAN, SECOND RESULT OTHER DATAYPE ======================

//Boolean-Number
>> Switch("Case1","Case2",true,"Case1",0)
false

>> Switch("Case1","Case2",false,"Case1",-23.5)
true

//Boolean-String
>> Switch("Case1","Case2",false,"Case1","true")
true

//Boolean-Boolean
>> Switch("Case1","Case2",true,"Case1",false)
false

>> Switch("Case1","Case2",false,"Case1",true)
true

// ====================== FIRST RESULT DATE, SECOND RESULT OTHER DATAYPE ======================

>> Switch("Case1","Case2",Date(2000,1,4),"Case1","AB$%^")
Error({Kind:ErrorKind.InvalidArgument})

//Date-Date
>> Switch("Case1","Case2",Date(2000,1,4),"Case1",Date(2000,1,5))
Date(2000,1,5)

>> Switch("Case1","Case2",Date(2000,1,4),"Case1",DateValue("1/10/2000"))
Date(2000,1,10)

//Date-DateTime
>> Switch("Case1","Case2",Date(2000,1,4),"Case1",DateTimeValue("4/1/2001 10:00:00"))
DateTime(2001,4,1,10,0,0,0)

// ====================== FIRST RESULT TIME, SECOND RESULT OTHER DATAYPE ======================

>> Switch("Case1","Case2",Time(6,30,30),"Case1",100)
Time(0,0,0,0)

//Time-String
>> Switch("Case1","Case2",Time(6,30,30),"Case1","1")
Time(0,0,0,0)

>> Switch("Case1","Case2",Time(6,30,30),"Case1","200")
Time(0,0,0,0)

>> Switch("Case1","Case2",Time(6,30,30),"Case1","AB$%^")
Error({Kind:ErrorKind.InvalidArgument})

//Time-Time
>> Switch("Case1","Case2",Time(6,30,30),"Case1",Time(6,30,40))
Time(6,30,40,0)

>> Switch("Case1","Case2",Time(6,30,30),"Case1",TimeValue("6:00:00"))
Time(6,0,0,0)

//Time-DateTime
>> Switch("Case1","Case2",Time(6,30,30),"Case1",DateTimeValue("4/1/2001 10:00:00"))
DateTime(2001,4,1,10,0,0,0)

// ====================== FIRST RESULT DATETIME, SECOND RESULT OTHER DATAYPE ======================

>> Switch("Case1","Case2",DateTimeValue("4/1/2001 10:00:00"),"Case1","AB$%^")
Error({Kind:ErrorKind.InvalidArgument})

//DateTime-DateTime
>> Switch("Case1","Case2",DateTimeValue("4/1/2001 10:00:00"),"Case1",DateTimeValue("4/1/2001 10:00:00"))
DateTime(2001,4,1,10,0,0,0)

// Result of switch can't be consumed.
>> Abs(Switch(1, 1, -2, {x:4}))
Errors: Error 0-28: The function 'Abs' has some invalid arguments.|Error 4-27: Invalid argument type (Void). Expecting a Number value instead.

// Expression generating void value can be used inside of the switch. If(1<0, 1, {x:1}) => void value
>> Switch(1, 1, 2, If(1<0, 1, {x:4}))
If(true, {test:1}, "Mismatched args (result of the expression can't be used).")

// Void expressions can become error
>> Switch(1, 1, 1/0, 10, {x:4})
Error({Kind:ErrorKind.Div0})

// Void expressions that are not errors have a void value
>> Switch(10, 1, 1/0, 10, {x:4})
If(true, {test:1}, "Mismatched args (result of the expression can't be used).")

>> Switch("a", "a", 2, {x:4}, 3)
Errors: Error 20-25: Invalid argument type (Record). Expecting a Text value instead.|Error 0-29: The function 'Switch' has some invalid arguments.

>> Switch(1, 2, 2, 3, b)
Errors: Error 19-20: Name isn't valid. 'b' isn't recognized.|Error 0-21: The function 'Switch' has some invalid arguments.
