// RoundUp(Number_or_table, digits_or_table), away from zero

// Table and scalar

>> RoundUp([1.2, 3.4, 5.6, 7.8], 0)
Table({Value:2},{Value:4},{Value:6},{Value:8})

>> RoundUp([1.23, 4.56, 7.89, 10.12], 1)
Table({Value:1.3},{Value:4.6},{Value:7.9},{Value:10.2})

>> RoundUp([-9.8765, -8.7654, -7.6543, -6.5432, -5.4321], 2)
Table({Value:-9.88},{Value:-8.77},{Value:-7.66},{Value:-6.55},{Value:-5.44})

>> RoundUp(Filter([1,2,3], Value > 10), 0) // Empty table
Table()

// Scalar and table
>> RoundUp(1234.5678, [-2, -1, 0, 1, 2])
Table({Result:1300},{Result:1240},{Result:1235},{Result:1234.6},{Result:1234.57})

// Table and table
>> RoundUp([123.456, 345.678], [1, 2])
Table({Value:123.5},{Value:345.68})

// Mixed length tables
>> RoundUp( [1.2, 2.3, 3.4], [1/0] )
Table({Value:Error({Kind:ErrorKind.Div0})},{Value:Error({Kind:ErrorKind.NotApplicable})},{Value:Error({Kind:ErrorKind.NotApplicable})})

>> RoundUp( [1.23], [1, 2, 3] )
Table({Value:1.3},{Value:Error({Kind:ErrorKind.NotApplicable})},{Value:Error({Kind:ErrorKind.NotApplicable})})

// Blank values
>> RoundUp( If(1<0,[1]), 1 )
Blank()

// Errors
>> RoundUp( If(1/0<2, [1]), 1 )
Error({Kind:ErrorKind.Div0})

>> RoundUp( [1.2, 2.3, 3.4], 1/0 )
Table({Value:Error({Kind:ErrorKind.Div0})},{Value:Error({Kind:ErrorKind.Div0})},{Value:Error({Kind:ErrorKind.Div0})})

>> RoundUp( [1.23, Sqrt(-1), 7.89], 1)
Table({Value:1.3},{Value:Error({Kind:ErrorKind.Numeric})},{Value:7.9})
