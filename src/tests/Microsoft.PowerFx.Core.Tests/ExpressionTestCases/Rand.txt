// Test Rand() - beware, rand is volatile. 

>>RandBetween(1, 1)
1

>>IsError(RandBetween(5, 1))
true

>>IsError(RandBetween(1/0, 1))
true

>>IsError(RandBetween(0, 1/0))
true

>>RandBetween(100.5, 100.7)
101

// First argument should be included
>> CountIf(Sequence(200), RandBetween(3, 4) = 3) > 0
true

// Second argument should be included
>> CountIf(Sequence(200), RandBetween(3, 4) = 4) > 0
true

>>RandBetween(Blank(),0.5)
0

>> CountIf(Sequence(200), RandBetween(Blank(), 1) = 0) > 0
true

>> CountIf(Sequence(200), RandBetween(Blank(), 1) = 1) > 0
true

>> Sum(Sequence(100), With({RandomNumber: RandBetween(1,20)}, If(RandomNumber >=1 && RandomNumber <= 20, 1, 0)))
100

>> Sum(Sequence(100), With({RandomNumber: RandBetween(2-1,50-30)}, If(RandomNumber >=1 && RandomNumber <= 20, 1, 0)))
100

>> Sum(Sequence(100), With({RandomNumber: Rand()}, If(RandomNumber > 0 && RandomNumber < 1.0, 1, 0)))
100

>> Sum(Sequence(100), With({rnd:RandBetween(-20,-10)}, If(rnd >= -20 And rnd <= -10, 1, 0)))
100

// Result must be larger than first argument
>> Sum(Sequence(100), RandBetween(4.5, 5.7))
500

>> Sum(Sequence(100), With({rnd:RandBetween(-4.5,-2.7)}, If(rnd = -4 Or rnd = -3, 1, 0)))
100

>> RandBetween(4.7, 4.5)
Error({Kind:ErrorKind.Numeric})

// Just like Excel, if there is no integer between the two numbers, take ceiling
>> Sum(Sequence(100), RandBetween(3.5, 3.7))
400

>> Find("000000000000", Text(RandBetween(-1e28, 1e28)))
Blank()

>> RandBetween( 9007199254740992 /* MaxFloatInt */, 9007199254740992 /* MaxFloatInt */ )
9007199254740992

>> RandBetween( -9007199254740992 /* MaxFloatInt */, -9007199254740992 /* MaxFloatInt */ )
-9007199254740992

>> Sum(Sequence(100), With( { r: RandBetween( 9007199254740985, 9007199254740992 /* MaxFloatInt */ ) }, If( 9007199254740985 <= r And r <= 9007199254740992 /* MaxFloatInt */, 1, Error( "Result out of range" ) ) ) )
100

>> Sum(Sequence(100), With( { r: RandBetween( -9007199254740992 /* MinFloatInt */, -9007199254740985 ) }, If( -9007199254740992 /* MaxFloatInt */ <= r And r <= -9007199254740985 , 1, Error( "Result out of range" ) ) ) )
100

>> Sum(Sequence(100), With( { r: RandBetween( -9007199254740992 /* MinFloatInt */, 9007199254740992 /* MaxFloatInt */) }, If( -9007199254740992 <= r And r <= 9007199254740992 /* MaxFloatInt */, 1, Error( "Result out of range" ) ) ) )
100
