#SETUP: EnableExpressionChaining,MutationFunctionsTestSetup

// MutationFunctionsTestSetup handle does the following:
// - Creates a record: r1 => {Field1:1,Field2:"earth",Field3:1/1/2022,Field4:true}
// - Creates a record: r2 => {Field1:2,Field2:"moon",Field3:2/1/2022,Field4:false} (for convenience)
// - Creates a record: r_empty => {}
// - Creates a table: t1(r1) => Type (Field1, Field2, Field3, Field4)

>> Collect(t1, r2);Remove(t1, r1);t1
Table({Field1:2,Field2:"moon",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false})

>> Collect(t1, r1);Collect(t1, r1);Collect(t1, r1);Collect(t1, r2);Remove(t1, r1, "All");t1
Table({Field1:2,Field2:"moon",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false})

>> Collect(t1, r2);
  Collect(t1, {Field1:3,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Collect(t1, {Field1:4,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Remove(t1, {Field2:"earth"});
  t1
Table({Field1:2,Field2:"moon",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false},{Field1:3,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false},{Field1:4,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false})

>> Collect(t1, r2);
  Collect(t1, {Field1:3,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Collect(t1, {Field1:4,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Remove(t1, {Field2:"earth"}, "All");
  t1
Table({Field1:2,Field2:"moon",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false})

>> Collect(t1, r2);
  Collect(t1, {Field1:3,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Collect(t1, {Field1:4,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Remove(t1, {Field4:false});
  t1
Table({Field1:1,Field2:"earth",Field3:DateTime(2022,1,1,0,0,0,0),Field4:true},{Field1:3,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false},{Field1:4,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false})

>> Collect(t1, r2);
  Collect(t1, {Field1:3,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Collect(t1, {Field1:4,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Remove(t1, {Field4:false}, "All");
  t1
Table({Field1:1,Field2:"earth",Field3:DateTime(2022,1,1,0,0,0,0),Field4:true})

>> Collect(t1, r2);
  Collect(t1, {Field1:1/0,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Collect(t1, {Field1:1/0,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Remove(t1, {Field4:false}, "All");
  t1
Table({Field1:1,Field2:"earth",Field3:DateTime(2022,1,1,0,0,0,0),Field4:true})

>> Collect(t1, {Field1:1/0,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Collect(t1, {Field1:1/0,Field2:"earth",Field3:DateTime(2022,2,1,0,0,0,0),Field4:false});
  Collect(t1, {Field1:1/0,Field2:"moon",Field3:DateTime(2030,2,1,0,0,0,0),Field4:true});
  Remove(t1, {Field2:"earth"}, "All");
  t1
Table({Field1:Microsoft.PowerFx.Types.ErrorValue,Field2:"moon",Field3:DateTime(2030,2,1,0,0,0,0),Field4:true})

// Wrong arguments
>> Remove(t1, r1,"Al");
Errors: Error 14-18: If provided, last argument must be 'All'. Is there a typo?|Error 0-19: The function 'Remove' has some invalid arguments.

>> Remove(t1, r1,"");
Errors: Error 14-16: If provided, last argument must be 'All'. Is there a typo?|Error 0-17: The function 'Remove' has some invalid arguments.

>> Remove(t1, r1, r1, r1, r1, r1, r1, "Al");
Errors: Error 35-39: If provided, last argument must be 'All'. Is there a typo?|Error 0-40: The function 'Remove' has some invalid arguments.

>> Remove(t1, "All");
Errors: Error 11-16: Invalid argument type (Text). Expecting a Record value instead.|Error 11-16: Cannot use a non-record value in this context.|Error 0-17: The function 'Remove' has some invalid arguments.