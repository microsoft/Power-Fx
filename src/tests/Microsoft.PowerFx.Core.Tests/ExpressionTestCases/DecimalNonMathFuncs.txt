#SETUP: TableSyntaxDoesntWrapRecords,SupportColumnNamesAsIdentifiers,!NumberIsFloat

// non-decimal aware other functions

>> Mid( "asdf", 2, 2 )
"sd"

>> Left( "asdf", 1 )
"a"

>> Right( "asdf", 1 )
"f"

>> Count( [1,2,3,4] ) * 1.0000000000000000000000002
4

>> CountA( [1,2,3,4] ) * 1.0000000000000000000000002
4

>> CountRows( [1,2,3,4] ) * 1.0000000000000000000000002
4

>> Error({Kind:8})   // constraint violated
Errors: Error 6-14: Invalid argument type. Expecting a Record value, but of a different schema.|Error 6-14: Invalid type for field 'Kind'. Expected field type of 'ErrorKind'.

// generic functions that work with any data type

>> Filter( [1.0000000000000000000000001,1.0000000000000000000000002,1.0000000000000000000000003,1.0000000000000000000000002], Value = 1.0000000000000000000000002 )
Table({Value:1.0000000000000000000000002},{Value:1.0000000000000000000000002})

>> Filter( [{a:1.0000000000000000000000001,b:1},{a:1.0000000000000000000000002,b:2},{a:1.0000000000000000000000003,b:3},{a:1.0000000000000000000000002,b:4}], a = 1.0000000000000000000000002 )
Table({a:1.0000000000000000000000002,b:2},{a:1.0000000000000000000000002,b:4})

>> LookUp( [1.0000000000000000000000001,1.0000000000000000000000002,1.0000000000000000000000003,1.0000000000000000000000002], Value = 1.0000000000000000000000002 )
{Value:1.0000000000000000000000002}

>> LookUp( [{a:1.0000000000000000000000001,b:1},{a:1.0000000000000000000000002,b:2},{a:1.0000000000000000000000003,b:3},{a:1.0000000000000000000000002,b:4}], a = 1.0000000000000000000000002 )
{a:1.0000000000000000000000002,b:2}

>> AddColumns(["1","2","3"],dec,Decimal(Value)+0.00000000000000000000001)
Table({Value:"1",dec:1.00000000000000000000001},{Value:"2",dec:2.00000000000000000000001},{Value:"3",dec:3.00000000000000000000001})

>> AddColumns(["1","2","3"],dec,Value+0.00000000000000000000001)
Table({Value:"1",dec:1.00000000000000000000001},{Value:"2",dec:2.00000000000000000000001},{Value:"3",dec:3.00000000000000000000001})

>> AddColumns(["1","2","3"],dec,Float(Value)+0.00000000000000000000001)
Table({Value:"1",dec:1},{Value:"2",dec:2},{Value:"3",dec:3})

>> AddColumns(["1","2","3"],dec,Value(Value)+0.00000000000000000000001)
Table({Value:"1",dec:1.00000000000000000000001},{Value:"2",dec:2.00000000000000000000001},{Value:"3",dec:3.00000000000000000000001})

>> ForAll([1,2,3],{Value:Value + 0.00000000000000000000001})
Table({Value:1.00000000000000000000001},{Value:2.00000000000000000000001},{Value:3.00000000000000000000001})

>> Sum(ForAll([1,2,3],{Value:Value}), Value + 0.00000000000000000000001)
6.00000000000000000000003

>> ForAll(["1","2","3"],{Value:Value + 0.00000000000000000000001})
Table({Value:1.00000000000000000000001},{Value:2.00000000000000000000001},{Value:3.00000000000000000000001})

>> Sum(ForAll(["1","2","3"],{Value:Value + 0.00000000000000000000001}), Value + 0.00000000000000000000001)
6.00000000000000000000006

>> ForAll([Float(1),Float(2),Float(3)],{Value:Value + 0.00000000000000000000001})
Table({Value:1},{Value:2},{Value:3})

>> Table( {a:1.00000000000000000000001},{b:2.00000000000000000000001},{c:3.00000000000000000000001} )
Table({a:1.00000000000000000000001,b:Blank(),c:Blank()},{a:Blank(),b:2.00000000000000000000001,c:Blank()},{a:Blank(),b:Blank(),c:3.00000000000000000000001})

>> [1.00000000000000000000001,2.00000000000000000000001,3.00000000000000000000001]
Table({Value:1.00000000000000000000001},{Value:2.00000000000000000000001},{Value:3.00000000000000000000001})

>> Table( {a:0.00000000000000000000001,b:Float(2)},{a:Float(1),b:0.00000000000000000000001} )
Errors: Error 0-90: The function 'Table' has some invalid arguments.|Error 48-88: Cannot use this record. It may contain colliding fields of incompatible types.

>> [{a:0.00000000000000000000001,b:Float(2)},{a:Float(1),b:0.00000000000000000000001}]
Table({a:0.00000000000000000000001,b:2},{a:1,b:0.00000000000000000000001})

// functions that take their type from the first instance of the value

>> If( true, 1.0000000000000000000000002, Float(1) )
1.0000000000000000000000002

>> If( false, 1.0000000000000000000000002, Float(1) )
1

>> If( true, 1.0000000000000000000000002, Float(1) ) + 0.00000000000000000000001
1.0000000000000000000000102

>> If( false, 1.0000000000000000000000002, Float(1) ) + 0.00000000000000000000001
1.00000000000000000000001

>> If( true, 1.0000000000000000000000002, 2.0000000000000000000000002 )
1.0000000000000000000000002

>> If( false, 1.0000000000000000000000002, 2.0000000000000000000000002 )
2.0000000000000000000000002

>> If( true, 1.0000000000000000000000002, "2.0000000000000000000000002" )
1.0000000000000000000000002

>> If( false, 1.0000000000000000000000002, "2.0000000000000000000000002" )
2.0000000000000000000000002

>> If( true, 1.0000000000000000000000002, false )
1.0000000000000000000000002

>> If( false, 1.0000000000000000000000002, false )
0

>> If( true, 1.0000000000000000000000002, false ) + 0.00000000000000000000001
1.0000000000000000000000102

>> If( false, 1.0000000000000000000000002, false ) + 0.00000000000000000000001
0.00000000000000000000001

>> If( true, 1.0000000000000000000000002, Float("1e100") )
1.0000000000000000000000002

>> If( false, 1.00000000000000000000000002, Float("1e100") )
Error({Kind:ErrorKind.InvalidArgument})

>> If( 1, 2, 3 )
2

>> If( 1.0000000000000000000000002 - 1, 2, 3 )
2

>> Switch( 1.0000000000000000000000002, 1.0000000000000000000000001, "no1", 1.0000000000000000000000002, "yes", 1.0000000000000000000000003, "no2", "no3" ) 
"yes"

>> Switch( 1.0000000000000000000000002, 1.0000000000000000000000001, 2.0000000000000000000000001, 1.0000000000000000000000002, 2.0000000000000000000000002, 1.0000000000000000000000003, 2.0000000000000000000000003, 2.0000000000000000000000004 )
2.0000000000000000000000002

>> Switch( 1.0000000000000000000000002, 1.0000000000000000000000001, 2.0000000000000000000000001, 1.0000000000000000000000002, "2.0000000000000000000000002", 1.0000000000000000000000003, 2.0000000000000000000000003, 2.0000000000000000000000004 )
2.0000000000000000000000002

>> Switch( 1.0000000000000000000000005, 1.0000000000000000000000001, 2.0000000000000000000000001, 1.0000000000000000000000002, 2.0000000000000000000000002, 1.0000000000000000000000003, 2.0000000000000000000000003, 2.0000000000000000000000004 )
2.0000000000000000000000004

>> Switch( "1", "1", 2.0000000000000000000000001, "2", 2.0000000000000000000000002, "3", 2.0000000000000000000000003, 2.0000000000000000000000004 )
2.0000000000000000000000001

>> Switch( false, 1, 2.0000000000000000000000001, 0, 2.0000000000000000000000002, 3, 2.0000000000000000000000003, 2.0000000000000000000000004 )
2.0000000000000000000000002

>> Switch( "4", "1", 2.0000000000000000000000001, "2", 2.0000000000000000000000002, "3", 2.0000000000000000000000003, 2.0000000000000000000000004 )
2.0000000000000000000000004

>> Switch( "1.0000000000000000000000002", 1.0000000000000000000000001, 2.0000000000000000000000001, 1.0000000000000000000000002, 2.0000000000000000000000002, 1.0000000000000000000000003, 2.0000000000000000000000003, 2.0000000000000000000000004 )
2.0000000000000000000000002

>> Switch( "1.0000000000000000000000005", 1.0000000000000000000000001, 2.0000000000000000000000001, 1.0000000000000000000000002, 2.0000000000000000000000002, 1.0000000000000000000000003, 2.0000000000000000000000003, 2.0000000000000000000000004 )
2.0000000000000000000000004

>> Switch( "0", true, 2.0000000000000000000000001, false, 2.0000000000000000000000002, 2.0000000000000000000000004 )
2.0000000000000000000000004

>> Coalesce( 2.0000000000000000000000004, 4.0000000000000000000000004 )
2.0000000000000000000000004

>> Coalesce( Decimal(Blank()), 4.0000000000000000000000004 )
4.0000000000000000000000004

>> Coalesce( If( 1<0, 2.0000000000000000000000004 ), 4.0000000000000000000000004 ) 
4.0000000000000000000000004

>> Coalesce( 2.0000000000000000000000004, Float(4) ) + 0.0000000000000000000000004 
2.0000000000000000000000008

>> Coalesce( Decimal(Blank()), Float(4) ) + 0.0000000000000000000000004 
4.0000000000000000000000004

>> Coalesce( If( 1<0, 2.0000000000000000000000004 ), Float(4) ) + 0.0000000000000000000000004 
4.0000000000000000000000004

>> IfError( 2.0000000000000000000000004, 4.0000000000000000000000004 )
2.0000000000000000000000004

>> IfError( 2.0000000000000000000000004/0, 4.0000000000000000000000004 )
4.0000000000000000000000004

>> IfError( Float(2)/0, 4.0000000000000000000000004 )
4

>> IfError( 2.0000000000000000000000004/0, Float(4) ) + 0.0000000000000000000000004 
4.0000000000000000000000004

