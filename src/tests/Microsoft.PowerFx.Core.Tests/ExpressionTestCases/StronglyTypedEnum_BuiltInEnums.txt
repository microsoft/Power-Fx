#SETUP: StronglyTypedBuiltinEnums,PowerFxV1CompatibilityRules,AllEnumsSetup,RegEx,EnableJsonFunctions

// **** Using built in enums only, V1 compat. ****
// Some enum varients are not represented in the Builtin set, including, for example, any Boolean enums.
// For tihs reason, the companion _TestEnums version of this file uses built in and additional test enums.
// While this version remains compatible with Canvas.

// Strongly typed enums were strengthened to:
//    0. Strongly typed enum usage is the most common scenario and what Intellisense will suggest.
//    1. Avoid passing the wrong kind of enum to a function. For example JSON( [1,2,3], Match.IgnoreCase )
//    2. Avoid passing an enum where a scalar was expected, except for text backed enums. For example Mid( "foo", StartOfWeek.Tuesday )
//    3. Avoid passing a scalar where an enum was expected, excepf for text backed enums. For example Weekday( Now(), 12 )
//
// Default operations with backing type
//    4. Equals/not equals between enum values of the same enum is always supported.  For example, StartOfWeek.Tuesday = StartOfWeek.Monday
//    5. By default, Equals/not equals with the backing kind is not supported.  For example, StartOfWeek.Tuesday = 12
//    6. By default, Order comparisons between number based enums are not supported, by default. For example StartOfWeek.Tuesday < StartOfWeek.Monday
//    7. By default, math operations between number based enums are never supported. For example, StartOfWeek.Tuesday + StartOfWeek.Monday 
//    8. By default, Boolean operations between Boolean based enums is not supported, but can be overriden with CanCoerceToBackingKind
//    9. If the underlying value is desired, the Text, Value, Decimal, Float, and Boolean functions can be called to get the backing value.
//
// In addition, there are flags for each option set that govern how it can be used.  Default is no flags, used by Dataverse option sets.
//   10. CanCoerceFromBackingKind - For example, Match which allows a string in place of the enum
//   11. CanCoerceToBackingKind - For example, ErrorKind that can be used as a number
//   12. CanConcatenateStronglyTyped (text only) - For example, JSONFormat which can concatenate different members together to create a new member
//   13. CanCompareNumeric (numbers only) - For example, ErrorKind can compare values
//   14. CanConcatenateStronglyTyped & CanCoerceFromBackingKind - An important combination, used by Match, allows strings and enums to be mixed
//
// Misc
//   15. Since there is no longer an Accepts relationship between enums and their backing kinds, more likely to get Void results
//   16. Everything coerces to string
// 
// Examples (examples for Boolean backed enums and other configurations are in StronglyTypedEnums_TestEnums)
//   17. StartOfWeek - Standard number backed enum
//   18. TimeUnit - Standard string backed enum
//   19. MatchOptions - String backed enum with CanConcatenateStronglyTyped
//   20. Color - Color backed enum with CoerceToBackingKind
//   21. ErrorKind - Number backed enum with CoerceToBackingKind and CanCompareNumeric
//   22. DateTimeFormat - String backed enum with CoerceFromBackingKind
//   23. Match - String backed enum with CoerceFromBackingKind and CanConcatenateStronglyTyped

//============================================================================================================
//
// 0. Strongly typed enum usage is the most common scenario and what Intellisense will suggest.
//

>> Sort( [1,2,3], SortOrder.Descending )
Table({Value:1},{Value:2},{Value:3})

>> Match( "info@contoso.com", Match.Email )
{FullMatch:"info@contoso.com",StartMatch:1,SubMatches:Table()}

>> JSON( [1,2,3], JSONFormat.FlattenValueTables )
"[1,2,3]"

>> Weekday( Date(1990,1,1), StartOfWeek.Tuesday )
7

>> ColorFade( Color.Red, 10% )
RGBA(255,25,25,1)

//============================================================================================================
//
// 1. Avoid passing the wrong kind of enum to a function. For example JSON( [1,2,3], Match.IgnoreCase )
//

>> Sort( [1,2,3], Value, JSONFormat.IndentFour )
Errors: Error 32-43: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (SortOrder) value instead.|Error 0-4: The function 'Sort' has some invalid arguments.

>> Match( "info@contoso.com", JSONFormat.IndentFour )
Errors: Error 37-48: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (Match) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> Match( "asdf", SortOrder.Ascending )
Errors: Error 24-34: Invalid argument type (Enum (SortOrder)). Expecting a Enum (Match) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> JSON( [1,2,3], MatchOptions.IgnoreCase )
Errors: Error 27-38: Invalid argument type (Enum (MatchOptions)). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> JSON( [1,2,3], Match.Email )
Errors: Error 20-26: Invalid argument type (Enum (Match)). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> JSON( [1,2,3], StartOfWeek.Tuesday )
Errors: Error 26-34: Invalid argument type (Enum (StartOfWeek)). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> Match( "hi", JSONFormat.IndentFour )
Errors: Error 23-34: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (Match) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> Match( "hi", "h.*", JSONFormat.IndentFour )
Errors: Error 30-41: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> Match( "hi", Match.Email, JSONFormat.IndentFour )
Errors: Error 36-47: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> IsMatch( "hi", JSONFormat.IndentFour )
Errors: Error 25-36: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (Match) value instead.

>> IsMatch( "hi", "h.*", JSONFormat.IndentFour )
Errors: Error 32-43: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.

>> IsMatch( "hi", Match.Email, JSONFormat.IndentFour )
Errors: Errors: Error 38-49: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.

>> MatchAll( "hi", JSONFormat.IndentFour )
Errors: Error 26-37: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (Match) value instead.|Error 0-8: The function 'MatchAll' has some invalid arguments.

>> MatchAll( "hi", "h.*", JSONFormat.IndentFour )
Errors: Error 33-44: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.|Error 0-8: The function 'MatchAll' has some invalid arguments.

>> MatchAll( "hi", Match.Email, JSONFormat.IndentFour )
Errors: Error 39-50: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.|Error 0-8: The function 'MatchAll' has some invalid arguments.

>> Text( 12, JSONFormat.IndentFour )
Errors: Error 0-4: The function 'Text' has some invalid arguments.|Error 20-31: Expected text. We expect text at this point in the formula.

>> Text( 12, MatchOptions.IgnoreCase )
Errors: Error 0-4: The function 'Text' has some invalid arguments.|Error 22-33: Expected text. We expect text at this point in the formula.

>> Weekday( Date(1980,1,1), ErrorKind.Div0 )
Errors: Error 34-39: Invalid argument type (Enum (ErrorKind)). Expecting a Enum (StartOfWeek) value instead.

>> Weekday( Date(1980,1,1), JSONFormat.IndentFour )
Errors: Error 35-46: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (StartOfWeek) value instead.

//===========================================================================================================
//
// 2. Avoid passing an enum where a scalar was expected, except for text.  For example Mid( "foo", StartOfWeek.Tuesday ). 
//

>> Mid( "foo", StartOfWeek.Tuesday )
Errors: Error 0-3: The function 'Mid' has some invalid arguments.|Error 23-31: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

>> Mid( "foo", 1, StartOfWeek.Monday )
Errors: Error 0-3: The function 'Mid' has some invalid arguments.|Error 26-33: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

>> Left( "foo", StartOfWeek.Sunday )
Errors: Error 0-4: The function 'Left' has some invalid arguments.|Error 24-31: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

>> Int( StartOfWeek.Tuesday )
Errors: Error 0-3: The function 'Int' has some invalid arguments.|Error 16-24: Invalid argument type (Enum (StartOfWeek)). Expecting a Decimal value instead.

>> Power( StartOfWeek.Saturday, StartOfWeek.MondayZero )
Errors: Error 0-5: The function 'Power' has some invalid arguments.|Error 18-27: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.|Error 40-51: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

>> Mod( StartOfWeek.Tuesday, StartOfWeek.Tuesday )
Errors: Error 0-3: The function 'Mod' has some invalid arguments.|Error 16-24: Invalid argument type (Enum (StartOfWeek)). Expecting a Decimal value instead.|Error 37-45: Invalid argument type (Enum (StartOfWeek)). Expecting a Decimal value instead.

>> Left( "hi", StartOfWeek.Sunday )
Errors: Error 0-4: The function 'Left' has some invalid arguments.|Error 23-30: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

// Text backed enums can always we passed as text, as all enums coerce to text

>> Mid( Match.Letter, 1, 1 )
"\"

//===========================================================================================================
//
// 3. Avoid passing a scalar where an enum was expected, excepf for text backed enums. For example Weekday( Now(), 12 )
//

>> Weekday( Date(1990,1,1), 12 )
Errors: Error 25-27: Invalid argument type (Decimal). Expecting a Enum (StartOfWeek) value instead.

>> Sort( [1,2,3], Value, "descending" )
Errors: Error 22-34: Invalid argument type (Text). Expecting a Enum (SortOrder) value instead.|Error 0-4: The function 'Sort' has some invalid arguments.

>> JSON( [1,2,3], "_" )
Errors: Error 15-18: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> Match( "howdy", "h", "c" )
Errors: Error 21-24: Invalid argument type (Text). Expecting a Enum (MatchOptions) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> IsMatch("Foo", 17)
Errors: Error 15-17: Invalid argument type (Decimal). Expecting a Enum (Match) value instead.

>> IsMatch("Foo", 1/0)
Errors: Error 16-17: Invalid argument type (Decimal). Expecting a Enum (Match) value instead.

//===========================================================================================================
//
// 4. Equals/not equals between enum values of the same enum is always supported.  For example, StartOfWeek.Tuesday = StartOfWeek.Monday
//

>> StartOfWeek.Tuesday = StartOfWeek.Wednesday
false

>> StartOfWeek.Tuesday <> StartOfWeek.Wednesday
true

>> JSONFormat.IndentFour = JSONFormat.Compact
false

>> JSONFormat.IndentFour <> JSONFormat.Compact
true

>> SortOrder.Ascending = SortOrder.Descending
false

>> SortOrder.Ascending <> SortOrder.Descending
true

>> ErrorKind.Div0 = ErrorKind.Custom
false

>> ErrorKind.Div0 <> ErrorKind.Unknown
true

>> Color.Red = Color.Pink
false

>> Color.Red <> Color.Pink
true

>> ErrorKind.Custom <> ErrorKind.Custom
false

>> ErrorKind.Div0 <> ErrorKind.Custom
true

// Not supported between different enums, even if the same backing kind or if CanCoerceToBackindKind is true

>> StartOfWeek.Tuesday = ErrorKind.Div0
Errors: Error 20-21: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Enum (ErrorKind).

>> StartOfWeek.Tuesday <> ErrorKind.Unknown
Errors: Error 20-22: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Enum (ErrorKind).

>> JSONFormat.IndentFour = SortOrder.Descending
Errors: Error 22-23: Incompatible types for comparison. These types can't be compared: Enum (JSONFormat), Enum (SortOrder).

>> JSONFormat.IndentFour <> Match.Email
Errors: Error 22-24: Incompatible types for comparison. These types can't be compared: Enum (JSONFormat), Enum (Match).

>> Match.Digit <> MatchOptions.Contains
Errors: Error 12-14: Incompatible types for comparison. These types can't be compared: Enum (Match), Enum (MatchOptions).

>> Match.Digit = MatchOptions.Contains
Errors: Error 12-13: Incompatible types for comparison. These types can't be compared: Enum (Match), Enum (MatchOptions).

//===========================================================================================================
//
//  5. By default, Equals/not equals with the backing kind is not supported.  For example, StartOfWeek.Tuesday = 12
//

>> StartOfWeek.Tuesday = 12
Errors: Error 20-21: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Tuesday <> 14
Errors: Error 20-22: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> JSONFormat.IndentFour = "4"
Errors: Error 22-23: Incompatible types for comparison. These types can't be compared: Enum (JSONFormat), Text.

>> JSONFormat.IndentFour <> "_"
Errors: Error 22-24: Incompatible types for comparison. These types can't be compared: Enum (JSONFormat), Text.

>> MatchOptions.Contains = "c"
Errors: Error 22-23: Incompatible types for comparison. These types can't be compared: Enum (MatchOptions), Text.

>> MatchOptions.Contains <> "c"
Errors: Error 22-24: Incompatible types for comparison. These types can't be compared: Enum (MatchOptions), Text.

//===========================================================================================================
//
// 6. By default, Order comparisons between number based enums are not supported by default, for example StartOfWeek.Tuesday < StartOfWeek.Monday
//

>> StartOfWeek.Tuesday > 3
Errors: Error 20-21: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Tuesday > StartOfWeek.Wednesday
Errors: Error 20-21: Unable to compare values of type Enum (StartOfWeek).

>> StartOfWeek.Friday < 5
Errors: Error 19-20: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Friday < StartOfWeek.Sunday
Errors: Error 19-20: Unable to compare values of type Enum (StartOfWeek).

>> StartOfWeek.Friday <= 5
Errors: Error 19-21: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Friday <= StartOfWeek.Sunday
Errors: Error 19-21: Unable to compare values of type Enum (StartOfWeek).

>> StartOfWeek.Friday >= 5
Errors: Error 19-21: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Friday >= StartOfWeek.Sunday
Errors: Error 19-21: Unable to compare values of type Enum (StartOfWeek).

//===========================================================================================================
//
// 7. By default, math operations between number based enums are never supported. For example, StartOfWeek.Tuesday + StartOfWeek.Monday 
//

>> StartOfWeek.Tuesday + 3
Errors: Error 11-19: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> StartOfWeek.Tuesday + StartOfWeek.Thursday
Errors: Error 11-19: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.|Error 33-42: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> StartOfWeek.Tuesday * 2
Errors: Error 11-19: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

//===========================================================================================================
//
// 8. By default, Boolean operations between Boolean based enums is not supported, but can be overriden with CanCoerceToBackingKind
//

//===========================================================================================================
//
// 9. If the underlying value is desired, the Text, Value, Decimal, Float, and Boolean functions can be called to get the backing value.
//

// Text can be called on all option set values

>> Text( Match.Digit )
"\d"

>> Text( StartOfWeek.Tuesday )
"Tuesday"

>> Text( ErrorKind.Div0 )
"Div0"

>> Text( JSONFormat.IndentFour )
"4"

>> Value( StartOfWeek.Friday )
15

>> Value( ErrorKind.Unknown )
12

>> Value( Match.Digit )
Errors: Error 0-5: The function 'Value' has some invalid arguments.|Error 12-18: Expected text or number. We expect text or a number at this point in the formula.

>> Value( JSONFormat.IndentFour )
Errors: Error 0-5: The function 'Value' has some invalid arguments.|Error 17-28: Expected text or number. We expect text or a number at this point in the formula.

>> Float( StartOfWeek.Friday )
15

>> Float( ErrorKind.Unknown )
12

>> Float( Match.Digit )
Errors: Error 0-5: The function 'Float' has some invalid arguments.|Error 12-18: Expected text or number. We expect text or a number at this point in the formula.

>> Float( JSONFormat.IndentFour )
Errors: Error 0-5: The function 'Float' has some invalid arguments.|Error 17-28: Expected text or number. We expect text or a number at this point in the formula.

>> Decimal( StartOfWeek.Friday )
15

>> Decimal( ErrorKind.Unknown )
12

>> Decimal( Match.Digit )
Errors: Error 0-7: The function 'Decimal' has some invalid arguments.|Error 14-20: Expected text or number. We expect text or a number at this point in the formula.

>> Decimal( JSONFormat.IndentFour )
Errors: Error 0-7: The function 'Decimal' has some invalid arguments.|Error 19-30: Expected text or number. We expect text or a number at this point in the formula.

>> Boolean( StartOfWeek.Friday )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> Boolean( ErrorKind.Unknown )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> Boolean( Match.Digit )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> Boolean( JSONFormat.IndentFour )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

// no constructor for Color values

//===========================================================================================================
//
// 10. CanCoerceFromBackingKind - For example, Match which allows a string in place of the enum
//

// Match (and friends) allows coercion from the backing kind for the regular expression

>> Match( "a3d4", Match.Digit )
{FullMatch:"3",StartMatch:2,SubMatches:Table()}

>> Match( "a3d4", "\d")
{FullMatch:"3",StartMatch:2,SubMatches:Table()}

>> IsMatch( "a3d4", Match.Digit )
false

>> IsMatch( "a3d4", "\d")
false

>> MatchAll( "a3d4", Match.Digit )
Table({FullMatch:"3",StartMatch:2,SubMatches:Table()},{FullMatch:"4",StartMatch:4,SubMatches:Table()})

>> MatchAll( "a3d4", "\d")
Table({FullMatch:"3",StartMatch:2,SubMatches:Table()},{FullMatch:"4",StartMatch:4,SubMatches:Table()})

>> Match.Digit = "\d"
true

>> Match.Digit <> "\d"
false

>> Match.Digit > "\d"
Errors: Error 12-13: Incompatible types for comparison. These types can't be compared: Enum (Match), Text.

>> "\d" = Match.Digit
true

>> "\d" <> Match.Digit
false

>> "\d" > Match.Digit
Errors: Error 5-6: Incompatible types for comparison. These types can't be compared: Text, Enum (Match).
 
// Most other enums do not, see section 1 above

//===========================================================================================================
//
// 11. CanCoerceToBackingKind - For example, ErrorKind that can be used as a number
//

// ErrorKind allows coerction to the backing kind

>> Error( {Kind: ErrorKind.Div0} )
Error({Kind:ErrorKind.Div0})

>> Error( {Kind: 13} )
Error({Kind:ErrorKind.Div0})

>> ColorFade( Color.Pink, 10% )
RGBA(255,198,208,1)

>> ColorFade( RGBA(1,4,9,100%), 10% )
RGBA(26,29,33,1)

// ErrorKind has CoerceTo set

>> ErrorKind.Unknown + 2
14

>> ErrorKind.Unknown * 2
24

>> ErrorKind.Unknown / 2
6

>> ErrorKind.Unknown ^ 2
144

// Equals/not equals comparisons

>> Color.Red = RGBA(1,1,1,1)
false

>> Color.Red <> RGBA(1,1,1,1)
true

>> Color.Red = RGBA(255,0,0,1)
true

>> Color.Red <> RGBA(255,0,0,1)
false

>> ErrorKind.Div0 = 13
true

>> ErrorKind.Div0 <> 13
false

// Most other enums do not, see section 2 above

//===========================================================================================================
//
// 12. CanConcatenateStronglyTyped (text only) - For example, JSONFormat which can concatenate different members together to create a new member
//

// By default, concatenation results in a text string that won't match strongly typed arguments

>> Sort( [1,2,3], Value, SortOrder.Descending & SortOrder.Ascending )
Errors: Error 43-44: Invalid argument type (Text). Expecting a Enum (SortOrder) value instead.|Error 0-4: The function 'Sort' has some invalid arguments.

>> JSON( [1,2,3], JSONFormat.Compact & Match.Letter )
Errors: Error 34-35: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

// Since the Match supports CanCoerceBackingKind, any concatenation combination is supported
>> Match( "334", Match.Digit & Match.Digit & JSONFormat.IndentFour )
{FullMatch:"334",StartMatch:1,SubMatches:Table()}

// Concatenation can be allowed between members of the option set and still retain strong typing with IExternalOptionSet.CanConcatenateStronglyTyped

>> JSON( [1,2,3], JSONFormat.IgnoreBinaryData & JSONFormat.FlattenValueTables )
"[1,2,3]"

>> JSON( [1,2,3], JSONFormat.IgnoreBinaryData & "_" )
Errors: Error 43-44: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> JSON( [4,5,6], "_" )
Errors: Error 15-18: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

// Concatenation can be allowed with text strings and still retain strong typing with IExternalOptionSet.CanCoerceBackingKind

>> Match( "33this is ok", Concatenate( Match.Digit, Match.Digit, "this is ok" ) )
{FullMatch:"33this is ok",StartMatch:1,SubMatches:Table()}

>> Match( "33this is ok", Match.Digit & Match.Digit & "this is ok" )
{FullMatch:"33this is ok",StartMatch:1,SubMatches:Table()}

>> Match( "33this is ok", "\d\dthis is ok" )
{FullMatch:"33this is ok",StartMatch:1,SubMatches:Table()}

>> Match( "33this is ok", "\d" & "\d" & "this is ok" )
{FullMatch:"33this is ok",StartMatch:1,SubMatches:Table()}

// Strongly typed concatenated results can be compared

>> JSONFormat.IndentFour & JSONFormat.FlattenValueTables = JSONFormat.IgnoreBinaryData
false

>> JSONFormat.IndentFour & JSONFormat.FlattenValueTables <> JSONFormat.IgnoreBinaryData
true

>> JSONFormat.IndentFour & JSONFormat.FlattenValueTables = JSONFormat.IndentFour & JSONFormat.FlattenValueTables
true

>> JSONFormat.IndentFour & JSONFormat.FlattenValueTables <> JSONFormat.IndentFour & JSONFormat.FlattenValueTables
false

// Otherwise concatenate results in a text string, but that won't match strongly typed arguments

>> JSON( "foo", Concatenate( Match.Digit, JSONFormat.IndentFour ) )
Errors: Error 13-62: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> JSON( "foo", Match.Digit & JSONFormat.IndentFour )
Errors: Error 25-26: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

//===========================================================================================================
//
// 13. CanCompareNumeric (numbers only) - For example, ErrorKind can compare values
//

// Long term, ErrorKind should be a strongly typed value and no longer use CoerceTo and depend on CompareNumeric/CoerceFrom instead

>> ErrorKind.Unknown < ErrorKind.Custom
true

>> ErrorKind.Unknown < 1000
true

>> ErrorKind.Unknown > 1000
false

>> ErrorKind.Unknown <= 1000
true

>> ErrorKind.Unknown >= 1000
false

>> ErrorKind.Custom = 1000
true

//===========================================================================================================
//
// 14. CanConcatenateStronglyTyped & CanCoerceFromBackingKind - An important combination, used by Match, allows strings and enums to be mixed
//

>> Match( "a34d", Match.Digit & "\d" )
{FullMatch:"34",StartMatch:2,SubMatches:Table()}

>> Match( "a34d", "\d" & Match.Digit )
{FullMatch:"34",StartMatch:2,SubMatches:Table()}

>> Match( "a34d", Concatenate( Match.Digit, "\d" ) )
{FullMatch:"34",StartMatch:2,SubMatches:Table()}

>> Match( "a34d", Concatenate( "\d", Match.Digit ) )
{FullMatch:"34",StartMatch:2,SubMatches:Table()}

>> Text(Match.Digit) & Text(SortOrder.Ascending)
"\dascending"

>> SortOrder.Ascending & Match.Digit
"ascending\d"

>> Text(SortOrder.Ascending) & Text(Match.Digit)
"ascending\d"

// Concatenate results in at least a text string for all situations, some will result in a strongly typed enum (see below)

>> Concatenate( Match.Digit, Match.Digit, JSONFormat.IndentFour )
"\d\d4"

>> Match.Digit & Match.Digit & JSONFormat.IndentFour
"\d\d4"

>> Concatenate( Match.Digit, Match.Digit, "this is ok" )
Match.CalculatedOptionSetValue

>> Text( Concatenate( Match.Digit, Match.Digit, "this is ok" ) )
"\d\dthis is ok"

>> Match.Digit & Match.Digit & "this is ok" 
Match.CalculatedOptionSetValue

>> Text( Match.Digit & Match.Digit & "this is ok" )
"\d\dthis is ok"

>> Match.Digit & "this is ok" & Match.Digit
Match.CalculatedOptionSetValue

>> Text( Match.Digit & "this is ok" & Match.Digit )
"\dthis is ok\d"

>> Match.Digit & SortOrder.Ascending
"\dascending"

//===========================================================================================================
//
// 15. Since there is no longer an Accepts relationship between enums and their backing kinds, more likely to get Void results
//

>> If(true, TimeUnit.Seconds, "A")
If(true, {test:1}, "Void value (result of the expression can't be used).")

>> If(true, TimeUnit.Minutes, TimeUnit.Seconds)
TimeUnit.Minutes

>> If(true, 1, StartOfWeek.Tuesday)
If(true, {test:1}, "Void value (result of the expression can't be used).")

>> If(true, StartOfWeek.Tuesday, 1)
If(true, {test:1}, "Void value (result of the expression can't be used).")

//===========================================================================================================
//
// 16. Everything coerces to string
//

>> Text( StartOfWeek.Sunday )
"Sunday"

>> "Label:" & StartOfWeek.Sunday
"Label:Sunday"

>> Mid( StartOfWeek.Sunday, 2 )
"unday"

>> Len( StartOfWeek.Sunday )
6

>> Text( Match.MultipleDigits )
"\d+"

>> "Label:" & Match.MultipleDigits
Match.CalculatedOptionSetValue

>> Text( "Label:" & Match.MultipleDigits )
"Label:\d+"

>> Mid( Match.MultipleDigits, 2 )
"d+"

>> Len( Match.MultipleDigits )
3

>> Text( MatchOptions.IgnoreCase )
"i"

>> "Label:" & MatchOptions.IgnoreCase
"Label:i"

>> Text( ErrorKind.FileNotFound )
"FileNotFound"

>> "Label:" & ErrorKind.FileNotFound
"Label:FileNotFound"

//===========================================================================================================
//
// 17. Examples - StartOfWeek - Standard number backed enum
//

// Standard usage

>> Weekday( Date(1980,1,1), StartOfWeek.Monday )
2

>> Weekday( Date(1980,1,1), StartOfWeek.Tuesday )
1

>> StartOfWeek.Monday = StartOfWeek.Tuesday
false

>> StartOfWeek.Monday <> StartOfWeek.Tuesday
true

>> StartOfWeek.Monday = StartOfWeek.Monday
true

>> Value( StartOfWeek.Monday )
2

>> Decimal( StartOfWeek.Monday )
2

>> Float( StartOfWeek.Monday )
2

// Coerces to string

>> Text( StartOfWeek.Monday )
"Monday"

>> "Severity: " & StartOfWeek.Monday
"Severity: Monday"

>> Len( StartOfWeek.Monday )
6

>> Left( StartOfWeek.Monday, 2 )
"Mo"

// Standard error cases for number backed enums

>> Boolean( StartOfWeek.Monday )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> TraceSeverity.Warning = StartOfWeek.Sunday
Errors: Error 22-23: Incompatible types for comparison. These types can't be compared: Enum (TraceSeverity), Enum (StartOfWeek).

>> TraceSeverity.Warning <> StartOfWeek.Sunday
Errors: Error 22-24: Incompatible types for comparison. These types can't be compared: Enum (TraceSeverity), Enum (StartOfWeek).

>> Weekday( Date(1980,1,1), TraceSeverity.Warning )
Errors: Error 38-46: Invalid argument type (Enum (TraceSeverity)). Expecting a Enum (StartOfWeek) value instead.

// Number can't be used in place (CanCoerceFromBackingKind = false)

>> Weekday( Date(1980,1,1), 1 )
Errors: Error 25-26: Invalid argument type (Decimal). Expecting a Enum (StartOfWeek) value instead.

>> StartOfWeek.Sunday = 3
Errors: Error 19-20: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Sunday > 0
Errors: Error 19-20: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> If( false, StartOfWeek.Monday, 3 )
If(true, {test:1}, "Void value (result of the expression can't be used).")

// Can't be used as a number (CanCoerceToBackingKind = false)

>> Sqrt( StartOfWeek.Sunday )
Errors: Error 0-4: The function 'Sqrt' has some invalid arguments.|Error 17-24: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

>> Mod( StartOfWeek.Sunday, 2 )
Errors: Error 0-3: The function 'Mod' has some invalid arguments.|Error 16-23: Invalid argument type (Enum (StartOfWeek)). Expecting a Decimal value instead.

>> StartOfWeek.Sunday + 3
Errors: Error 11-18: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> StartOfWeek.Sunday + StartOfWeek.Monday
Errors: Error 11-18: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.|Error 32-39: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> If( false, 3, StartOfWeek.Sunday )  // first type rule
If(true, {test:1}, "Void value (result of the expression can't be used).")

// Can't compare numerically (CanCompareNumeric = false)

>> StartOfWeek.Sunday < StartOfWeek.Monday
Errors: Error 19-20: Unable to compare values of type Enum (StartOfWeek).

>> StartOfWeek.Sunday >= StartOfWeek.Monday
Errors: Error 19-21: Unable to compare values of type Enum (StartOfWeek).

// Can't concatenate strongly typed (CanConcatenateStronglyTyped = false)

>> StartOfWeek.Monday & StartOfWeek.Tuesday
"MondayTuesday"

>> Weekday( Date(1980,1,1), StartOfWeek.Monday & StartOfWeek.Tuesday )
Errors: Error 44-45: Invalid argument type (Text). Expecting a Enum (StartOfWeek) value instead.

//===========================================================================================================
//
// 18. Examples - TimeUnit - Standard string backed enum
//

// Standard usage

>> DateAdd( Date(1980,1,1), 1, TimeUnit.Months )
Date(1980,2,1)

>> DateAdd( Date(1980,1,1), 1, TimeUnit.Years )
Date(1981,1,1)

>> TimeUnit.Months = TimeUnit.Years
false

>> TimeUnit.Months <> TimeUnit.Years
true

>> TimeUnit.Years = TimeUnit.Years
true

// Coerces to string

>> Text( TimeUnit.Years )
"years"

>> "Unit: " & TimeUnit.Years
"Unit: years"

>> Len( TimeUnit.Years )
5

>> Left( TimeUnit.Years, 3 )
"yea"

// Standard error cases for string backed enums

>> Value( TimeUnit.Years )
Errors: Error 0-5: The function 'Value' has some invalid arguments.|Error 15-21: Expected text or number. We expect text or a number at this point in the formula.

>> Decimal( TimeUnit.Years )
Errors: Error 0-7: The function 'Decimal' has some invalid arguments.|Error 17-23: Expected text or number. We expect text or a number at this point in the formula.

>> Float( TimeUnit.Years )
Errors: Error 0-5: The function 'Float' has some invalid arguments.|Error 15-21: Expected text or number. We expect text or a number at this point in the formula.

>> Boolean( TimeUnit.Years )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> SortOrder.Descending = TimeUnit.Years
Errors: Error 21-22: Incompatible types for comparison. These types can't be compared: Enum (SortOrder), Enum (TimeUnit).

>> SortOrder.Descending <> TimeUnit.Years
Errors: Error 21-23: Incompatible types for comparison. These types can't be compared: Enum (SortOrder), Enum (TimeUnit).

>> DateAdd( Date(1980,1,1), SortOrder.Descending )
Errors: Error 34-45: Invalid argument type (Enum (SortOrder)). Expecting a Number value instead.|Error 0-7: The function 'DateAdd' has some invalid arguments.

// Number can't be used in place (CanCoerceFromBackingKind = false)

>> DateAdd( Date(1980,1,1), 1, "months" )
Errors: Error 28-36: Invalid argument type (Text). Expecting a Enum (TimeUnit) value instead.|Error 0-7: The function 'DateAdd' has some invalid arguments.

>> TimeUnit.Years = "years"
Errors: Error 15-16: Incompatible types for comparison. These types can't be compared: Enum (TimeUnit), Text.

>> If( false, TimeUnit.Years, 3 )  // first type rule
If(true, {test:1}, "Void value (result of the expression can't be used).")

// Can't be used as a number (CanCoerceToBackingKind = false)

>> Sqrt( TimeUnit.Years )
Errors: Error 0-4: The function 'Sqrt' has some invalid arguments.|Error 14-20: Invalid argument type (Enum (TimeUnit)). Expecting a Number value instead.

>> Mod( TimeUnit.Years, 2 )
Errors: Error 0-3: The function 'Mod' has some invalid arguments.|Error 13-19: Invalid argument type (Enum (TimeUnit)). Expecting a Decimal value instead.

>> TimeUnit.Years + 3
Errors: Error 8-14: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TimeUnit.Years + TimeUnit.Months
Errors: Error 8-14: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.|Error 25-32: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> If( false, 3, TimeUnit.Years )  // first type rule
If(true, {test:1}, "Void value (result of the expression can't be used).")

// Can't compare numerically (CanCompareNumeric = false)

>> TimeUnit.Years < TimeUnit.Months
Errors: Error 15-16: Unable to compare values of type Enum (TimeUnit).

>> TimeUnit.Years >= TimeUnit.Months
Errors: Error 15-17: Unable to compare values of type Enum (TimeUnit).

// Can't concatenate strongly typed (CanConcatenateStronglyTyped = false)

>> TimeUnit.Years & TimeUnit.Months
"yearsmonths"

>> DateAdd( Date(1980,1,1), 1, TimeUnit.Years & TimeUnit.Months )
Errors: Error 43-44: Invalid argument type (Text). Expecting a Enum (TimeUnit) value instead.|Error 0-7: The function 'DateAdd' has some invalid arguments.

//===========================================================================================================
//
// 20. Examples - Color - Color backed enum with CoerceToBackingKind
//

// Standard usage

>> ColorFade( Color.Red, 11% )
RGBA(255,28,28,1)

>> ColorFade( Color.Purple, 20% )
RGBA(153,51,153,1)

>> Color.Red = Color.Purple
false

>> Color.Red <> Color.Purple
true

>> Color.Yellow = Color.Yellow
true

// Coerces to string

>> Text( Color.Red )
"Red"

>> "Option: " & Color.Yellow
"Option: Yellow"

>> Len( Color.Yellow )
6

>> Left( Color.Yellow, 4 )
"Yell"

// Standard error cases for color backed enums

>> Value( Color.Green )
Errors: Error 0-5: The function 'Value' has some invalid arguments.|Error 12-18: Expected text or number. We expect text or a number at this point in the formula.

>> Decimal( Color.Green )
Errors: Error 0-7: The function 'Decimal' has some invalid arguments.|Error 14-20: Expected text or number. We expect text or a number at this point in the formula.

>> Float( Color.Green )
Errors: Error 0-5: The function 'Float' has some invalid arguments.|Error 12-18: Expected text or number. We expect text or a number at this point in the formula.

>> Boolean( Color.Green )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> SortOrder.Descending = Color.Green
Errors: Error 21-22: Incompatible types for comparison. These types can't be compared: Enum (SortOrder), Enum (Color).

>> SortOrder.Descending <> Color.Green
Errors: Error 21-23: Incompatible types for comparison. These types can't be compared: Enum (SortOrder), Enum (Color).

>> ColorFade( SortOrder.Descending, 20% )
Errors: Error 0-9: The function 'ColorFade' has some invalid arguments.|Error 20-31: Invalid argument type (Enum (SortOrder)). Expecting a Color value instead.

// Colors can't be used in place (CanCoerceFromBackingKind = false)

>> ColorFade( RGBA( 120, 120, 60, 1 ), 15% )
RGBA(140,140,89,1)

>> If( false, Color.Red, RGBA(120,120,12,1) )  // first type rule
If(true, {test:1}, "Void value (result of the expression can't be used).")

// Can be used as a color (CanCoerceToBackingKind = true)

>> RGBA( 255, 0, 0, 1 ) = Color.Red
true

>> Sqrt( Color.Red )
Errors: Error 0-4: The function 'Sqrt' has some invalid arguments.|Error 11-15: Invalid argument type (Enum (Color)). Expecting a Number value instead.

>> Mod( Color.Red, 2 )
Errors: Error 0-3: The function 'Mod' has some invalid arguments.|Error 10-14: Invalid argument type (Enum (Color)). Expecting a Decimal value instead.

>> Color.Red + 3
Errors: Error 5-9: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> Color.Red + Color.Red
Errors: Error 5-9: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.|Error 17-21: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> If( false, RGBA(120,120,12,1), Color.Red )  // first type rule
RGBA(255,0,0,1)

// Can't compare numerically (CanCompareNumeric = false)

>> Color.Red < Color.Yellow
Errors: Error 10-11: Unable to compare values of type Enum (Color).

>> Color.Red >= Color.Yellow
Errors: Error 10-12: Unable to compare values of type Enum (Color).

>> Color.Red >= SortOrder.Descending
Errors: Error 10-12: Incompatible types for comparison. These types can't be compared: Enum (Color), Enum (SortOrder).

// Can't concatenate strongly typed (CanConcatenateStronglyTyped = false)

>> Color.Red & Color.Yellow
"RedYellow"

//===========================================================================================================
//
// 21. Examples - ErrorKind - Number backed enum with CoerceToBackingKind and CanCompareNumeric
//

// Standard usage

>> IfError( 1/0, If( FirstError.Kind = ErrorKind.Div0, -1, Error( FirstError) ) )
-1

>> ErrorKind.Div0 = ErrorKind.Network
false

>> ErrorKind.Div0 <> ErrorKind.Network
true

>> ErrorKind.Network = ErrorKind.Network
true

// Coerces to string

>> Text( ErrorKind.Network )
"Network"

>> "Option: " & ErrorKind.Network
"Option: Network"

>> Len( ErrorKind.Network )
7

>> Left( ErrorKind.Network, 3 )
"Net"

>> Value( ErrorKind.Network )
23

>> Decimal( ErrorKind.Network )
23

>> Float( ErrorKind.Network )
23

// Standard error cases for number backed enums

>> Boolean( ErrorKind.Network )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> ErrorKind.Network = StartOfWeek.Wednesday
Errors: Error 18-19: Incompatible types for comparison. These types can't be compared: Enum (ErrorKind), Enum (StartOfWeek).

>> ErrorKind.Network <> StartOfWeek.Wednesday
Errors: Error 18-20: Incompatible types for comparison. These types can't be compared: Enum (ErrorKind), Enum (StartOfWeek).

// Number can't be used in place (CanCoerceFromBackingKind = false)

// No ErrorKind functions are strongly typed at this time

>> If( false, ErrorKind.Div0, 3 )  // first type rule
If(true, {test:1}, "Void value (result of the expression can't be used).")

// Can be used as a number (CanCoerceToBackingKind = true)

>> Sqrt( ErrorKind.GeneratedValue )
3

>> Mod( ErrorKind.Network, 2 )
1

>> ErrorKind.Network + 3
26

>> ErrorKind.Network + ErrorKind.Div0
36

>> ErrorKind.Network = 12
false

>> ErrorKind.Network <> 12
true

>> ErrorKind.GeneratedValue = 9
true

>> If( false, 3, ErrorKind.Div0 )  // first type rule
13

// Can compare numerically (CanCompareNumeric = true)

>> ErrorKind.Network < ErrorKind.Custom
true

>> ErrorKind.Network >= ErrorKind.Custom
false

>> ErrorKind.Network > ErrorKind.Unknown
true

>> ErrorKind.Network >= StartOfWeek.Wednesday
Errors: Error 18-20: Incompatible types for comparison. These types can't be compared: Enum (ErrorKind), Enum (StartOfWeek).

// Cann't concatenate strongly typed (CanConcatenateStronglyTyped = false)

>> ErrorKind.Network & ErrorKind.Unknown
"NetworkUnknown"

>> Text( ErrorKind.Network & ErrorKind.Unknown )
"NetworkUnknown"

>> "Errors: " & ErrorKind.Network & ErrorKind.Unknown
"Errors: NetworkUnknown"

>> Len( ErrorKind.Network & ErrorKind.Unknown )
14

>> Left( ErrorKind.Network & ErrorKind.Unknown, 1 )
"N"

>> ErrorKind.Network & ErrorKind.Unknown = ErrorKind.Network & ErrorKind.Unknown
true

>> ErrorKind.Network & ErrorKind.Div0 = ErrorKind.Network & ErrorKind.Unknown
false

//===========================================================================================================
//
// 22. Examples - DateTimeFormat - String backed enum with CoerceFromBackingKind
//

// Standard usage

>> Text( Date(1980,1,1), DateTimeFormat.LongDate, "en-us" )
"Tuesday, January 1, 1980"

>> Text( Date(1980,1,1), "yyyy-mm-dd", "en-us")
"1980-01-01"

>> DateTimeFormat.LongDate = DateTimeFormat.ShortDate
false

>> DateTimeFormat.LongDate <> DateTimeFormat.ShortDate
true

>> DateTimeFormat.LongDate = DateTimeFormat.LongDate
true

// Coerces to string

>> Text( DateTimeFormat.LongDate )
"'longdate'"

>> "Unit: " & DateTimeFormat.LongDate
"Unit: 'longdate'"

>> Len( DateTimeFormat.LongDate )
10

>> Left( DateTimeFormat.LongDate, 5 )
"'long"

// Standard error cases for string backed enums

>> Text( Date(1980,1,1), SortOrder.Descending )
Errors: Error 0-4: The function 'Text' has some invalid arguments.|Error 31-42: Expected text. We expect text at this point in the formula.

>> Value( DateTimeFormat.LongDate )
Errors: Error 0-5: The function 'Value' has some invalid arguments.|Error 21-30: Expected text or number. We expect text or a number at this point in the formula.

>> Decimal( DateTimeFormat.LongDate )
Errors: Error 0-7: The function 'Decimal' has some invalid arguments.|Error 23-32: Expected text or number. We expect text or a number at this point in the formula.

>> Float( DateTimeFormat.LongDate )
Errors: Error 0-5: The function 'Float' has some invalid arguments.|Error 21-30: Expected text or number. We expect text or a number at this point in the formula.

>> Boolean( DateTimeFormat.LongDate )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> SortOrder.Descending = DateTimeFormat.LongDate
Errors: Error 21-22: Incompatible types for comparison. These types can't be compared: Enum (SortOrder), Enum (DateTimeFormat).

>> SortOrder.Descending <> DateTimeFormat.LongDate
Errors: Error 21-23: Incompatible types for comparison. These types can't be compared: Enum (SortOrder), Enum (DateTimeFormat).

// String can be used in place (CanCoerceFromBackingKind = true)

>> Text( Date(1980,1,2), "yyyy-mm-dd", "en-us")
"1980-01-02"

>> DateTimeFormat.LongDate = "LongDate"
false

>> DateTimeFormat.LongDate = "'longdate'"
true

>> If( false, DateTimeFormat.LongDate, "help" )  // first type rule
DateTimeFormat.CalculatedOptionSetValue

// But a string is not interpreted as the enum value by Text

>> Text( Date(1980,1,2), "'longdate'", "en-us" )
"'long2ate'"

>> Text( Date(1980,1,2), "utc", "en-us" )
"utc"

// Can't be used as a string (CanCoerceToBackingKind = false)

>> Sqrt( DateTimeFormat.LongDate )
Errors: Error 0-4: The function 'Sqrt' has some invalid arguments.|Error 20-29: Invalid argument type (Enum (DateTimeFormat)). Expecting a Number value instead.

>> Mod( DateTimeFormat.LongDate, 2 )
Errors: Error 0-3: The function 'Mod' has some invalid arguments.|Error 19-28: Invalid argument type (Enum (DateTimeFormat)). Expecting a Decimal value instead.

>> DateTimeFormat.LongDate + 3
Errors: Error 14-23: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> DateTimeFormat.LongDate & "hi"
"'longdate'hi"

>> If( false, "help", DateTimeFormat.LongDate )  // first type rule
"'longdate'"

// Can't compare numerically (CanCompareNumeric = false)

>> DateTimeFormat.LongDate < DateTimeFormat.ShortDate
Errors: Error 24-25: Unable to compare values of type Enum (DateTimeFormat).

>> DateTimeFormat.LongDate >= DateTimeFormat.ShortDate
Errors: Error 24-26: Unable to compare values of type Enum (DateTimeFormat).

// Can't concatenate strongly typed (CanConcatenateStronglyTyped = false)

>> DateTimeFormat.LongDate & DateTimeFormat.ShortDate
"'longdate''shortdate'"

>> Text( Date(1980,1,1), DateTimeFormat.LongDate & DateTimeFormat.ShortDate, "en-us" )
"'long1ate''00ort1ate'"

//===========================================================================================================
//
// 23. Examples - Match - String backed enum with CoerceFromBackingKind and CanConcatenateStronglyTyped
//

// Standard usage

>> IsMatch( "(123)456-4893", Match.Digit, MatchOptions.Contains )
true

>> IsMatch( "(123)456-4893", Match.LeftParen & Match.MultipleDigits & Match.RightParen, MatchOptions.Contains )
true

>> Match.Letter = Match.MultipleDigits
false

>> Match.Letter <> Match.MultipleDigits
true

>> Match.Letter = Match.Letter
true

// Coerces to string

>> Text( Match.MultipleSpaces )
"\s+"

>> "Unit: " & Match.MultipleSpaces
Match.CalculatedOptionSetValue

>> Len( Match.MultipleSpaces )
3

>> Left( Match.MultipleSpaces, 2 )
"\s"

// Standard error cases for string backed enums

>> IsMatch( "(123)456-4893", SortOrder.Descending, MatchOptions.Contains )
Errors: Error 35-46: Invalid argument type (Enum (SortOrder)). Expecting a Enum (Match) value instead.

>> Value( Match.MultipleDigits )
Errors: Error 0-5: The function 'Value' has some invalid arguments.|Error 12-27: Expected text or number. We expect text or a number at this point in the formula.

>> Decimal( Match.MultipleDigits )
Errors: Error 0-7: The function 'Decimal' has some invalid arguments.|Error 14-29: Expected text or number. We expect text or a number at this point in the formula.

>> Float( Match.MultipleDigits )
Errors: Error 0-5: The function 'Float' has some invalid arguments.|Error 12-27: Expected text or number. We expect text or a number at this point in the formula.

>> Boolean( Match.MultipleDigits )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> SortOrder.Descending = Match.MultipleDigits
Errors: Error 21-22: Incompatible types for comparison. These types can't be compared: Enum (SortOrder), Enum (Match).

>> SortOrder.Descending <> Match.MultipleDigits
Errors: Error 21-23: Incompatible types for comparison. These types can't be compared: Enum (SortOrder), Enum (Match).

// String can be used in place (CanCoerceFromBackingKind = true)

>> IsMatch( "(123)456-4893", "\d\d\d\d", MatchOptions.Contains )
true

>> IsMatch( "(123)456-4893", "\d\d\d\d\d", MatchOptions.Contains )
false

>> Match.MultipleDigits = "MultipleDigits"
false

>> Match.MultipleDigits = "\d+"
true

>> If( false, Match.Digit, "help" )  // first type rule
Match.CalculatedOptionSetValue

// Can't be used as a string (CanCoerceToBackingKind = false)

>> Sqrt( Match.MultipleDigits )
Errors: Error 0-4: The function 'Sqrt' has some invalid arguments.|Error 11-26: Invalid argument type (Enum (Match)). Expecting a Number value instead.

>> Mod( Match.MultipleDigits, 2 )
Errors: Error 0-3: The function 'Mod' has some invalid arguments.|Error 10-25: Invalid argument type (Enum (Match)). Expecting a Decimal value instead.

>> Match.MultipleDigits + 3
Errors: Error 5-20: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> If( false, "help", Match.MultipleDigits )  // first type rule
"\d+"

// Can't compare numerically (CanCompareNumeric = false)

>> Match.MultipleDigits < Match.Digits
Errors: Error 28-35: Name isn't valid. 'Digits' isn't recognized.|Error 21-22: Incompatible types for comparison. These types can't be compared: Enum (Match), Error.

>> Match.MultipleDigits >= Match.Digits
Errors: Error 29-36: Name isn't valid. 'Digits' isn't recognized.|Error 21-23: Incompatible types for comparison. These types can't be compared: Enum (Match), Error.

// Can concatenate strongly typed (CanConcatenateStronglyTyped = true)

>> Match.MultipleDigits & Match.Hyphen
Match.CalculatedOptionSetValue

>> Match.MultipleDigits & "hi"
Match.CalculatedOptionSetValue

>> IsMatch( "(123)456-4893", Match.Digit & Match.Digit & Match.Digit & Match.Digit, MatchOptions.Contains )
true

>> IsMatch( "(123)456-4893", Match.Digit & Match.Digit & Match.Digit & Match.Digit & Match.Digit, MatchOptions.Contains )
false

>> IsMatch( "28", 28 )
Errors: Error 15-17: Invalid argument type (Decimal). Expecting a Enum (Match) value instead.

