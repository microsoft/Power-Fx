#SETUP: StronglyTypedBuiltinEnums,PowerFxV1CompatibilityRules,AllEnumsPlusTestEnumsSetup,RegEx,EnableJsonFunctions

// Strongly typed enums were strengthened to:
//    0. Strongly typed enum usage is the most common scenario and what Intellisense will suggest.
//    1. Avoid passing the wrong kind of enum to a function. For example JSON( [1,2,3], Match.IgnoreCase )
//    2. Avoid passing an enum where a scalar was expected, except for text backed enums. For example Mid( "foo", StartOfWeek.Tuesday )
//    3. Avoid passing a scalar where an enum was expected, excepf for text backed enums. For example Weekday( Now(), 12 )
//
// Default operations with backing type
//    4. Equals/not equals between enum values is always supported.  For example, StartOfWeek.Tuesday = StartOfWeek.Monday
//    5. Order comparisons between number based enums are not supported, by default. For example StartOfWeek.Tuesday < StartOfWeek.Monday
//    6. By default, math operations between number based enums are never supported. For example, StartOfWeek.Tuesday + StartOfWeek.Monday 
//    7. By default, Boolean operations between Boolean based enums is not supported, but can be overriden with CanCoerceToBackingKind
//    8. Equals/not equals between Boolean backed enum values and Booleans is supported.  For example, TestYesNo.Yes = false
//    9. If the underlying value is desired, the Text, Value, Decimal, Float, and Boolean functions can be called to get the backing value.
//
// In addition, there are flags for each option set that govern how it can be used.  Default is no flags, used by Dataverse option sets.
//   10. CanCoerceFromBackingKind - For example, Match which allows a string in place of the enum
//   11. CanCoerceToBackingKind - For example, ErrorKind that can be used as a number
//   12. CanConcatenateStronglyTyped (text only) - For example, JSONFormat which can concatenate different members together to create a new member
//   13. CanCompareNumeric (numbers only) - For example, ErrorKind can compare values
//   14. CanConcatenateStronglyTyped & CanCoerceFromBackingKind - An important combination, used by Match, allows strings and enums to be mixed
//
// Misc
//   15. Since there is no longer an Accepts relationship between enums and their backing kinds, more likely to get Void results
//   16. Everything coerces to string

//============================================================================================================
//
// 0. Strongly typed enum usage is the most common scenario and what Intellisense will suggest.
//

>> Sort( [1,2,3], SortOrder.Descending )
Table({Value:1},{Value:2},{Value:3})

>> Match( "info@contoso.com", Match.Email )
{FullMatch:"info@contoso.com",StartMatch:1,SubMatches:Table()}

>> JSON( [1,2,3], JSONFormat.FlattenValueTables )
"[1,2,3]"

>> Weekday( Date(1990,1,1), StartOfWeek.Tuesday )
7

>> TestXORYesNo( TestYesNo.Yes, TestYesNo.No )
true

>> ColorFade( Color.Red, 10% )
RGBA(255,25,25,1)

>> TestColorInvert( Color.Blue )
RGBA(255,255,0,1)

>> TestColorBlueRampInvert( TestBlueRamp.Blue25 )
RGBA(64,64,0,1)

//============================================================================================================
//
// 1. Avoid passing the wrong kind of enum to a function. For example JSON( [1,2,3], Match.IgnoreCase )
//

>> Sort( [1,2,3], Value, JSONFormat.IndentFour )
Errors: Error 32-43: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (SortOrder) value instead.|Error 0-4: The function 'Sort' has some invalid arguments.

>> Match( "info@contoso.com", JSONFormat.IndentFour )
Errors: Error 37-48: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (Match) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> Match( "asdf", SortOrder.Ascending )
Errors: Error 24-34: Invalid argument type (Enum (SortOrder)). Expecting a Enum (Match) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> JSON( [1,2,3], MatchOptions.IgnoreCase )
Errors: Error 27-38: Invalid argument type (Enum (MatchOptions)). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> JSON( [1,2,3], Match.Email )
Errors: Error 20-26: Invalid argument type (Enum (Match)). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> JSON( [1,2,3], StartOfWeek.Tuesday )
Errors: Error 26-34: Invalid argument type (Enum (StartOfWeek)). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> Match( "hi", JSONFormat.IndentFour )
Errors: Error 23-34: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (Match) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> Match( "hi", "h.*", JSONFormat.IndentFour )
Errors: Error 30-41: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> Match( "hi", Match.Email, JSONFormat.IndentFour )
Errors: Error 36-47: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> IsMatch( "hi", JSONFormat.IndentFour )
Errors: Error 25-36: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (Match) value instead.

>> IsMatch( "hi", "h.*", JSONFormat.IndentFour )
Errors: Error 32-43: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.

>> IsMatch( "hi", Match.Email, JSONFormat.IndentFour )
Errors: Errors: Error 38-49: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.

>> MatchAll( "hi", JSONFormat.IndentFour )
Errors: Error 26-37: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (Match) value instead.|Error 0-8: The function 'MatchAll' has some invalid arguments.

>> MatchAll( "hi", "h.*", JSONFormat.IndentFour )
Errors: Error 33-44: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.|Error 0-8: The function 'MatchAll' has some invalid arguments.

>> MatchAll( "hi", Match.Email, JSONFormat.IndentFour )
Errors: Error 39-50: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (MatchOptions) value instead.|Error 0-8: The function 'MatchAll' has some invalid arguments.

>> Text( 12, JSONFormat.IndentFour )
Errors: Error 0-4: The function 'Text' has some invalid arguments.|Error 20-31: Expected text. We expect text at this point in the formula.

>> Text( 12, MatchOptions.IgnoreCase )
Errors: Error 0-4: The function 'Text' has some invalid arguments.|Error 22-33: Expected text. We expect text at this point in the formula.

>> Weekday( Date(1980,1,1), ErrorKind.Div0 )
Errors: Error 34-39: Invalid argument type (Enum (ErrorKind)). Expecting a Enum (StartOfWeek) value instead.

>> Weekday( Date(1980,1,1), JSONFormat.IndentFour )
Errors: Error 35-46: Invalid argument type (Enum (JSONFormat)). Expecting a Enum (StartOfWeek) value instead.

>> TestXORYesNo( TestYeaNay.Yea, TestYeaNay.Nay )
Errors: Error 24-28: Invalid argument type (Enum (TestYeaNay)). Expecting a Enum (TestYesNo) value instead.|Error 40-44: Invalid argument type (Enum (TestYeaNay)). Expecting a Enum (TestYesNo) value instead.|Error 0-12: The function 'TestXORYesNo' has some invalid arguments.

>> TestColorBlueRampInvert( TestRedRamp.Red25 )
Errors: Error 36-42: Invalid argument type (Enum (TestRedRamp)). Expecting a Enum (TestBlueRamp) value instead.|Error 0-23: The function 'TestColorBlueRampInvert' has some invalid arguments.

>> TestColorBlueRampInvert( Color.Purple )
Errors: Error 30-37: Invalid argument type (Enum (Color)). Expecting a Enum (TestBlueRamp) value instead.|Error 0-23: The function 'TestColorBlueRampInvert' has some invalid arguments.

>> TestColorBlueRampInvert( ColorFade( Color.Yellow, 25% ) )
Errors: Error 25-55: Invalid argument type (Color). Expecting a Enum (TestBlueRamp) value instead.|Error 0-23: The function 'TestColorBlueRampInvert' has some invalid arguments.

>> ColorFade( TestRedRamp.Red25, 10% )
Errors: Error 0-9: The function 'ColorFade' has some invalid arguments.|Error 22-28: Invalid argument type (Enum (TestRedRamp)). Expecting a Color value instead.

>> TestColorInvert( TestRedRamp.Red50 )
Errors: Error 28-34: Invalid argument type (Enum (TestRedRamp)). Expecting a Color value instead.|Error 0-15: The function 'TestColorInvert' has some invalid arguments.

//===========================================================================================================
//
// 2. Avoid passing an enum where a scalar was expected, except for text.  For example Mid( "foo", StartOfWeek.Tuesday ). 
//

>> Mid( "foo", StartOfWeek.Tuesday )
Errors: Error 0-3: The function 'Mid' has some invalid arguments.|Error 23-31: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

>> Mid( "foo", 1, StartOfWeek.Monday )
Errors: Error 0-3: The function 'Mid' has some invalid arguments.|Error 26-33: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

>> Left( "foo", StartOfWeek.Sunday )
Errors: Error 0-4: The function 'Left' has some invalid arguments.|Error 24-31: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

>> Int( StartOfWeek.Tuesday )
Errors: Error 0-3: The function 'Int' has some invalid arguments.|Error 16-24: Invalid argument type (Enum (StartOfWeek)). Expecting a Decimal value instead.

>> Power( StartOfWeek.Saturday, StartOfWeek.MondayZero )
Errors: Error 0-5: The function 'Power' has some invalid arguments.|Error 18-27: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.|Error 40-51: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

>> Mod( StartOfWeek.Tuesday, StartOfWeek.Tuesday )
Errors: Error 0-3: The function 'Mod' has some invalid arguments.|Error 16-24: Invalid argument type (Enum (StartOfWeek)). Expecting a Decimal value instead.|Error 37-45: Invalid argument type (Enum (StartOfWeek)). Expecting a Decimal value instead.

>> Left( "hi", StartOfWeek.Sunday )
Errors: Error 0-4: The function 'Left' has some invalid arguments.|Error 23-30: Invalid argument type (Enum (StartOfWeek)). Expecting a Number value instead.

// Text backed enums can always we passed as text, as all enums coerce to text

>> Mid( Match.Letter, 1, 1 )
"\"

//===========================================================================================================
//
// 3. Avoid passing a scalar where an enum was expected, excepf for text backed enums. For example Weekday( Now(), 12 )
//

>> Weekday( Date(1990,1,1), 12 )
Errors: Error 25-27: Invalid argument type (Decimal). Expecting a Enum (StartOfWeek) value instead.

>> Sort( [1,2,3], Value, "descending" )
Errors: Error 22-34: Invalid argument type (Text). Expecting a Enum (SortOrder) value instead.|Error 0-4: The function 'Sort' has some invalid arguments.

>> JSON( [1,2,3], "_" )
Errors: Error 15-18: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> Match( "howdy", "h", "c" )
Errors: Error 21-24: Invalid argument type (Text). Expecting a Enum (MatchOptions) value instead.|Error 0-5: The function 'Match' has some invalid arguments.

>> TestColorBlueRampInvert( RGBA( 128, 128, 128, 100% ) )
Errors: Error 25-52: Invalid argument type (Color). Expecting a Enum (TestBlueRamp) value instead.|Error 0-23: The function 'TestColorBlueRampInvert' has some invalid arguments.

>> IsMatch("Foo", 17)
Errors: Error 15-17: Invalid argument type (Decimal). Expecting a Enum (Match) value instead.

>> IsMatch("Foo", 1/0)
Errors: Error 16-17: Invalid argument type (Decimal). Expecting a Enum (Match) value instead.

//===========================================================================================================
//
// 4. Equals/not equals between enum values is always supported.  For example, StartOfWeek.Tuesday = StartOfWeek.Monday
//

>> StartOfWeek.Tuesday = StartOfWeek.Wednesday
false

>> StartOfWeek.Tuesday <> StartOfWeek.Wednesday
true

>> JSONFormat.IndentFour = JSONFormat.Compact
false

>> JSONFormat.IndentFour <> JSONFormat.Compact
true

>> SortOrder.Ascending = SortOrder.Descending
false

>> SortOrder.Ascending <> SortOrder.Descending
true

>> ErrorKind.Div0 = ErrorKind.Custom
false

>> ErrorKind.Div0 <> ErrorKind.Unknown
true

>> TestYesNo.Yes = TestYesNo.No
false

>> TestYesNo.Yes = TestYesNo.Yes
true

>> TestYesNo.Yes <> TestYesNo.No
true

// Equals/not equals between two different enum values is not supported, even if same backing type

>> StartOfWeek.Tuesday = ErrorKind.Div0
Errors: Error 20-21: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Enum (ErrorKind).

>> StartOfWeek.Tuesday <> ErrorKind.Unknown
Errors: Error 20-22: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Enum (ErrorKind).

>> JSONFormat.IndentFour = SortOrder.Descending
Errors: Error 22-23: Incompatible types for comparison. These types can't be compared: Enum (JSONFormat), Enum (SortOrder).

>> JSONFormat.IndentFour <> Match.Email
Errors: Error 22-24: Incompatible types for comparison. These types can't be compared: Enum (JSONFormat), Enum (Match).

>> TestYesNo.Yes = TestYeaNay.Nay
Errors: Error 14-15: Incompatible types for comparison. These types can't be compared: Enum (TestYesNo), Enum (TestYeaNay).

>> TestYesNo.Yes <> TestYeaNay.Nay
Errors: Error 14-16: Incompatible types for comparison. These types can't be compared: Enum (TestYesNo), Enum (TestYeaNay).

// Equals/not equals between enum values and backing type is not supported

>> StartOfWeek.Tuesday = 12
Errors: Error 20-21: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Tuesday <> 14
Errors: Error 20-22: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> JSONFormat.IndentFour = "4"
Errors: Error 22-23: Incompatible types for comparison. These types can't be compared: Enum (JSONFormat), Text.

>> JSONFormat.IndentFour <> "_"
Errors: Error 22-24: Incompatible types for comparison. These types can't be compared: Enum (JSONFormat), Text.

//===========================================================================================================
//
// 5. Order comparisons between number based enums are not supported by default, for example StartOfWeek.Tuesday < StartOfWeek.Monday
//

>> StartOfWeek.Tuesday > 3
Errors: Error 20-21: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Tuesday > StartOfWeek.Wednesday
Errors: Error 20-21: Unable to compare values of type Enum (StartOfWeek).

>> StartOfWeek.Friday < 5
Errors: Error 19-20: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Friday < StartOfWeek.Sunday
Errors: Error 19-20: Unable to compare values of type Enum (StartOfWeek).

>> StartOfWeek.Friday <= 5
Errors: Error 19-21: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Friday <= StartOfWeek.Sunday
Errors: Error 19-21: Unable to compare values of type Enum (StartOfWeek).

>> StartOfWeek.Friday >= 5
Errors: Error 19-21: Incompatible types for comparison. These types can't be compared: Enum (StartOfWeek), Decimal.

>> StartOfWeek.Friday >= StartOfWeek.Sunday
Errors: Error 19-21: Unable to compare values of type Enum (StartOfWeek).

//===========================================================================================================
//
// 6. By default, math operations between number based enums are never supported. For example, StartOfWeek.Tuesday + StartOfWeek.Monday 
//

>> StartOfWeek.Tuesday + 3
Errors: Error 11-19: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> StartOfWeek.Tuesday + StartOfWeek.Thursday
Errors: Error 11-19: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.|Error 33-42: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> StartOfWeek.Tuesday * 2
Errors: Error 11-19: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

//===========================================================================================================
//
// 7. By default, Boolean operations between Boolean based enums is not supported, but can be overriden with CanCoerceToBackingKind
//

>> TestYesNo.Yes && TestBooleanNoCoerceTo.SuperTrue
Errors: Error 38-48: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> TestBooleanNoCoerceTo.SuperTrue && TestBooleanNoCoerceTo.SuperFalse
Errors: Error 21-31: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.|Error 56-67: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> TestBooleanNoCoerceTo.SuperTrue && false
Errors: Error 21-31: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> !TestBooleanNoCoerceTo.SuperTrue
Errors: Error 22-32: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> TestYesNo.Yes Or TestBooleanNoCoerceTo.SuperTrue
Errors: Error 38-48: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> Not TestBooleanNoCoerceTo.SuperTrue And Not TestBooleanNoCoerceTo.SuperFalse
Errors: Error 25-35: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.|Error 65-76: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> TestBooleanNoCoerceTo.SuperTrue
TestBooleanNoCoerceTo.SuperTrue

>> And( TestBooleanNoCoerceTo.SuperTrue, TestBooleanNoCoerceTo.SuperTrue )
Errors: Error 26-36: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 59-69: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 0-3: The function 'And' has some invalid arguments.

>> Not( TestBooleanNoCoerceTo.SuperTrue )
Errors: Error 26-36: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 0-3: The function 'Not' has some invalid arguments.

>> Or( TestBooleanNoCoerceTo.SuperTrue, TestBooleanNoCoerceTo.SuperFalse )
Errors: Error 25-35: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 58-69: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 0-2: The function 'Or' has some invalid arguments.

>> Or(Not(TestBooleanNoCoerceTo.SuperFalse),  Not(TestBooleanNoCoerceTo.SuperTrue))
Errors: Error 28-39: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 3-6: The function 'Not' has some invalid arguments.|Error 68-78: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 43-46: The function 'Not' has some invalid arguments.

// Booleans cannot be used in math expressions

>> TestBooleanNoCoerceTo.SuperFalse + 2
Errors: Error 21-32: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestBooleanNoCoerceTo.SuperFalse * 2
Errors: Error 21-32: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestBooleanNoCoerceTo.SuperFalse / 2
Errors: Error 21-32: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestBooleanNoCoerceTo.SuperFalse ^ 2
Errors: Error 21-32: Invalid argument type. Expecting one of the following: Number, Decimal, Text, Boolean, UntypedObject.

>> TestYesNo.Yes + 2
Errors: Error 9-13: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestYesNo.No * 2
Errors: Error 9-12: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestYesNo.Yes / 2
Errors: Error 9-13: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestYesNo.Yes ^ 2
Errors: Error 9-13: Invalid argument type. Expecting one of the following: Number, Decimal, Text, Boolean, UntypedObject.

//===========================================================================================================
//
// 8. Equals/not equals between Boolean backed enum values and Booleans is supported.  For example, TestYesNo.Yes = false
//

>> TestYesNo.Yes = false
false

>> TestYesNo.Yes <> true
false

>> TestYesNo.Yes = true
true

>> TestYesNo.Yes <> false
true

//===========================================================================================================
//
// 9. If the underlying value is desired, the Text, Value, Decimal, Float, and Boolean functions can be called to get the backing value.
//

// Text can be called on all option set values

>> Text( Match.Digit )
"\d"

>> Text( StartOfWeek.Tuesday )
"Tuesday"

>> Text( ErrorKind.Div0 )
"Div0"

>> Text( JSONFormat.IndentFour )
"4"

>> Text( TestYesNo.Yes )
"Yes"

>> Value( StartOfWeek.Friday )
15

>> Value( ErrorKind.Unknown )
12

>> Value( Match.Digit )
Errors: Error 0-5: The function 'Value' has some invalid arguments.|Error 12-18: Expected text or number. We expect text or a number at this point in the formula.

>> Value( JSONFormat.IndentFour )
Errors: Error 0-5: The function 'Value' has some invalid arguments.|Error 17-28: Expected text or number. We expect text or a number at this point in the formula.

>> Value( TestYesNo.Yes )
Errors: Error 0-5: The function 'Value' has some invalid arguments.|Error 16-20: Expected text or number. We expect text or a number at this point in the formula.

>> Float( StartOfWeek.Friday )
15

>> Float( ErrorKind.Unknown )
12

>> Float( Match.Digit )
Errors: Error 0-5: The function 'Float' has some invalid arguments.|Error 12-18: Expected text or number. We expect text or a number at this point in the formula.

>> Float( JSONFormat.IndentFour )
Errors: Error 0-5: The function 'Float' has some invalid arguments.|Error 17-28: Expected text or number. We expect text or a number at this point in the formula.

>> Float( TestYesNo.Yes )
Errors: Error 0-5: The function 'Float' has some invalid arguments.|Error 16-20: Expected text or number. We expect text or a number at this point in the formula.

>> Decimal( StartOfWeek.Friday )
15

>> Decimal( ErrorKind.Unknown )
12

>> Decimal( Match.Digit )
Errors: Error 0-7: The function 'Decimal' has some invalid arguments.|Error 14-20: Expected text or number. We expect text or a number at this point in the formula.

>> Decimal( JSONFormat.IndentFour )
Errors: Error 0-7: The function 'Decimal' has some invalid arguments.|Error 19-30: Expected text or number. We expect text or a number at this point in the formula.

>> Decimal( TestYesNo.Yes )
Errors: Error 0-7: The function 'Decimal' has some invalid arguments.|Error 18-22: Expected text or number. We expect text or a number at this point in the formula.

>> Boolean( StartOfWeek.Friday )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> Boolean( ErrorKind.Unknown )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> Boolean( Match.Digit )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> Boolean( JSONFormat.IndentFour )
Errors: Error 0-7: The function 'Boolean' has some invalid arguments.

>> Boolean( TestYesNo.No )
false

>> Boolean( TestYesNo.Yes )
true

>> Boolean( TestYeaNay.Nay )
false

>> Boolean( TestYeaNay.Yea )
true

//===========================================================================================================
//
// 10. CanCoerceFromBackingKind - For example, Match which allows a string in place of the enum
//

// Match (and friends) allows coercion from the backing kind for the regular expression

>> Match( "a3d4", Match.Digit )
{FullMatch:"3",StartMatch:2,SubMatches:Table()}

>> Match( "a3d4", "\d")
{FullMatch:"3",StartMatch:2,SubMatches:Table()}

>> IsMatch( "a3d4", Match.Digit )
false

>> IsMatch( "a3d4", "\d")
false

>> MatchAll( "a3d4", Match.Digit )
Table({FullMatch:"3",StartMatch:2,SubMatches:Table()},{FullMatch:"4",StartMatch:4,SubMatches:Table()})

>> MatchAll( "a3d4", "\d")
Table({FullMatch:"3",StartMatch:2,SubMatches:Table()},{FullMatch:"4",StartMatch:4,SubMatches:Table()})

// Most other enums do not, see section 1 above

//===========================================================================================================
//
// 11. CanCoerceToBackingKind - For example, ErrorKind that can be used as a number
//

// ErrorKind allows coerction to the backing kind

>> Error( {Kind: ErrorKind.Div0} )
Error({Kind:ErrorKind.Div0})

>> Error( {Kind: 13} )
Error({Kind:ErrorKind.Div0})

>> ColorFade( Color.Pink, 10% )
RGBA(255,198,208,1)

>> ColorFade( RGBA(1,4,9,100%), 10% )
RGBA(26,29,33,1)

>> TestNumberCoerceTo.V + TestNumberCoerceTo.X
15

>> Int( TestNumberCoerceTo.V )
5

>> Power( TestNumberCoerceTo.V, TestNumberCoerceTo.V )
3125

// Unless there is a specific reason, CanCoerceToBackingKind is expected to be true for most Boolean option sets

>> TestYesNo.Yes && TestYeaNay.Yea
true

>> !TestYesNo.Yes
false

>> TestYesNo.Yes || TestYeaNay.Nay
true

>> !TestYesNo.Yes || !TestYeaNay.Yea
false

>> TestYesNo.Yes And TestYeaNay.Yea
true

>> Not TestYesNo.Yes
false

>> TestYesNo.Yes Or TestYeaNay.Nay
true

>> Not TestYesNo.Yes And Not TestYeaNay.Yea
false

>> TestYesNo.No
TestYesNo.No

>> And( TestYesNo.Yes, TestYeaNay.Yea )
true

>> Not( TestYesNo.Yes )
false

>> Or( TestYesNo.Yes, TestYeaNay.Nay )
true

>> Or(Not(TestYesNo.Yes),  Not(TestYeaNay.Yea))
false

// ErrorKind has CoerceTo set

>> ErrorKind.Unknown + 2
14

>> ErrorKind.Unknown * 2
24

>> ErrorKind.Unknown / 2
6

>> ErrorKind.Unknown ^ 2
144

// Most other enums do not, see section 2 above

//===========================================================================================================
//
// 12. CanConcatenateStronglyTyped (text only) - For example, JSONFormat which can concatenate different members together to create a new member
//

// By default, concatenation results in a text string that won't match strongly typed arguments

>> Sort( [1,2,3], Value, SortOrder.Descending & SortOrder.Ascending )
Errors: Error 43-44: Invalid argument type (Text). Expecting a Enum (SortOrder) value instead.|Error 0-4: The function 'Sort' has some invalid arguments.

>> JSON( [1,2,3], JSONFormat.Compact & Match.Letter )
Errors: Error 34-35: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

// Since the Match supports CanCoerceBackingKind, any concatenation combination is supported
>> Match( "334", Match.Digit & Match.Digit & JSONFormat.IndentFour )
{FullMatch:"334",StartMatch:1,SubMatches:Table()}

// Concatenation can be allowed between members of hte option set and still retain strong typing with IExternalOptionSet.CanConcatenateStronglyTyped

>> JSON( [1,2,3], JSONFormat.IgnoreBinaryData & JSONFormat.FlattenValueTables )
"[1,2,3]"

>> JSON( [1,2,3], JSONFormat.IgnoreBinaryData & "_" )
Errors: Error 43-44: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> JSON( [4,5,6], "_" )
Errors: Error 15-18: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

// Concatenation can be allowed with text strings and still retain strong typing with IExternalOptionSet.CanCoerceBackingKind

>> Match( "33this is ok", Concatenate( Match.Digit, Match.Digit, "this is ok" ) )
{FullMatch:"33this is ok",StartMatch:1,SubMatches:Table()}

>> Match( "33this is ok", Match.Digit & Match.Digit & "this is ok" )
{FullMatch:"33this is ok",StartMatch:1,SubMatches:Table()}

>> Match( "33this is ok", "\d\dthis is ok" )
{FullMatch:"33this is ok",StartMatch:1,SubMatches:Table()}

>> Match( "33this is ok", "\d" & "\d" & "this is ok" )
{FullMatch:"33this is ok",StartMatch:1,SubMatches:Table()}

// Otherwise concatenate results in a text string, but that won't match strongly typed arguments

>> JSON( "foo", Concatenate( Match.Digit, JSONFormat.IndentFour ) )
Errors: Error 13-62: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

>> JSON( "foo", Match.Digit & JSONFormat.IndentFour )
Errors: Error 25-26: Invalid argument type (Text). Expecting a Enum (JSONFormat) value instead.|Error 0-4: The function 'JSON' has some invalid arguments.

//===========================================================================================================
//
// 13. CanCompareNumeric (numbers only) - For example, ErrorKind can compare values
//

>> ErrorKind.Unknown < ErrorKind.Custom
true

>> ErrorKind.Unknown < 1000
true

>> ErrorKind.Unknown > 1000
false

>> ErrorKind.Unknown <= 1000
true

>> ErrorKind.Unknown >= 1000
false

>> ErrorKind.Custom <> ErrorKind.Custom
false

>> ErrorKind.Custom = 1000
true

>> ErrorKind.Div0 <> ErrorKind.Custom
true

// Most other number backeded enums can not, see section 5 above

//===========================================================================================================
//
// 14. CanConcatenateStronglyTyped & CanCoerceFromBackingKind - An important combination, used by Match, allows strings and enums to be mixed
//

>> Match( "a34d", Match.Digit & "\d" )
{FullMatch:"34",StartMatch:2,SubMatches:Table()}

>> Match( "a34d", "\d" & Match.Digit )
{FullMatch:"34",StartMatch:2,SubMatches:Table()}

>> Match( "a34d", Concatenate( Match.Digit, "\d" ) )
{FullMatch:"34",StartMatch:2,SubMatches:Table()}

>> Match( "a34d", Concatenate( "\d", Match.Digit ) )
{FullMatch:"34",StartMatch:2,SubMatches:Table()}

>> Text(Match.Digit) & Text(SortOrder.Ascending)
"\dascending"

>> SortOrder.Ascending & Match.Digit
"ascending\d"

>> Text(SortOrder.Ascending) & Text(Match.Digit)
"ascending\d"

// Concatenate results in at least a text string for all situations, some will result in a strongly typed enum (see below)

>> Concatenate( Match.Digit, Match.Digit, JSONFormat.IndentFour )
"\d\d4"

>> Match.Digit & Match.Digit & JSONFormat.IndentFour
"\d\d4"

>> Concatenate( Match.Digit, Match.Digit, "this is ok" )
Match.CalculatedOptionSetValue

>> Text( Concatenate( Match.Digit, Match.Digit, "this is ok" ) )
"\d\dthis is ok"

>> Match.Digit & Match.Digit & "this is ok" 
Match.CalculatedOptionSetValue

>> Text( Match.Digit & Match.Digit & "this is ok" )
"\d\dthis is ok"

>> Match.Digit & "this is ok" & Match.Digit
Match.CalculatedOptionSetValue

>> Text( Match.Digit & "this is ok" & Match.Digit )
"\dthis is ok\d"

>> Match.Digit & SortOrder.Ascending
"\dascending"

//===========================================================================================================
//
// 15. Since there is no longer an Accepts relationship between enums and their backing kinds, more likely to get Void results
//

>> If(true, TimeUnit.Seconds, "A")
If(true, {test:1}, "Void value (result of the expression can't be used).")

>> If(true, TimeUnit.Minutes, TimeUnit.Seconds)
TimeUnit.Minutes

>> If(true, 1, StartOfWeek.Tuesday)
If(true, {test:1}, "Void value (result of the expression can't be used).")

>> If(true, StartOfWeek.Tuesday, 1)
If(true, {test:1}, "Void value (result of the expression can't be used).")

//===========================================================================================================
//
// 16. Everything coerces to string
//

>> Text( StartOfWeek.Sunday )
"Sunday"

>> "Label:" & StartOfWeek.Sunday
"Label:Sunday"

>> Mid( StartOfWeek.Sunday, 2 )
"unday"

>> Len( StartOfWeek.Sunday )
6

>> Text( Match.MultipleDigits )
"\d+"

>> "Label:" & Match.MultipleDigits
Match.CalculatedOptionSetValue

>> Text( "Label:" & Match.MultipleDigits )
"Label:\d+"

>> Mid( Match.MultipleDigits, 2 )
"d+"

>> Len( Match.MultipleDigits )
3

>> Text( MatchOptions.IgnoreCase )
"i"

>> "Label:" & MatchOptions.IgnoreCase
"Label:i"

>> Text( TestYesNo.No )
"No"

>> "Label:" & TestYesNo.No
"Label:No"

>> Text( TestYeaNay.Nay )
"Nay"

>> "Label:" & TestYeaNay.Nay
"Label:Nay"

>> Text( TestBooleanNoCoerceTo.SuperTrue )
"SuperTrue"

>> "Label:" & TestBooleanNoCoerceTo.SuperTrue
"Label:SuperTrue"

>> Text( TestYeaNay.Yea )
"Yea"

>> "Label:" & TestYeaNay.Yea
"Label:Yea"

>> Text( ErrorKind.FileNotFound )
"FileNotFound"

>> "Label:" & ErrorKind.FileNotFound
"Label:FileNotFound"

>> Text( TestBlueRamp.Blue50 )
"Blue50"

>> "Label:" & TestBlueRamp.Blue50
"Label:Blue50"

>> Mid( TestBlueRamp.Blue50, 2 )
"lue50"

>> Len( TestBlueRamp.Blue50 )
6

>> Text( TestRedRamp.Red25 )
"Red25"

>> "Label:" & TestRedRamp.Red25
"Label:Red25"

>> Mid( TestRedRamp.Red25, 2 )
"ed25"

>> Len( TestRedRamp.Red25 )
5
