// *********** Single-argument functions ***********

>> Abs(If(1/0<2,[1]))
Error({Kind:ErrorKind.Div0})

>> Abs(If(1<0,[1]))
Blank()

>> Abs(Filter([1,2,3], Value > 10))
Table()

>> Boolean(If(1/0<2,["true"]))
Error({Kind:ErrorKind.Div0})

>> Boolean(If(1<0,["true"]))
Blank()

>> Boolean(Filter(["true","false"], Len(Value) > 10))
Table()

>> Boolean(If(1/0<2,[1]))
Error({Kind:ErrorKind.Div0})

>> Boolean(If(1<0,[1]))
Blank()

>> Boolean(Filter([1,2,3], Value > 10))
Table()

>> Char(If(1/0<2,[61]))
Error({Kind:ErrorKind.Div0})

>> Char(If(1<0,[61]))
Blank()

>> Char(Filter([61,62,63], Value > 100))
Table()

>> Exp(If(1/0<2,[1]))
Error({Kind:ErrorKind.Div0})

>> Exp(If(1<0,[1]))
Blank()

>> Exp(Filter([1,2,3], Value > 10))
Table()

>> Int(If(1/0<2,[1]))
Error({Kind:ErrorKind.Div0})

>> Int(If(1<0,[1]))
Blank()

>> Int(Filter([1,2,3], Value > 10))
Table()

>> Len(If(1/0<2,["true"]))
Error({Kind:ErrorKind.Div0})

>> Len(If(1<0,["true"]))
Blank()

>> Len(Filter(["true","false"], Len(Value) > 10))
Table()

>> Ln(If(1/0<2,[1]))
Error({Kind:ErrorKind.Div0})

>> Ln(If(1<0,[1]))
Blank()

>> Ln(Filter([1,2,3], Value > 10))
Table()

>> Sqrt(If(1/0<2,[1]))
Error({Kind:ErrorKind.Div0})

>> Sqrt(If(1<0,[1]))
Blank()

>> Sqrt(Filter([1,2,3], Value > 10))
Table()

// *********** 2+-argument functions, errors ***********

>> Concatenate(If(1/0<2,["hello", "hi"]), " world")
Error({Kind:ErrorKind.Div0})

>> Concatenate("hello ", If(Sqrt(-1)<0,["world", "day"]))
Error({Kind:ErrorKind.Numeric})

>> Find(If(1/0<2,["hello", "hi"]), " world")
Error({Kind:ErrorKind.Div0})

>> Find("a", If(Sqrt(-1)<0,["world", "day"]))
Error({Kind:ErrorKind.Numeric})

>> Round(If(1/0<2,[12.34, 56.78]), 1)
Error({Kind:ErrorKind.Div0})

>> Round(1234.5678, If(Sqrt(-1)<0,[1, 2, 3]))
Error({Kind:ErrorKind.Numeric})

>> Round([12.34, 56.78], 1/0)
Table({Value:Error({Kind:ErrorKind.Div0})},{Value:Error({Kind:ErrorKind.Div0})})

>> Round([123.456, 234.567], [1, 2, 3])
Table({Value:123.5},{Value:234.57},{Value:Error({Kind:ErrorKind.NotApplicable})})

>> Concat(Round([12.34, 56.78], 1/0), IfError(Text(Value), $"Error({{Kind:{FirstError.Kind}}})"), ", ")
"Error({Kind:13}), Error({Kind:13})"

>> Concat(Round([123.456, 234.567], [1, 2, 3]), IfError(Text(Value), $"Error({{Kind:{FirstError.Kind}}})"), ", ")
"123.5, 234.57, Error({Kind:27})"

// *********** 2+-argument functions, blanks ***********

>> Concatenate(If(1<0,["hello", "hi"]), " world")
Blank()

>> Concatenate("hello ", If(1<0,["world", "day"]))
Blank()

>> Find(If(1<0,["hello", "hi"]), " world")
Blank()

>> Find("a", If(1<0,["world", "day"]))
Blank()

>> Round(If(1<0,[12.34, 56.78]), 1)
Blank()

>> Round(1234.5678, If(1<0,[1, 2, 3]))
Blank()

>> Round([12.34, 56.78], If(1<0,1))
Table({Value:12},{Value:57})

// *********** 2+-argument functions, empty tables ***********

>> Concatenate(Filter(["hello", "hi"], Len(Value)>10), " world")
Table()

>> Concatenate("hello ", Filter(["world", "day"],Len(Value)>10))
Table()

>> Find(Filter(["hello", "hi"], Len(Value)>10), " world")
Table()

>> Find("a", Filter(["world", "day"],Len(Value)>10))
Table()

>> Round(Filter([12.34, 56.78], Value > 100), 1)
Table()

>> Round(1234.5678, Filter([1, 2, 3], Value > 10))
Table()

>> Concatenate(Filter(["a","b"], Len(Value)>10), If(1<0,["abcdef", "ghijkl"]))
Blank()

>> Find(If(1<0,["a","b"]), Filter(["abcdef", "ghijkl"], Len(Value)>10))
Blank()

>> Concatenate(["a","b"], If(1/0<2,["abcdef", "ghijkl"]))
Error({Kind:ErrorKind.Div0})

>> Find(If(1/0<2,["a","b"]), ["abcdef", "ghijkl"])
Error({Kind:ErrorKind.Div0})

>> Concatenate(["a","b"], If(1<0,["abcdef", "ghijkl"]))
Blank()

>> Find(If(1<0,["a","b"]), ["abcdef", "ghijkl"])
Blank()

>> Concatenate(If(1<0,["a","b"]), If(1/0<2,["abcdef", "ghijkl"]))
Blank()

>> Concatenate( If(Sqrt(-1)<0,["Hi", "hello"]), If(1/0<2, " world") )
Error({Kind:ErrorKind.Numeric})

>> Concatenate( If(Sqrt(-1)<0,"Hello"), If(1/0<2, [" world", "people"]) )
Error({Kind:ErrorKind.Div0})

>> Concatenate( If(Sqrt(-1)<0,["Hi", "hello"]), If(1/0<2, [" world", "people"]) )
Error({Kind:ErrorKind.Numeric})

>> Concatenate(Filter([1,2], Value<>Value), If(1/0<0, "test"))
Table()