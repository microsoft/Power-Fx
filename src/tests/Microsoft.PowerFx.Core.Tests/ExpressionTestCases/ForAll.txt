>> ForAll([1,2,3], ThisRecord)
Table({Value:1},{Value:2},{Value:3})

>> ForAll([1,2,3], ThisRecord.Value)
Table({Value:1},{Value:2},{Value:3})

>> ForAll([1,2,3] As X, X)
Table({Value:1},{Value:2},{Value:3})

>> ForAll([1,2,3] As X, X.Value)
Table({Value:1},{Value:2},{Value:3})


>> ForAll([1,2,3],Value*Value)
Table({Value:1},{Value:4},{Value:9})

// As renames
>> First(ForAll([1,2,3] As X, X)).Value
1

>> First(ForAll([1,2,3] As X, X.Value)).Value
1

>> ForAll(Sort([60, 61, 62, 63, 64], 1/Value), Char(Value))
Table({Value:"@"},{Value:"?"},{Value:">"},{Value:"="},{Value:"<"})

// ForAll with empty table
>> ForAll(FirstN([60, 61, 62, 63, 64], Blank()), Char(Value))
Table()

>> ForAll(Sort([60, 61, 0, 63, 64], 1/Value), Char(Value))
Error({Kind:ErrorKind.Div0})

>> ForAll(Table({Value:1,Zulu:1}, {Value:0,Zulu:0}, {Value:2,Zulu:2}), 1/ThisRecord.Value)
Error({Kind:ErrorKind.Div0})

>> First(LastN(ForAll(Table({Value:1,Zulu:1}, {Value:0,Zulu:0}, {Value:2,Zulu:2}), 1/ThisRecord.Value), 2)).Value
Error({Kind:ErrorKind.Div0})

>> Table({Value:1},First(LastN(ForAll(Table({Value:1,Zulu:1}, {Value:0,Zulu:0}, {Value:2,Zulu:2}), 1/ThisRecord.Value), 2)),{Value:2})
Table({Value:1},Error({Kind:ErrorKind.Div0}),{Value:2})

>> First(First(LastN(ForAll(Table({Value:1}, {Value:0}, {Value:2}), Table({a: 1/ThisRecord.Value})), 2)).Value)
{a:Error({Kind:ErrorKind.Div0})}

>> ForAll([1,2,3], {C:1})
Table({C:1},{C:1},{C:1})

>> ForAll([1,2,3], {V:Value})
Table({V:1},{V:2},{V:3})

>> ForAll([1,2,3], {V:Value, C:1})
Table({C:1,V:1},{C:1,V:2},{C:1,V:3})

>> ForAll(Table({a:1},If(1/0<2,{a:2})),{b:IfError(a,-FirstError.Kind)})
Table({b:1},{b:-13})

>> ForAll(Table({a:1},If(1/0<2,{a:2}),{a:3},If(Sqrt(-1)<0,{a:4}),{a:5}),{b:IfError(a,-FirstError.Kind)})
Table({b:1},{b:-13},{b:3},{b:-24},{b:5})

>> ForAll(Table({a:1},Error({Kind:ErrorKind.Validation}),{a:3},Error({Kind: 11}),{a:5}),{b:IfError(a,-FirstError.Kind)})
Table({b:1},{b:-11},{b:3},{b:-11},{b:5})

>> ForAll([1, 1/0, 3, Sqrt(-1), 5],{b:IfError(Value,-FirstError.Kind)})
Table({b:1},{b:-13},{b:3},{b:-24},{b:5})

>> ForAll([1, Error({Kind:ErrorKind.Validation}), 3, Error({Kind: 7}), 5],{b:IfError(Value,-FirstError.Kind)})
Table({b:1},{b:-11},{b:3},{b:-7},{b:5})

// Blank rows
>> ForAll(Table({a:1},If(1<0,{a:2}),{a:3},If(1<0,{a:4}),{a:5}), {b:Coalesce(a, 100)})
Table({b:1},{b:100},{b:3},{b:100},{b:5})

>> ForAll([true,false],  If(ThisRecord.Value, {x:1,y:2}, Blank()))
Table({x:1,y:2},Blank())

>> Last(ForAll([true,false], If(ThisRecord.Value, {x:1,y:2}, Blank()))).x
Blank()

>> ForAll([1,2,Blank()], If(IsBlank(ThisRecord), 999, ThisRecord.Value + 1))
Table({Value:2},{Value:3},{Value:1})

>> ForAll(Table({a:1},{a:2},Blank()), If(IsBlank(ThisRecord), 999, ThisRecord.a + 1))
Table({Value:2},{Value:3},{Value:999})

>> ForAll(Table(Blank()),IsBlank(ThisRecord))
Table({Value:true})

>> ForAll([Blank()],IsBlank(ThisRecord))
Table({Value:false})

// ************ ForAll and Void expressions ****************

>> ForAll([1,2], If(Value = 1, Value * 2, {Result: Value}))
If(true, {test:1}, "Void value (result of the expression can't be used).")

>> ForAll([1,2,3] As p, Switch(p.Value, 1, {a:1}, 2, [{a:2}], 3, "Hello"))
If(true, {test:1}, "Void value (result of the expression can't be used).")

>> ForAll(ParseJSON("[1,2]"), If(Value(ThisRecord) = 1, Value(ThisRecord) * 2, {Result: Value(ThisRecord)}))
If(true, {test:1}, "Void value (result of the expression can't be used).")

>> ForAll(ParseJSON("[1,2,3]"), Switch(Value(ThisRecord), 1, {a:1}, 2, [{a:2}], 3, "Hello"))
If(true, {test:1}, "Void value (result of the expression can't be used).")

// Errors are returned
>> ForAll([1,2], If(Value = 1, Sqrt(-Value), {Result: Value}))
Error({Kind:ErrorKind.Numeric})

>> ForAll(ParseJSON("[""1"",""a""]"), If(Text(ThisRecord) = "1", Value(ThisRecord) * 2, Value(ThisRecord)))
Error({Kind:ErrorKind.InvalidArgument})

>> ForAll(Table(Blank()),ThisRecord)
Table(Blank())

>> ForAll(Table(Blank()),Coalesce(ThisRecord))
Table(Blank())

>> ForAll([1,2,3], If(Value <> 2, {a:Value}))
Table({a:1},Blank(),{a:3})

>> Concat(ForAll([1,2,3,4,5],If(Value = 1 Or Value = 3 Or Value = 5, {a:Value},Value = 4, {a:Blank()},Blank())),If(IsBlank(ThisRecord), "<<blank record>>",IsBlank(ThisRecord.a), "<<blank value>>",Text(ThisRecord.a)),",")
"1,<<blank record>>,3,<<blank value>>,5"

>> Concat(ForAll([1,2,3],If(Value=1 Or Value=3,Sequence(Value),Blank())),If(IsBlank(ThisRecord),"<<blank record>>",IsBlank(Value),"<<blank value>>",$"Table with{CountRows(Value)}elements"),", ")
"Table with1elements, <<blank value>>, Table with3elements"

// Blank records are not wrapped
>> ForAll([1,2,3,4,5], If(Value = 1 Or Value = 3 Or Value = 5, {a:Value}, Value = 4, {a:Blank()}, Blank()))
Table({a:1},Blank(),{a:3},{a:Blank()},{a:5})

// Table blank values should be wrapped
>> ForAll([1,2,3], If(Value = 1 Or Value = 3, Sequence(Value), Blank()))
Table({Value:Table({Value:1})},{Value:Blank()},{Value:Table({Value:1},{Value:2},{Value:3})})
