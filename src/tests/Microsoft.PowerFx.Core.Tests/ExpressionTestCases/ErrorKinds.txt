>> Abs(1/0)
Error({Kind:ErrorKind.Div0})

>> Abs(If(1/0<2,[1]))
Error({Kind:ErrorKind.Div0})

>> ForAll(Abs([0, -1, 1/0, 1, If(Char(0) = "a",-1)]), IfError(Value, -FirstError.Kind))
Table({Value:0},{Value:1},{Value:-13},{Value:1},{Value:-25})

>> Acos(2)
Error({Kind:ErrorKind.Numeric})

>> Acos(1/0)
Error({Kind:ErrorKind.Div0})

>> Acot(1/0)
Error({Kind:ErrorKind.Div0})

>> AddColumns(If(1/0<2,[1]),"Square",Value^2)
Error({Kind:ErrorKind.Div0})

>> And(true,1/0)
Error({Kind:ErrorKind.Div0})

// And is a short-circuiting operator - only first error is returned
>> And(Sqrt(-1)<0, 1/0<2, Char(0)="a")
Error({Kind:ErrorKind.Numeric})

>> Asin(-1.5)
Error({Kind:ErrorKind.Numeric})

>> Asin(1/0)
Error({Kind:ErrorKind.Div0})

>> Atan(1/0)
Error({Kind:ErrorKind.Div0})

>> Atan2(0,0)
Error({Kind:ErrorKind.Div0})

>> Atan2(Sqrt(-1),1)
Error({Kind:ErrorKind.Numeric})

>> Average(2, Sqrt(-1), 3, 1/0, 4)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

>> Average([3, 2, 1, 0, -1, -2], Sqrt(1/Value))
Error({Kind:ErrorKind.Div0})

>> Boolean("not bool")
Error({Kind:ErrorKind.InvalidArgument})

>> true && "not bool"
Error({Kind:ErrorKind.InvalidArgument})

>> true && If(1/0<2,"false")
Error({Kind:ErrorKind.Div0})

>> Boolean(If(1/0<2,["false","true"]))
Error({Kind:ErrorKind.Div0})

>> ForAll(Boolean(["true", "not bool", "false"]), IfError(Text(Value), $"ErrorKind={FirstError.Kind}"))
Table({Value:"true"},{Value:"ErrorKind=25"},{Value:"false"})

>> Boolean(Sqrt(-1))
Error({Kind:ErrorKind.Numeric})

>> ForAll(Boolean([3, 1/0, 0, Sqrt(-1)]), IfError(Text(Value), $"ErrorKind={FirstError.Kind}"))
Table({Value:"true"},{Value:"ErrorKind=13"},{Value:"false"},{Value:"ErrorKind=24"})

>> Boolean(ParseJSON("[1]"))
Error({Kind:ErrorKind.InvalidArgument})

>> Boolean(ParseJSON("{""a"":[""true""]}").a)
Error({Kind:ErrorKind.InvalidArgument})

>> Concat([3, 2, 1, 0, -1, -2], Text(Sqrt(1/Value)))
Error({Kind:ErrorKind.Div0})

>> Concat(If(Sqrt(-1)<0,[3, 2, 1, 0, -1, -2]), Text(Sqrt(1/Value)))
Error({Kind:ErrorKind.Numeric})

>> Coalesce("", Sqrt(-1), 1/0)
Error({Kind:ErrorKind.Numeric})

>> Char(1/0)
Error({Kind:ErrorKind.Div0})

>> Char(0)
Error({Kind:ErrorKind.InvalidArgument})

>> Char(256)
Error({Kind:ErrorKind.InvalidArgument})

>> Concatenate("Hello", If(1/0,"div0"), "world", If(Sqrt(-1)<0,"sqrt"))
Error(Table({Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric}))

// Need to define errors in tabular functions with multiple arguments
// >> Concatenate(...)

>> Cos(1/0)
Error({Kind:ErrorKind.Div0})

>> Cot(0)
Error({Kind:ErrorKind.Div0})

>> Cot(Sqrt(-1))
Error({Kind:ErrorKind.Numeric})

>> Count(If(1/0<2,[1,2,3]))
Error({Kind:ErrorKind.Div0})

>> Count([1,Sqrt(-1),3,1/0,5])
Error({Kind:ErrorKind.Numeric})

>> CountA(If(1/0<2,[1,2,3]))
Error({Kind:ErrorKind.Div0})

>> CountA([1,Sqrt(-1),3,1/0,5])
Error({Kind:ErrorKind.Numeric})

>> CountIf([2,1,0,-1,-2], Sqrt(1/Value)<0)
Error({Kind:ErrorKind.Div0})

>> CountIf(If(1/0<2,[1,2,3]),Value>0)
Error({Kind:ErrorKind.Div0})

>> CountRows(If(1/0<2,[1,2,3]))
Error({Kind:ErrorKind.Div0})

>> CountRows(Table({a:1},If(Sqrt(-1)<0,{a:2}),{a:3},If(1/0<2,{a:4}),{a:5}))
Error({Kind:ErrorKind.Numeric})

>> CountRows(ParseJSON("1"))
Error({Kind:ErrorKind.InvalidArgument})

>> CountRows(If(1/0<2,ParseJSON("[1,2,3]")))
Error({Kind:ErrorKind.Div0})

>> Date(-1, -1, -1)
Error({Kind:ErrorKind.InvalidArgument})

>> Date(2000, Sqrt(-1), 1/0)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

>> DateAdd(Date(2000,1,1), 1, "invalidunit")
Error({Kind:ErrorKind.InvalidArgument})

>> DateAdd(If(1/0<2,Date(2000,1,1)), If(Sqrt(-1)<0,3))
Error(Table({Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric}))

>> DateDiff(Date(2000,1,1), Date(2022,1,1), "invalidunit")
Error({Kind:ErrorKind.InvalidArgument})

>> DateDiff(If(1/0<2,Date(2000,1,1)), If(Sqrt(-1)<0,Date(2022,1,1)))
Error(Table({Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric}))

>> DateTime(-1, -1, -1, -1, -1, -1, -1)
Error({Kind:ErrorKind.InvalidArgument})

>> DateValue("not a date")
Error({Kind:ErrorKind.InvalidArgument})

>> DateValue(If(1/0<2,"date"))
Error({Kind:ErrorKind.Div0})

>> DateValue(ParseJSON("1"))
Error({Kind:ErrorKind.InvalidArgument})

>> DateTimeValue("not a date")
Error({Kind:ErrorKind.InvalidArgument})

>> DateTimeValue(If(1/0<2,"date"))
Error({Kind:ErrorKind.Div0})

>> DateTimeValue(ParseJSON("1"))
Error({Kind:ErrorKind.InvalidArgument})

>> Day(If(1/0<2,Date(2022,1,1)))
Error({Kind:ErrorKind.Div0})

>> Degrees(If(1/0<2,Date(2022,1,1)))
Error({Kind:ErrorKind.Div0})

>> EndsWith(If(Sqrt(-1)<0,"one"), "two")
Error({Kind:ErrorKind.Numeric})

>> EndsWith("one", If(1/0<0,"two"))
Error({Kind:ErrorKind.Div0})

>> Error({Kind:ErrorKind.Validation})
Error({Kind:ErrorKind.Validation})

>> Error({Kind:23})
Error({Kind:ErrorKind.Network})

>> Error(Table({Kind:15},{Kind:14}))
Error(Table({Kind:ErrorKind.BadRegex},{Kind:ErrorKind.BadLanguageCode}))

>> Exp(1000000)
Error({Kind:ErrorKind.Numeric})

>> Exp(If(1/0<2,0))
Error({Kind:ErrorKind.Div0})

>> Exp(If(1/0<0,[1,2,3]))
Error({Kind:ErrorKind.Div0})

>> ForAll(Exp([0, 1000000000, 0, 1/0, 0, If(Char(0) = "a",-1)]), IfError(Value, -FirstError.Kind))
Table({Value:1},{Value:-24},{Value:1},{Value:-13},{Value:1},{Value:-25})

>> Filter(If(1/0<2,[1,2,3]), Value = Value)
Error({Kind:ErrorKind.Div0})

>> Filter([2,-1,0,1,-2], Sqrt(Value) > 0)
Table({Value:2},Error({Kind:ErrorKind.Numeric}),{Value:1},Error({Kind:ErrorKind.Numeric}))

>> Find(If(1/0<2,"one"),"two")
Error({Kind:ErrorKind.Div0})

>> Find("one",If(Sqrt(-1)<2,"two"))
Error({Kind:ErrorKind.Numeric})

>> Find("one", "two", 0)
Error({Kind:ErrorKind.InvalidArgument})

>> Find("one", "two", 100)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(If(1/0<2,["1","2"]),"two")
Error({Kind:ErrorKind.Div0})

// Need to define errors in tabular functions with multiple arguments
>> Find(If(1/0<2,["1","2"]),"1234")
Error({Kind:ErrorKind.Div0})

>> First(If(1/0<2,[1]))
Error({Kind:ErrorKind.Div0})

>> FirstN(If(1/0<2,[1]),3)
Error({Kind:ErrorKind.Div0})

>> FirstN([1,2,3],Sqrt(-1))
Error({Kind:ErrorKind.Numeric})

>> ForAll(If(1/0<2,[1,2,3]),Value)
Error({Kind:ErrorKind.Div0})

>> ForAll(Table({a:1},If(Char(0)="a",{a:2}),{a:1/0},If(Sqrt(-1)<0,{a:4}),{a:5}),{b:IfError(a,-FirstError.Kind)})
Table({b:1},{b:-25},{b:-13},{b:-24},{b:5})

>> ForAll([2,1,0,-1,-2], Sqrt(1/Value))
Error(Table({Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric},{Kind:ErrorKind.Numeric}))

>> GUID("not a guid")
Error({Kind:ErrorKind.InvalidArgument})

>> GUID(ParseJSON("""not a guid"""))
Error({Kind:ErrorKind.InvalidArgument})

>> GUID(ParseJSON("true"))
Error({Kind:ErrorKind.InvalidArgument})

>> Hour(If(1/0<2,Time(20,10,10)))
Error({Kind:ErrorKind.Div0})

>> IsBlank(1/0)
Error({Kind:ErrorKind.Div0})

>> IsError(1/0)
true

>> IsBlankOrError(Sqrt(-1))
true

>> IsNumeric(1/0)
Error({Kind:ErrorKind.Div0})

>> IsNumeric(If(Sqrt(-1)<2,"hello"))
Error({Kind:ErrorKind.Numeric})

>> IsToday(If(Sqrt(-1)<2,Date(2022,1,1)))
Error({Kind:ErrorKind.Numeric})

>> If(1/0<2,true,false)
Error({Kind:ErrorKind.Div0})

>> If(true,Sqrt(-1),0)
Error({Kind:ErrorKind.Numeric})

>> If(false,Sqrt(-1),1)
1

>> IfError(1/0,1)
1

>> IfError(1/0,Sqrt(-1))
Error({Kind:ErrorKind.Numeric})

>> IfError(1,Sqrt(-1),1/0)
Error({Kind:ErrorKind.Div0})

>> Int(1/0)
Error({Kind:ErrorKind.Div0})

>> Int(If(1/0<2,[1.2,3.4,5.6]))
Error({Kind:ErrorKind.Div0})

>> ForAll(Int([0.3, -1.2, 1/0, 1.1, If(Char(0) = "a",-1)]), IfError(Value, -FirstError.Kind))
Table({Value:0},{Value:-2},{Value:-13},{Value:1},{Value:-25})

>> Index(If(1/0<2,[1,2,3]),Sqrt(-1))
Error(Table({Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric}))

>> Index([1,2,3,4],0)
Error({Kind:ErrorKind.InvalidArgument})

>> Index([1,2,3,4],5)
Error({Kind:ErrorKind.InvalidArgument})

>> Index(If(1/0<2,ParseJSON("[1,2,3]")),Sqrt(-1))
Error(Table({Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric}))

>> Index(ParseJSON("[1,2,3]"),0)
Error({Kind:ErrorKind.InvalidArgument})

>> Index(ParseJSON("[1,2,3]"),4)
Error({Kind:ErrorKind.InvalidArgument})

>> Index(ParseJSON("123"),1)
Error({Kind:ErrorKind.InvalidArgument})

>> Last(If(1/0<2,[1]))
Error({Kind:ErrorKind.Div0})

>> LastN(If(1/0<2,[1]),3)
Error({Kind:ErrorKind.Div0})

>> LastN([1,2,3],Sqrt(-1))
Error({Kind:ErrorKind.Numeric})

>> Left(If(1/0<2,"Hello"),Sqrt(-1))
Error(Table({Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric}))

>> Left("Hello",-1)
Error({Kind:ErrorKind.InvalidArgument})

>> Len(If(1/0<2,"Hello"))
Error({Kind:ErrorKind.Div0})

>> Ln(0)
Error({Kind:ErrorKind.Numeric})

>> Ln(If(1/0<2,10))
Error({Kind:ErrorKind.Div0})

>> Ln(If(1/0<0,[1,2,3]))
Error({Kind:ErrorKind.Div0})

>> ForAll(Ln([1, -1, 1, 1/0, 1, If(Char(0) = "a",-1)]), IfError(Value, -FirstError.Kind))
Table({Value:0},{Value:-24},{Value:0},{Value:-13},{Value:0},{Value:-25})

>> Log(0)
Error({Kind:ErrorKind.Numeric})

>> Log(If(1/0<2,10),If(Char(0)="a",1))
Error(Table({Kind:ErrorKind.Div0},{Kind:ErrorKind.InvalidArgument}))

>> Log(10,1)
Error({Kind:ErrorKind.Div0})

>> LookUp(If(1/0<2,[1,2,3]), Value > 0)
Error({Kind:ErrorKind.Div0})

>> LookUp([-1, 0, 1], Sqrt(Value) < 1)
Error({Kind:ErrorKind.Numeric})

>> LookUp([1, 1/0, -1], IsError(Value), IfError(Value, -FirstError.Kind))
-13

>> Lower(If(1/0<2,"lower"))
Error({Kind:ErrorKind.Div0})

>> Max(2, Sqrt(-1), 3, 1/0, 4)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

>> Max([3, 2, 1, 0, -1, -2], Sqrt(1/Value))
Error({Kind:ErrorKind.Div0})

>> Mid(Char(0),1/0,Sqrt(-1))
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric}))

>> Mid("Hello", 0)
Error({Kind:ErrorKind.InvalidArgument})

>> Mid("Hello", 2, -1)
Error({Kind:ErrorKind.InvalidArgument})

>> Min(2, Sqrt(-1), 3, 1/0, 4)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

>> Min([3, 2, 1, 0, -1, -2], Sqrt(1/Value))
Error({Kind:ErrorKind.Div0})

>> Minute(If(1/0<2,Time(20,10,10)))
Error({Kind:ErrorKind.Div0})

>> Mod(2,0)
Error({Kind:ErrorKind.Div0})

>> Mod(10^200,-10^-200)
Error({Kind:ErrorKind.Numeric})

>> Mod(Sqrt(-1),If(Char(0)="a",1))
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.InvalidArgument}))

>> Month(If(1/0<2,Date(2022,1,1)))
Error({Kind:ErrorKind.Div0})

>> Not(If(1/0<2,true))
Error({Kind:ErrorKind.Div0})

// Or is a short-circuiting operator - only first error is returned
>> Or(Sqrt(-1)<0, 1/0<2, Char(0)="a")
Error({Kind:ErrorKind.Numeric})

>> ParseJSON("not a JSON string")
Error({Kind:ErrorKind.InvalidArgument})

>> ParseJSON(If(1/0<2,"not a JSON string"))
Error({Kind:ErrorKind.Div0})

>> Proper(If(1/0<2,"proper"))
Error({Kind:ErrorKind.Div0})

>> Power(0, -1)
Error({Kind:ErrorKind.Div0})

>> Power(-2, 0.5)
Error({Kind:ErrorKind.Numeric})

>> Power(10, 10000)
Error({Kind:ErrorKind.Numeric})

>> Power(If(Char(0)="a",1,2), Sqrt(-2))
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.Numeric}))

>> Radians(If(1/0<2,Date(2022,1,1)))
Error({Kind:ErrorKind.Div0})

>> RandBetween(5, 2)
Error({Kind:ErrorKind.Numeric})

>> RandBetween(If(Char(0)="a",1,2), Sqrt(-2))
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.Numeric}))

>> Replace(Char(0),Sqrt(-1),1/0,Char(256))
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0},{Kind:ErrorKind.InvalidArgument}))

>> Replace("Hello world",-1,5,"new")
Error({Kind:ErrorKind.InvalidArgument})

>> Replace("Hello world",1,-5,"new")
Error({Kind:ErrorKind.InvalidArgument})

>> Right("Hello world", -1)
Error({Kind:ErrorKind.InvalidArgument})

>> Right(If(1/0,"Hello"), Sqrt(-1))
Error(Table({Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric}))

>> Round(Sqrt(-1), 1/0)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

// Need to define errors in tabular functions with multiple arguments
// >> Round(...)

>> RoundDown(Sqrt(-1), 1/0)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

>> RoundUp(Sqrt(-1), 1/0)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

>> Second(If(1/0<2,Time(20,10,10)))
Error({Kind:ErrorKind.Div0})

>> Sequence(-1)
Error({Kind:ErrorKind.InvalidArgument})

>> Sequence(Sqrt(-1),1/0,If(Char(0)="a",1))
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0},{Kind:ErrorKind.InvalidArgument}))

>> Shuffle(If(1/0<2,[1,2,3]))
Error({Kind:ErrorKind.Div0})

>> Sin(1/0)
Error({Kind:ErrorKind.Div0})

>> Sort(If(1/0<2,[1,2,3]), Value)
Error({Kind:ErrorKind.Div0})

>> Sort([5,4,3,2,1,0,-1,-2], Sqrt(1/Value))
Error({Kind:ErrorKind.Div0})

>> Sort([-2,-1,0,1,2,3,4,5], Sqrt(1/Value))
Error({Kind:ErrorKind.Numeric})

>> Split(Char(-4), If(1/0<2,"."))
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.Div0}))

>> Sqrt(-1)
Error({Kind:ErrorKind.Numeric})

>> Sqrt(1/0)
Error({Kind:ErrorKind.Div0})

>> Sqrt(If(1/0<2,[1,2,3,4]))
Error({Kind:ErrorKind.Div0})

>> ForAll(Sqrt([1, -2, 4, 1/0, 9, If(Char(0) = "a",-1)]), IfError(Value, -FirstError.Kind))
Table({Value:1},{Value:-24},{Value:2},{Value:-13},{Value:3},{Value:-25})

>> StartsWith(Char(-4), If(1/0<2,"."))
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.Div0}))

>> StdevP(2, Sqrt(-1), 3, 1/0, 4)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

// Overflow in calculation
>> StdevP(1e200, 2e200, 3e200, 4e200)
Error({Kind:ErrorKind.Numeric})

>> StdevP([3, 2, 1, 0, -1, -2], Sqrt(1/Value))
Error({Kind:ErrorKind.Div0})

>> Substitute(Char(0),If(Sqrt(-1)<0,"d"),If(1/0<2,"e"),Sqrt(-1))
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric}))

>> Substitute("Hello world", "he", "HE", 0)
Error({Kind:ErrorKind.InvalidArgument})

>> Sum(2, Sqrt(-1), 3, 1/0, 4)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

// Overflow in calculation
>> Sum(1e308, 1e308, 1e308, 1e308, 1e308)
Error({Kind:ErrorKind.Numeric})

>> Sum([3, 2, 1, 0, -1, -2], Sqrt(1/Value))
Error({Kind:ErrorKind.Div0})

>> Switch(1/0, 1, 2, 3)
Error({Kind:ErrorKind.Div0})

>> Switch(2,1,"a",Sqrt(-1),"b","c")
Error({Kind:ErrorKind.Numeric})

// Errors not evaluated are not returned
>> Switch(2,1,"a",2,"b",Sqrt(-1),"c","d")
"b"

// Errors can go in tables
>> Table({a:1},If(1/0<2,{a:2}),{a:3})
Table({a:1},Error({Kind:ErrorKind.Div0}),{a:3})

>> Table(ParseJSON("1"))
Error({Kind:ErrorKind.InvalidArgument})

>> Table(If(1/0<2,ParseJSON("[1,2,3]")))
Error({Kind:ErrorKind.Div0})

>> Tan(1/0)
Error({Kind:ErrorKind.Div0})

>> Text(123.456, "0.00", "invalid")
Error({Kind:ErrorKind.BadLanguageCode})

>> Text(Char(0), If(1/0<2,"format"), If(Sqrt(-1)<0,"language"))
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.Div0},{Kind:ErrorKind.Numeric}))

>> Text(ParseJSON("[1]"))
Error({Kind:ErrorKind.InvalidArgument})

>> Text(If(1/0<2,ParseJSON("1")))
Error({Kind:ErrorKind.Div0})

>> Time(20, Sqrt(-1), 1/0)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

>> TimeValue("not a time")
Error({Kind:ErrorKind.InvalidArgument})

>> TimeValue(If(1/0<2,"time"))
Error({Kind:ErrorKind.Div0})

>> TimeValue(ParseJSON("1"))
Error({Kind:ErrorKind.InvalidArgument})

>> TimeValue(If(1/0<2,ParseJSON("1")))
Error({Kind:ErrorKind.Div0})

>> TimeZoneOffset(If(1/0<2,Date(2022,1,1)))
Error({Kind:ErrorKind.Div0})

>> Trim(If(1/0<2,"proper"))
Error({Kind:ErrorKind.Div0})

>> TrimEnds(If(1/0<2,"proper"))
Error({Kind:ErrorKind.Div0})

>> Trunc(Sqrt(-1), 1/0)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

>> Upper(If(1/0<2,"proper"))
Error({Kind:ErrorKind.Div0})

>> Value("not a number")
Error({Kind:ErrorKind.InvalidArgument})

>> Value(If(Sqrt(-1)<0,"123"))
Error({Kind:ErrorKind.Numeric})

>> Value("1234", "not a culture")
Error({Kind:ErrorKind.BadLanguageCode})

>> Value(ParseJSON("[false]"))
Error({Kind:ErrorKind.InvalidArgument})

>> Value(If(1/0<2,ParseJSON("1")))
Error({Kind:ErrorKind.Div0})

>> VarP(2, Sqrt(-1), 3, 1/0, 4)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

// Overflow in calculation
>> VarP(1e200, 2e200, 3e200, 4e200)
Error({Kind:ErrorKind.Numeric})

>> VarP([3, 2, 1, 0, -1, -2], Sqrt(1/Value))
Error({Kind:ErrorKind.Div0})

// Error record scope
>> With(If(1/0<2,{a:1}),a)
Error({Kind:ErrorKind.Div0})

// Error from scope
>> With({a:1/0},a)
Error({Kind:ErrorKind.Div0})

// Handling error
>> With({a:1/0},IfError(a,-FirstError.Kind))
-13

>> Year(If(1/0<2,Date(2022,1,1)))
Error({Kind:ErrorKind.Div0})
