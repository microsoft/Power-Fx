>> Date(-1, 2, 3)
Error({Kind:ErrorKind.InvalidArgument})

>> Date(-1,1,1)
Error({Kind:ErrorKind.InvalidArgument})

>> Date(Blank(), 2, 3)
Error({Kind:ErrorKind.InvalidArgument})

>> Date(10000,1,1)
Error({Kind:ErrorKind.InvalidArgument})

>> Date(0,0,0)
Error({Kind:ErrorKind.InvalidArgument})

>> Date(1960,7,31)
Date(1960,7,31)

// Previously: dates before 1900 get converted to post-1900
// New behavior: don't convert. 
>> Date(80, 1, 2)
Date(80,1,2)

>> Date(76,7,4)
Date(76,7,4)

>> Date(100,1,1)
Date(100,1,1)

// months and days overflow (but not for SQL)
>> Date(2000, 25, 69)
Date(2002,3,10)

>> Date(2000, 2, -1)
Date(2000,1,30)

>> Date(2000, -2, 1)
Date(1999,10,1)

>> Date(2000, -2, -1)
Date(1999,9,29)

>> Date(1933,0,25)
Date(1932,12,25)

>> Date(2012,13,14)
Date(2013,1,14)

>> Date(1933,-5,25)
Date(1932,7,25)

>> Date(1933,30,25)
Date(1935,6,25)

>> Date(2118,4,0)
Date(2118,3,31)

>> Date(2012,7,32)
Date(2012,8,1)

>> Date(2012,7,-20)
Date(2012,6,10)

>> Date(2012,7,100)
Date(2012,10,8)

// Parameters are truncated
>> Date(1900.67,2.7,12.2)
Date(1900,2,12)

>> Date(1975,Blank(),14)
Date(1974,12,14)

>> Date(1975,10,Blank())
Date(1975,9,30)

>> Date(1/0, 11, 29)
Error({Kind:ErrorKind.Div0})

>> Date(1975,1/0,14)
Error({Kind:ErrorKind.Div0})

>> Date(1975,10,1/0)
Error({Kind:ErrorKind.Div0})

>> Date(-1,1,1/0)
Error({Kind:ErrorKind.Div0})

>> Date("a","b","c")
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.InvalidArgument}))

>> Date("1900","5","14")
Date(1900,5,14)

>> Date("1900",true,true)
Date(1900,1,1)

>> Date("1975",true,false)
Date(1974,12,31)

>> Date("1975",false,false)
Date(1974,11,30)

>> Date(true,true,true)
Date(1,1,1)

>> Date(Year("2022-11-29"),10,18)
Date(2022,10,18)

>> Date(1960, Month("2022-11-29"),17)
Date(1960,11,17)

>> Date(1960,6,Day("2022-11-29"))
Date(1960,6,29)

>> Month(Date(2011,5,12))
5

>> Year(Date(2011,5,12))
2011

>> Day(Date(2011,5,12))
12

// Date comparisons
>> Date(2011,1,15) < Date(2011,1,30)
true

>> Date(2011,1,15) < Date(2011,1,15)
false

>> Date(2011,1,15) <= Date(2011,1,30)
true

>> Date(2011,1,15) <= Date(2011,1,15)
true

>> Date(2011,1,30) < Date(2011,1,15)
false

>> Date(2011,1,30) <= Date(2011,1,15)
false

>> Date(2011,1,15) > Date(2011,1,30)
false

>> Date(2011,1,15) > Date(2011,1,15)
false

>> Date(2011,1,15) >= Date(2011,1,30)
false

>> Date(2011,1,15) >= Date(2011,1,15)
true

>> Date(2011,1,30) > Date(2011,1,15)
true

>> Date(2011,1,30) >= Date(2011,1,15)
true

// Blank Date comparisons
>> If(1<0,Date(1,1,1)) < Date(2011,1,30)
true

>> If(1<0,Date(1,1,1)) <= Date(2011,1,30)
true

>> If(1<0,Date(1,1,1)) > Date(2011,1,30)
false

>> If(1<0,Date(1,1,1)) >= Date(2011,1,30)
false

>> Date(2011,1,30) < If(1<0,Date(1,1,1))
false

>> Date(2011,1,30) <= If(1<0,Date(1,1,1))
false

>> Date(2011,1,30) > If(1<0,Date(1,1,1))
true

>> Date(2011,1,30) >= If(1<0,Date(1,1,1))
true

// Error Date comparisons
>> Date(1/0, 2, 3) < Date(2011,1,30)
Error({Kind:ErrorKind.Div0})

>> Date(1/0, 2, 3) <= Date(2011,1,30)
Error({Kind:ErrorKind.Div0})

>> Date(1/0, 2, 3) > Date(2011,1,30)
Error({Kind:ErrorKind.Div0})

>> Date(1/0, 2, 3) >= Date(2011,1,30)
Error({Kind:ErrorKind.Div0})

>> Date(2001,2,14) = Date(2001,2,14)
true

// DateAddDay tests
>> Day(Date(2011,1,15) + 1)
16

>> Day(1 + Date(2011,1,15))
16

>> Day(Date(2011,1,15) - 1)
14

// DateTimeAddDay tests
>> Day((Date(2011,1,15) + 1) + 1)
17

>> Day((1 + Date(2011,1,15)) + 1)
17

>> Day((Date(2011,1,15) - 1) - 1)
13

>> Day(Date(-1, 2, 3))
Error({Kind:ErrorKind.InvalidArgument})

>> Day(Date(1976,1,4) + Time(12,30,15))
4

// ************************* Excel-style date math ************************

>> Date(2001, 2, 14) + 2
Date(2001,2,16)

>> Date(2001, 2, 14) - 10
Date(2001,2,4)

>> Date(2001, 2, 14) + 2.3
Date(2001,2,16)

>> Date(2001, 2, 14) + 2.3 + 0.7
Date(2001,2,17)

>> Date(2001, 2, 14) - 2.3
Date(2001,2,11)

>> Date(2001, 2, 14) - 2.3 - 0.8
Date(2001,2,10)

// Across DST
>> Date(2022, 1, 1) + 180
Date(2022,6,30)

>> Date(2022, 7, 1) + 180
Date(2022,12,28)

>> Date(2022, 6, 30) - 180
Date(2022,1,1)

>> Date(2022, 12, 28) - 180
Date(2022,7,1)

>> Date(2023,1,1) + If(1<0,1)
Date(2023,1,1)

>> Date(2023,1,1) + If(1<0,Time(12,0,0))
DateTime(2023,1,1,0,0,0,0)

>> DateTime(2023,1,1,12,34,56) + If(1<0,1)
DateTime(2023,1,1,12,34,56,0)

>> DateTime(2023,1,1,12,34,56) + If(1<0,Time(12,0,0))
DateTime(2023,1,1,12,34,56,0)

>> If(1<0,Date(2023,1,1)) + 2
Date(1900,1,1)

>> If(1<0,Date(2023,1,1)) + Time(12,0,0)
DateTime(1899,12,30,12,0,0,0)

>> If(1<0,DateTime(2023,1,1,12,34,56)) + 2
DateTime(1900,1,1,0,0,0,0)

>> If(1<0,DateTime(2023,1,1,12,34,56)) + Time(12,0,0)
DateTime(1899,12,30,12,0,0,0)

>> Date(2023,1,1) - If(1<0,1)
Date(2023,1,1)

>> Date(2023,1,1) - If(1<0,Time(12,0,0))
DateTime(2023,1,1,0,0,0,0)

>> DateTime(2023,1,1,12,34,56) - If(1<0,1)
DateTime(2023,1,1,12,34,56,0)

>> DateTime(2023,1,1,12,34,56) - If(1<0,Time(12,0,0))
DateTime(2023,1,1,12,34,56,0)

>> If(1<0,Date(2023,1,1)) - 2
Date(1899,12,28)

>> If(1<0,Date(2023,1,1)) - Time(12,0,0)
DateTime(1899,12,29,12,0,0,0)

>> If(1<0,DateTime(2023,1,1,12,34,56)) - 2
DateTime(1899,12,28,0,0,0,0)

>> If(1<0,DateTime(2023,1,1,12,34,56)) - Time(12,0,0)
DateTime(1899,12,29,12,0,0,0)

// Date difference
>> Date(2022, 1, 30) - Date(2022, 1, 15)
15

>> Date(2022, 1, 15) - Date(2022, 1, 30)
-15

>> Date(2022, 10, 1) + Time(12, 34, 56)
DateTime(2022,10,1,12,34,56,0)

>> Time(12, 34, 56) + Date(2022, 10, 1)
DateTime(2022,10,1,12,34,56,0)

// Time wraps 30h to 6h
>> Date(2022, 10, 1) + Time(30, 0, 0)
DateTime(2022,10,1,6,0,0,0)

>> Date(2022, 10, 10) - Time(12, 34, 56)
DateTime(2022,10,9,11,25,4,0)

>> DateTime(2022, 10, 10, 19, 0, 0) - Time(12, 34, 56)
DateTime(2022,10,10,6,25,4,0)

>> DateTime(2022, 1, 30, 0, 0, 0) + Date(2022, 1, 15)
Errors: Error 31-32: This operation isn't valid on these types: DateTime, Date.

>> Date(2022, 1, 30) + Date(2022, 1, 15)
Errors: Error 18-19: This operation isn't valid on these types: Date, Date.

>> Date(2022, 1, 1) + DateTime(2022, 1, 30, 0, 0, 0)
Errors: Error 17-18: This operation isn't valid on these types: Date, DateTime.

>> DateTime(2022, 1, 1, 12, 34, 56) + DateTime(2022, 1, 30, 0, 0, 0)
Errors: Error 33-34: This operation isn't valid on these types: DateTime, DateTime.

>> 70 - DateTime(1900, 1, 1, 0, 0, 0)
Error({Kind:ErrorKind.NotSupported})

>> 80 - Date(1900, 1, 1)
Error({Kind:ErrorKind.NotSupported})

// ************************* OVERFLOWS AND UNDERFLOWS ************************

>> Date(2022,2,29)
Date(2022,3,1)

>> Date(2022,13,1)
Date(2023,1,1)

>> Date(2022,2,-1)
Date(2022,1,30)

>> Date(2022,2,0)
Date(2022,1,31)

>> Date(2022,-1,1)
Date(2021,11,1)

>> Date(2022,0,1)
Date(2021,12,1)

// ******************************** COERCIONS ********************************

// String to number
>> Date("2022","9","8")
Date(2022,9,8)

// Boolean to number
>> Date(2022,true,true)
Date(2022,1,1)

// String to date
>> Day("2022-09-08")
8

>> Month("2022-09-08")
9

>> Year("2022-09-08")
2022

// Number to date (44811 == 2022-09-07)
>> Day(44811)
7

>> Month(44811)
9

>> Year(44811)
2022

// Boolean to date (should fail)
>> Day(true)
Errors: Error 4-8: Invalid argument type (Boolean). Expecting a DateTime value instead.

>> Month(false)
Errors: Error 6-11: Invalid argument type (Boolean). Expecting a DateTime value instead.

>> Year(true)
Errors: Error 5-9: Invalid argument type (Boolean). Expecting a DateTime value instead.

// ***************************** BLANKS AND ERRORS *****************************

>> Day(Blank())
0

>> Month(Blank())
1

>> Year(Blank())
1900

>> Day("")
0

>> Month("")
1

>> Year("")
1900

>> Date(Sqrt(-4), 2, 3)
Error({Kind:ErrorKind.Numeric})

>> Day(If(1/0<2,Date(2000,1,1)))
Error({Kind:ErrorKind.Div0})

>> Month(If(1/0<2,Date(2000,1,1)))
Error({Kind:ErrorKind.Div0})

>> Year(If(1/0<2,Date(2000,1,1)))
Error({Kind:ErrorKind.Div0})
