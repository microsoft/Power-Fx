#SKIPFILE: NumberIsFloat

// decimal op decimal -> decimal

>> 1.0000000000000000000000001 * 2
2.0000000000000000000000002

>> 1.0000000000000000000000001 / 2
0.50000000000000000000000005

>> 1.0000000000000000000000001 - 2
-0.9999999999999999999999999

>> 1.0000000000000000000000001 + 2
3.0000000000000000000000001

>> 1.0000000000000000000000001 = 1
false

>> 1.0000000000000000000000001 <> 1
true

>> 1.0000000000000000000000001 > 1
true

>> 1.0000000000000000000000001 < 1
false

>> 1.0000000000000000000000001 >= 1
true

>> 1.0000000000000000000000001 <= 1
false

>> 1.0000000000000000000000001%
0.010000000000000000000000001

>> -1.0000000000000000000000001
-1.0000000000000000000000001

>> 2 * 1.0000000000000000000000001
2.0000000000000000000000002

>> 2 / 1.0000000000000000000000001
1.9999999999999999999999998

>> 2 - 1.0000000000000000000000001
0.9999999999999999999999999

>> 2 + 1.0000000000000000000000001
3.0000000000000000000000001

>> 1 = 1.0000000000000000000000001 
false

>> 1 <> 1.0000000000000000000000001
true

>> 1 > 1.0000000000000000000000001 
false

>> 1 < 1.0000000000000000000000001
true

>> 1 >= 1.0000000000000000000000001 
false

>> 1 <= 1.0000000000000000000000001
true

>> 2 = 1.0000000000000000000000001 
false

>> 2 <> 1.0000000000000000000000001
true

>> 2 > 1.0000000000000000000000001 
true

>> 2 < 1.0000000000000000000000001
false

>> 2 >= 1.0000000000000000000000001 
true

>> 2 <= 1.0000000000000000000000001
false

// test with float (Sqrt always returns float)

>> Sqrt(9)%
0.03

>> 3*(1.0000000000000000000000001%)
0.030000000000000000000000003

>> Sqrt(9)*(1.0000000000000000000000001%)
0.03

>> 1.0000000000000000000000001 * Sqrt(4)
2

>> 1.0000000000000000000000001 / Sqrt(4)
0.5

>> 1.0000000000000000000000001 - Sqrt(4)
-1

>> 1.0000000000000000000000001 + Sqrt(4)
3

>> 1.0000000000000000000000001 = Sqrt(4)
false

// rounds decimal to 1

>> 1.0000000000000000000000001 = Sqrt(1)
true

>> 1.0000000000000000000000001 <> Sqrt(1)
false

>> 1.0000000000000000000000001 > Sqrt(1)
false

>> 1.0000000000000000000000001 < Sqrt(1)
false

>> 1.0000000000000000000000001 >= Sqrt(1)
true

>> 1.0000000000000000000000001 <= Sqrt(1)
true

>> Sqrt(4) * 1.0000000000000000000000001
2

>> Sqrt(4) / 1.0000000000000000000000001
2

>> Sqrt(4) - 1.0000000000000000000000001
1

>> Sqrt(4) + 1.0000000000000000000000001
3

>> Sqrt(1) = 1.0000000000000000000000001 
true

>> Sqrt(1) <> 1.0000000000000000000000001
false

>> Sqrt(1) > 1.0000000000000000000000001 
false

>> Sqrt(1) < 1.0000000000000000000000001
false

>> Sqrt(1) >= 1.0000000000000000000000001 
true

>> Sqrt(1) <= 1.0000000000000000000000001
true

>> Sqrt(4) = 1.0000000000000000000000001 
false

>> Sqrt(4) <> 1.0000000000000000000000001
true

>> Sqrt(4) > 1.0000000000000000000000001 
true

>> Sqrt(4) < 1.0000000000000000000000001
false

>> Sqrt(4) >= 1.0000000000000000000000001 
true

>> Sqrt(4) <= 1.0000000000000000000000001
false

// decimal op string -> decimal

>> 1.0000000000000000000000001 * "2"
2.0000000000000000000000002

>> 1.0000000000000000000000001 / "2"
0.50000000000000000000000005

>> 1.0000000000000000000000001 - "2"
-0.9999999999999999999999999

>> 1.0000000000000000000000001 + "2"
3.0000000000000000000000001

// Decimal TODO: What is our story on =/<> here?  Warning in Canvas?  Other comparison ops don't work

>> 1.0000000000000000000000001 = "1"
false

>> 1.0000000000000000000000001 <> "1"
true

//1.0000000000000000000000001 > "1"

//1.0000000000000000000000001 < "1"

//1.0000000000000000000000001 >= "1"

//1.0000000000000000000000001 <= "1"

>> "1.0000000000000000000000001"%
0.010000000000000000000000001

>> -"1.0000000000000000000000001"
-1.0000000000000000000000001

>> "2" * 1.0000000000000000000000001
2.0000000000000000000000002

>> "2" / 1.0000000000000000000000001
1.9999999999999999999999998

>> "2" - 1.0000000000000000000000001
0.9999999999999999999999999

>> "2" + 1.0000000000000000000000001
3.0000000000000000000000001

>> "1" = 1.0000000000000000000000001 
false

//"1" <> 1.0000000000000000000000001

//"1" > 1.0000000000000000000000001 

//"1" < 1.0000000000000000000000001

//"1" >= 1.0000000000000000000000001 

//"1" <= 1.0000000000000000000000001

>> "2" = 1.0000000000000000000000001 
false

>> "2" <> 1.0000000000000000000000001
true

//"2" > 1.0000000000000000000000001 

//"2" < 1.0000000000000000000000001

//"2" >= 1.0000000000000000000000001 

//"2" <= 1.0000000000000000000000001

// decimal op boolean -> decimal

>> 1.0000000000000000000000001 * true
1.0000000000000000000000001

>> 1.0000000000000000000000001 / true
1.0000000000000000000000001

>> 1.0000000000000000000000001 - true
0.0000000000000000000000001

>> 1.0000000000000000000000001 + true
2.0000000000000000000000001

>> true%
0.01

>> true% * 1.0000000000000000000000001
0.010000000000000000000000001

>> -true
-1

>> (-true) * 1.0000000000000000000000001
-1.0000000000000000000000001

>> true * 1.0000000000000000000000001
1.0000000000000000000000001

>> true / 1.0000000000000000000000001
0.9999999999999999999999999

>> true - 1.0000000000000000000000001
-0.0000000000000000000000001

>> true + 1.0000000000000000000000001
2.0000000000000000000000001

>> true = 1.0000000000000000000000001
false

>> true <> 1.0000000000000000000000001
true

//true > 1.0000000000000000000000001 

//true < 1.0000000000000000000000001

//true >= 1.0000000000000000000000001 

//true <= 1.0000000000000000000000001

>> true = 1
false

>> true <> 1
true

//true > 1

//true < 1

//true >= 1

//true <= 1

>> false = 1.0000000000000000000000001 
false

>> false <> 1.0000000000000000000000001
true

//false > 1.0000000000000000000000001 

//false < 1.0000000000000000000000001

//false >= 1.0000000000000000000000001 

//false <= 1.0000000000000000000000001

//false = 0.0000000000000000000000001 

//false <> 0.0000000000000000000000001

//false > 0.0000000000000000000000001 

//false < 0.0000000000000000000000001

//false >= 0.0000000000000000000000001 

//false <= 0.0000000000000000000000001

>> false = 0
false

>> false <> 0
true

//false > 0

//false < 0

//false >= 0

//false <= 0

// decimal op untyped -> decimal

>> 1.0000000000000000000000001 * ParseJSON("2")
2.0000000000000000000000002

>> ParseJSON("1.0000000000000000000000001") * 2
2.0000000000000000000000002

>> ParseJSON("1.0000000000000000000000001") * ParseJSON("2.0000000000000000000000001")
2.0000000000000000000000003

>> 1.0000000000000000000000001 / ParseJSON("2")
0.50000000000000000000000005

>> ParseJSON("1.0000000000000000000000001") / 2
0.50000000000000000000000005

>> ParseJSON("1.0000000000000000000000001") / ParseJSON("2.0000000000000000000000001")
0.500000000000000000000000025

>> 1.0000000000000000000000001 - ParseJSON("2")
-0.9999999999999999999999999

>> ParseJSON("1.0000000000000000000000001") - 2
-0.9999999999999999999999999

>> ParseJSON("1.0000000000000000000000001") - ParseJSON("2.0000000000000000000000001")
-1

>> 1.0000000000000000000000001 + ParseJSON("2")
3.0000000000000000000000001

>> ParseJSON("1.0000000000000000000000001") + 2
3.0000000000000000000000001

>> ParseJSON("1.0000000000000000000000001") + ParseJSON("2.0000000000000000000000001")
3.0000000000000000000000002

>> 1.0000000000000000000000001 = ParseJSON("1")
false

>> ParseJSON("1.0000000000000000000000001") = 1
false

>> ParseJSON("1.0000000000000000000000001") = 1.0000000000000000000000001
true

>> ParseJSON("1.0000000000000000000000001") = ParseJSON("1.0000000000000000000000001")
Errors: Error 41-42: Incompatible types for comparison. These types can't be compared: UntypedObject, UntypedObject.

>> 1.0000000000000000000000001 <> ParseJSON("1")
true

>> ParseJSON("1.0000000000000000000000001") <> 1
true

>> ParseJSON("1.0000000000000000000000001") <> 1.0000000000000000000000001
false

>> ParseJSON("1.0000000000000000000000001") <> ParseJSON("1.0000000000000000000000001")
Errors: Error 41-43: Incompatible types for comparison. These types can't be compared: UntypedObject, UntypedObject.

>> 1.0000000000000000000000001 > ParseJSON("1")
true

>> ParseJSON("1.0000000000000000000000001") > 1
true

>> ParseJSON("1.0000000000000000000000001") > 1.0000000000000000000000001
false

>> ParseJSON("1.0000000000000000000000001") > ParseJSON("1.0000000000000000000000001")
Errors: Error 41-42: This operation isn't valid on these types: UntypedObject, UntypedObject.

>> 1.0000000000000000000000001 < ParseJSON("1")
false

>> ParseJSON("1.0000000000000000000000001") < 1
false

>> ParseJSON("1.0000000000000000000000001") < 1.0000000000000000000000001
false

>> ParseJSON("1.0000000000000000000000001") < ParseJSON("1.0000000000000000000000001")
Errors: Error 41-42: This operation isn't valid on these types: UntypedObject, UntypedObject.

>> 1.0000000000000000000000001 >= ParseJSON("1")
true

>> ParseJSON("1.0000000000000000000000001") >= 1
true

>> ParseJSON("1.0000000000000000000000001") >= 1.0000000000000000000000001
true

>> ParseJSON("1.0000000000000000000000001") >= ParseJSON("1.0000000000000000000000001")
Errors: Error 41-43: This operation isn't valid on these types: UntypedObject, UntypedObject.

>> 1.0000000000000000000000001 <= ParseJSON("1")
false

>> ParseJSON("1.0000000000000000000000001") <= 1
false

>> ParseJSON("1.0000000000000000000000001") <= 1.0000000000000000000000001
true

>> ParseJSON("1.0000000000000000000000001") <= ParseJSON("1.0000000000000000000000001")
Errors: Error 41-43: This operation isn't valid on these types: UntypedObject, UntypedObject.

>> ParseJSON("2")%
0.02

>> ParseJSON("1.0000000000000000000000001")%
0.010000000000000000000000001

>> ParseJSON("2")% * 1.0000000000000000000000001
0.020000000000000000000000002

>> -ParseJSON("2")
-2

>> -ParseJSON("1.0000000000000000000000001")
-1.0000000000000000000000001

>> (-ParseJSON("2")) * 1.0000000000000000000000001
-2.0000000000000000000000002

>> ParseJSON("2") * 1.0000000000000000000000001
2.0000000000000000000000002

>> ParseJSON("2") / 1.0000000000000000000000001
1.9999999999999999999999998

>> ParseJSON("2") - 1.0000000000000000000000001
0.9999999999999999999999999

>> ParseJSON("2") + 1.0000000000000000000000001
3.0000000000000000000000001

>> ParseJSON("1") = 1.0000000000000000000000001 
false

>> ParseJSON("1") <> 1.0000000000000000000000001
true

>> ParseJSON("1") > 1.0000000000000000000000001 
false

>> ParseJSON("1") < 1.0000000000000000000000001
true

>> ParseJSON("1") >= 1.0000000000000000000000001 
false

>> ParseJSON("1") <= 1.0000000000000000000000001
true

>> ParseJSON("2") = 1.0000000000000000000000001 
false

>> ParseJSON("2") <> 1.0000000000000000000000001
true

>> ParseJSON("2") > 1.0000000000000000000000001 
true

>> ParseJSON("2") < 1.0000000000000000000000001
false

>> ParseJSON("2") >= 1.0000000000000000000000001 
true

>> ParseJSON("2") <= 1.0000000000000000000000001
false

// decimal op datetime -> number

>> 1.0000000000000000000000001 * Date(1900,1,1)
2.0000000000000000000000002

>> 1.0000000000000000000000001 / Date(1900,1,1)
0.50000000000000000000000005

// 1.0000000000000000000000001 - Date(1900,1,1)   // Decimal TODO: SubtractNumberAndDate in LibraryOperators.cs is unimplemented?  Works in Canvas?

>> 1.0000000000000000000000001 + Date(1900,1,1)
Date(1900,1,2)

>> 1.0000000000000000000000001 = Date(1900,1,1)
false

>> 1.0000000000000000000000001 <> Date(1900,1,1)
true

>> 1.0000000000000000000000001 > Date(1900,1,1)
false

>> 1.0000000000000000000000001 < Date(1900,1,1)
true

>> 1.0000000000000000000000001 >= Date(1900,1,1)
false

>> 1.0000000000000000000000001 <= Date(1900,1,1)
true

>> 1.0000000000000000000000001 = Date(1900,1,0)
false

>> 1.0000000000000000000000001 <> Date(1900,1,0)
true

>> 1.0000000000000000000000001 > Date(1900,1,0)
false

>> 1.0000000000000000000000001 < Date(1900,1,0)
false

>> 1.0000000000000000000000001 >= Date(1900,1,0)
true

>> 1.0000000000000000000000001 <= Date(1900,1,0)
true

>> Date(1900,1,1)%
0.02

>> Date(1900,1,1)% * 1.0000000000000000000000001
0.02

//-Date(1900,1,1) -- issue https://github.com/microsoft/Power-Fx/issues/1176

//(-Date(1900,1,1)) * 1.0000000000000000000000001 -- issue https://github.com/microsoft/Power-Fx/issues/1176

>> Date(1900,1,1) * 1.0000000000000000000000001
2.0000000000000000000000002

>> Date(1900,1,1) / 1.0000000000000000000000001
1.9999999999999999999999998

>> Date(1900,1,1) - 1.0000000000000000000000001
Date(1899,12,31)

>> Date(1900,1,1) + 1.0000000000000000000000001
Date(1900,1,2)

>> Date(1900,1,1) = 1.0000000000000000000000001 
false

>> Date(1900,1,1) <> 1.0000000000000000000000001
true

>> Date(1900,1,1) > 1.0000000000000000000000001 
true

>> Date(1900,1,1) < 1.0000000000000000000000001
false

>> Date(1900,1,1) >= 1.0000000000000000000000001 
true

>> Date(1900,1,1) <= 1.0000000000000000000000001
false

>> Date(1900,1,0) = 1.0000000000000000000000001 
false

>> Date(1900,1,0) <> 1.0000000000000000000000001
true

>> Date(1900,1,0) > 1.0000000000000000000000001 
false

>> Date(1900,1,0) < 1.0000000000000000000000001
false

>> Date(1900,1,0) >= 1.0000000000000000000000001 
true

>> Date(1900,1,0) <= 1.0000000000000000000000001
true

// decimal op datetime -> number

>> 1.0000000000000000000000001 * DateTime(1900,1,1,12,0,0)
2.50000000000000000000000025

>> 1.0000000000000000000000001 / DateTime(1900,1,1,12,0,0)
0.40000000000000000000000004

//1.0000000000000000000000001 - DateTime(1900,1,1,12,0,0)   // Decimal TODO: SubtractNumberAndDate in LibraryOperators.cs is unimplemented?  Works in Canvas?

>> 1.0000000000000000000000001 + DateTime(1900,1,1,12,0,0)
DateTime(1900,1,2,12,0,0,0)

>> DateTime(1900,1,1,12,0,0)%
0.025

>> DateTime(1900,1,1,12,0,0)% * 1.0000000000000000000000001
0.025

//-DateTime(1900,1,1,12,0,0) -- issue https://github.com/microsoft/Power-Fx/issues/1176

// (-DateTime(1900,1,1,12,0,0)) * 1.0000000000000000000000001 -- issue https://github.com/microsoft/Power-Fx/issues/1176

>> DateTime(1900,1,1,12,0,0) * 1.0000000000000000000000001
2.50000000000000000000000025

>> DateTime(1900,1,1,12,0,0) / 1.0000000000000000000000001
2.49999999999999999999999975

>> DateTime(1900,1,1,12,0,0) - 1.0000000000000000000000001
DateTime(1899,12,31,12,0,0,0)

>> DateTime(1900,1,1,12,0,0) + 1.0000000000000000000000001
DateTime(1900,1,2,12,0,0,0)

>> DateTime(1900,1,1,0,0,0) = 1.0000000000000000000000001 
false

>> DateTime(1900,1,1,0,0,0) <> 1.0000000000000000000000001
true

>> DateTime(1900,1,1,0,0,0) > 1.0000000000000000000000001 
true

>> DateTime(1900,1,1,0,0,0) < 1.0000000000000000000000001
false

>> DateTime(1900,1,1,0,0,0) >= 1.0000000000000000000000001 
true

>> DateTime(1900,1,1,0,0,0) <= 1.0000000000000000000000001
false

>> DateTime(1900,1,0,0,0,0) = 1.0000000000000000000000001 
false

>> DateTime(1900,1,0,0,0,0) <> 1.0000000000000000000000001
true

>> DateTime(1900,1,0,0,0,0) > 1.0000000000000000000000001 
false

>> DateTime(1900,1,0,0,0,0) < 1.0000000000000000000000001
false

>> DateTime(1900,1,0,0,0,0) >= 1.0000000000000000000000001 
true

>> DateTime(1900,1,0,0,0,0) <= 1.0000000000000000000000001
true

// decimal op blank -> decimal

>> 1.0000000000000000000000001 * Blank()
0

>> 1.0000000000000000000000001 / Blank()
Error({Kind:ErrorKind.Div0})

>> 1.0000000000000000000000001 - Blank()
1.0000000000000000000000001

>> 1.0000000000000000000000001 + Blank()
1.0000000000000000000000001

>> Blank()%
0

>> Blank()% + 1.0000000000000000000000001
1.0000000000000000000000001

>> -Blank()
0

>> (-Blank()) + 1.0000000000000000000000001 
1.0000000000000000000000001

>> Blank() * 1.0000000000000000000000001
0

>> Blank() / 1.0000000000000000000000001
0

>> Blank() - 1.0000000000000000000000001
-1.0000000000000000000000001

>> Blank() + 1.0000000000000000000000001
1.0000000000000000000000001

>> Blank() = 1.0000000000000000000000001 
false

>> Blank() <> 1.0000000000000000000000001
true

>> Blank() > 1.0000000000000000000000001 
false

>> Blank() < 1.0000000000000000000000001
true

>> Blank() >= 1.0000000000000000000000001 
false

>> Blank() <= 1.0000000000000000000000001
true

>> Blank() = 0.0000000000000000000000001 
false

>> Blank() <> 0.0000000000000000000000001
true

>> Blank() > 0.0000000000000000000000001 
false

>> Blank() < 0.0000000000000000000000001
true

>> Blank() >= 0.0000000000000000000000001 
false

>> Blank() <= 0.0000000000000000000000001
true

>> Blank() = 0
false

>> Blank() <> 0
true

>> Blank() > 0
false

>> Blank() < 0
false

>> Blank() >= 0
true

>> Blank() <= 0
true

// scientific notation works with decimal, does not imply floating point

>> 1.000000000000000000000001e2 + 1
101.0000000000000000000001

>> 1 + 1.000000000000000000000001e2
101.0000000000000000000001

