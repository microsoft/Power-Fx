#SETUP: NumberIsFloat

// Float() has been replaced with Value() for PA client compatibility.  
// When in NumberIsFloat mode, Value and Float functions are effectively the same.

// DIVIDE

// In these tests, 1E100 or some other very large/small number is used to test floating point results which decimal can not represent, 
// and a highly precise number is used for decimal, such as 2.00000000000000000000000000002 that would be rounded in floating point.
// For example, if a decimal test results with 25+ signficant digits results in 2, then an inappropriate conversion to floating point was made.

// The expected results matrix, also in BinderUtils.cs:
//
// Non NumberIsFloat (no flag)                     NumberIsFloat
//  *, /  | n  s  b  N  D  d  T  w  O  (right)       *, / | n  s  b  N  D  d  T  w  O  (right)
// =======|====================================    =======|====================================
//      n | n  n  n  n  n  n  n  n  n                   n | n  n  n  n  n  n  n  n  n 
//      s | n  w  w  w  w  w  w  w  w                   s | n  n  n  n  n  n  n  n  n 
//      b | n  w  w  w  w  w  w  w  w                   b | n  n  n  n  n  n  n  n  n 
//      N | n  w  w  w  w  w  w  w  w                   N | n  n  n  n  n  n  n  n  n 
//      D | n  w  w  w  w  w  w  w  w                   D | n  n  n  n  n  n  n  n  n  
//      d | n  w  w  w  w  w  w  w  w                   d | n  n  n  n  n  n  n  n  n  
//      T | n  w  w  w  w  w  w  w  w                   T | n  n  n  n  n  n  n  n  n  
//      w | n  w  w  w  w  w  w  w  w                   w | n  n  n  n  n  n  n  w  n 
//      O | n  w  w  w  w  w  w  w  w                   O | n  n  n  n  n  n  n  n  n 
// (left) |                                        (left) |

// Float

>> Value(16)/Value(2)
8

>> Value("1e100")/Value(2)
5E+99

>> Value(16)/"2"
8

>> Value("1e100")/"2"
5E+99

>> Value(16)/true
16

>> Value("1e100")/true
1E+100

>> Value(16)/Blank()
Error({Kind:ErrorKind.Div0})

>> Value("1e100")/Blank()
Error({Kind:ErrorKind.Div0})

>> Value(Date(2000,1,1))
36526

>> Value(365260000)/Date(2000,1,1)
10000

>> Value(DateTime(2000,1,1,12,0,0))
36526.5

>> Value(365265000)/DateTime(2000,1,1,12,0,0)
10000

>> Value(Time(12,0,0))
0.5

>> Value(16)/Time(12,0,0)
32

>> Value(16)/ParseJSON("2")
8

>> Value(16)/ParseJSON("1e100")
1.6E-99

>> Value("1e100")/ParseJSON("2")
5E+99

>> Value("1e100")/ParseJSON("1e100")
1

// Text

>> "16"/Value(2)
8

>> "1e100"/Value(2)
5E+99

>> "16"/"2"
8

>> "16"/"2.00000000000000000000000002"
8

>> "1e100"/"2"
5E+99

>> "16"/true
16

>> "1e100"/true
1E+100

>> "16"/Blank()
Error({Kind:ErrorKind.Div0})

>> "1e100"/Blank()
Error({Kind:ErrorKind.Div0})

>> "365260000"/Date(2000,1,1)
10000

>> "365265000"/DateTime(2000,1,1,12,0,0)
10000

>> "16"/Time(12,0,0)
32

>> "16"/ParseJSON("2")
8

>> "1e100"/ParseJSON("1e100")
1

>> "1e100"/ParseJSON("2")
5E+99

// Boolean

>> true/Value(2)
0.5

>> true/Value("1e100")
1E-100

>> true/"2"
0.5

>> true/"1E+100"
1E-100

>> true/true
1

>> true/Blank()
Error({Kind:ErrorKind.Div0})

>> true/Date(1927,5,18)
0.0001

>> true/DateTime(1927,5,18,0,0,0)
0.0001

>> true/Time(12,0,0)
2

>> true/ParseJSON("2")
0.5

>> true/ParseJSON("1e100")
1E-100

// Blank

>> Blank()/Value(2)
0

>> Blank()/Value("1e100")
0

>> Blank()/"2"
0

>> Blank()/"1e100"
0

>> Blank()/true
0

>> Blank()/Blank()
Error({Kind:ErrorKind.Div0})

>> Blank()/Date(2000,1,1)
0

>> Blank()/DateTime(2000,1,1,12,0,0)
0

>> Blank()/Time(12,0,0)
0

>> Blank()/ParseJSON("2")
0

>> Blank()/ParseJSON("1e100")
0

// Date

>> Date(2000,1,1)/Value(2)
18263

>> Date(2000,1,1)/"2"
18263

>> Date(2000,1,1)/true
36526

>> Date(2000,1,1)/Blank()
Error({Kind:ErrorKind.Div0})

>> Date(1954,10,3)/Date(1927,5,18)
2

>> Date(1954,10,3)/Date(1900,1,1)
10000

>> Date(1954,10,3)/DateTime(1927,5,18,0,0,0)
2

>> Date(2000,1,1)/Time(12,0,0)
73052

>> Date(2000,1,1)/ParseJSON("2")
18263

>> Date(2000,1,1)/ParseJSON("1e100")
3.6526E-96

// DateTime

>> DateTime(2000,1,1,12,0,0)/Value(2)
18263.25

>> DateTime(2000,1,1,12,0,0)/"2"
18263.25

>> DateTime(2000,1,1,12,0,0)/true
36526.5

>> DateTime(2000,1,1,12,0,0)/Blank()
Error({Kind:ErrorKind.Div0})

>> DateTime(1954,10,3,0,0,0)/Date(1927,5,18)
2

>> DateTime(1954,10,3,0,0,0)/Date(1900,1,1)
10000

>> DateTime(1954,10,3,0,0,0)/DateTime(1927,5,18,0,0,0)
2

>> DateTime(1954,10,3,0,0,0)/DateTime(1900,1,1,12,0,0)
8000

>> DateTime(2000,1,1,12,0,0)/Time(12,0,0)
73053

>> DateTime(2000,1,1,12,0,0)/ParseJSON("2")
18263.25

>> DateTime(2000,1,1,12,0,0)/ParseJSON("1e100")
3.65265E-96

// Time

>> Time(9,0,0)/Value(0.125)
3

>> Time(9,0,0)/"0.125"
3

>> Time(9,0,0)/true
0.375

>> Time(9,0,0)/Blank()
Error({Kind:ErrorKind.Div0})

>> Time(9,0,0)/Time(6,0,0)
1.5

>> Time(9,0,0)/Date(1900,1,2)
0.125

>> 1+(Time(9,0,0)/Date(1900,1,11)/1e20)
1

>> Time(9,0,0)/Time(12,0,0)
0.75

>> 1+(Time(9,0,0)/Time(12,0,0)/1e20)
1

>> Time(9,0,0)/ParseJSON("2")
0.1875

>> Time(9,0,0)/ParseJSON("1e100")
3.75E-101

// Untyped

>> ParseJSON("16.00000000000000000000001")/Value(2)
8

>> ParseJSON("1e100")/Value(2)
5E+99

>> ParseJSON("16.00000000000000000000001")/"2"
8

>> ParseJSON("1e100")/"2"
5E+99

>> ParseJSON("16.000000000000000000000001")/true
16

>> ParseJSON("1e100")/true
1E+100

>> ParseJSON("16.000000000000000000000001")/Blank()
Error({Kind:ErrorKind.Div0})

>> ParseJSON("1e100")/Blank()
Error({Kind:ErrorKind.Div0})

>> ParseJSON("16.0000000000000000000001")/Date(1900,1,7)
2

>> ParseJSON("1e100")/Date(1900,1,7)
1.25E+99

>> ParseJSON("16.0000000000000000000001")/DateTime(1900,1,1,12,0,0)
6.4

>> ParseJSON("16e100")/DateTime(1900,1,1,12,0,0)
6.4E+100

>> ParseJSON("16.000000000000000000001")/Time(12,0,0)
32

>> ParseJSON("1e100")/Time(12,0,0)
2E+100

>> ParseJSON("16.000000000000000000000002")/ParseJSON("2")
8

>> ParseJSON("1e100")/ParseJSON("2")
5E+99

>> ParseJSON("16.000000000000000000000002")/ParseJSON("1e100")
1.6E-99

>> ParseJSON("1e100")/ParseJSON("1e100")
1

>> ParseJSON("1e100")/ParseJSON("1e110")
1E-10
