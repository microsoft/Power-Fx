>> Time(1, 2, 3)
Time(1,2,3,0)

>> Time(12, 23, 34, 456)
Time(12,23,34,456)

// Result of Time function should be between 00:00:00.000 and 23:59:59.999
>> Time(30, 0, 0)
Time(6,0,0,0)

>> Hour(Time(1, 2, 3))
1

>> Minute(Time(1, 2, 3))
2

>> Second(Time(1, 2, 3))
3

>> Time(1/0, 2, 3)
Error({Kind:ErrorKind.Div0})

>> Time(8,1,15) < Time(8,1,30)
true

>> Time(8,1,15) < Time(8,1,15)
false

>> Time(8,1,15) <= Time(8,1,30)
true

>> Time(8,1,15) <= Time(8,1,15)
true

>> Time(8,1,30) < Time(8,1,15)
false

>> Time(8,1,30) <= Time(8,1,15)
false

>> Time(8,1,15) > Time(8,1,30)
false

>> Time(8,1,15) > Time(8,1,15)
false

>> Time(8,1,15) >= Time(8,1,30)
false

>> Time(8,1,15) >= Time(8,1,15)
true

>> Time(8,1,30) > Time(8,1,15)
true

>> Time(8,1,30) >= Time(8,1,15)
true

>> Time(Blank(), 2, 3) < Time(8,1,30)
true

>> Time(Blank(), 2, 3) <= Time(8,1,30)
true

>> Time(Blank(), 2, 3) > Time(8,1,30)
false

>> Time(Blank(), 2, 3) >= Time(8,1,30)
false

>> Time(1/0, 2, 3) < Time(8,1,30)
Error({Kind:ErrorKind.Div0})

// Date <-> Time comparison is supported for back compat reasons
// It's handled by promoting Times to DateTimes on the day of the epoch, and comparing using that.

>> Date( 2019, 5, 16 ) > Time( 11, 23, 45 )
true

>> Time( 11, 23, 45 ) > Date( 2019, 5, 16 )
false

>> Date(1899, 12, 30) < Time(12,0,0)
true

>> Time(1/0, 2, 3) <= Time(8,1,30)
Error({Kind:ErrorKind.Div0})

>> Time(1/0, 2, 3) > Time(8,1,30)
Error({Kind:ErrorKind.Div0})

>> Time(1/0, 2, 3) >= Time(8,1,30)
Error({Kind:ErrorKind.Div0})

>> Text(Time(10, 70, 360), "HH:mm:ss")
"11:16:00"

>> Text(Time(10, -30, 360), "HH:mm:ss")
"09:36:00"

>> Text(Time(10, 30, -360), "HH:mm:ss")
"10:24:00"

>> Text(Time(10, -30, -360), "HH:mm:ss")
"09:24:00"

>> Text(Time(23, 59, 59, 999), "HH:mm:ss.fff")
"23:59:59.fff"

>> Date(2011, 2, 3) + Time(1, 2, 3)
DateTime(2011,2,3,1,2,3,0)

>> Time(1, 2, 3) + Date(2011, 2, 3)
DateTime(2011,2,3,1,2,3,0)

>> Year(Date(2011, 2, 3) + Time(1, 2, 3))
2011

>> Month(Date(2011, 2, 3) + Time(1, 2, 3))
2

>> Day(Date(2011, 2, 3) + Time(1, 2, 3))
3

>> Hour(Date(2011, 2, 3) + Time(1, 2, 3))
1

>> Minute(Date(2011, 2, 3) + Time(1, 2, 3))
2

>> Second(Date(2011, 2, 3) + Time(1, 2, 3))
3

>> Year(Time(1, 2, 3) + Date(2011, 2, 3))
2011

>> Month(Time(1, 2, 3) + Date(2011, 2, 3))
2

>> Day(Time(1, 2, 3) + Date(2011, 2, 3))
3

>> Hour(Time(1, 2, 3) + Date(2011, 2, 3))
1

>> Minute(Time(1, 2, 3) + Date(2011, 2, 3))
2

>> Second(Time(1, 2, 3) + Date(2011, 2, 3))
3

// *********** OPERATIONS WITH TIMES  *************

>> Time(2,0,0) + Time(2,0,0)
Time(4,0,0,0)

>> Time(12,50,45,950) + Time(6,15,35,750)
Time(19,6,21,700)

>> If(1<0,Time(2,0,0)) + Time(3,0,0)
Time(3,0,0,0)

>> Time(2,0,0) + If(1<0,Time(3,0,0))
Time(2,0,0,0)

>> Time(2,0,0) + 0.5
Time(14,0,0,0)

>> Time(18,0,0) + 0.5
Time(6,0,0,0)

>> Time(18,0,0) - 0.5
Time(6,0,0,0)

>> Time(18,0,0) - 0.25
Time(12,0,0,0)

>> 0.25 + Time(2,0,0)
Time(8,0,0,0)

>> Time(18,30,0) - Time(6,30,0)
0.5

>> Time(18,0,0) - If(1<0,Time(6,30,0))
0.75

>> If(1<0,Time(18,0,0)) - Time(12,0,0)
-0.5

>> Date(2022, 9, 8) + Time(12, 34, 56)
DateTime(2022,9,8,12,34,56,0)

>> Time(12, 34, 56) + Date(2022, 9, 8)
DateTime(2022,9,8,12,34,56,0)

>> DateTime(2022, 9, 8, 1, 1, 1, 1) + Time(12, 34, 56)
DateTime(2022,9,8,13,35,57,1)

>> Time(12, 34, 56) + DateTime(2022, 9, 8, 1, 1, 1, 1)
DateTime(2022,9,8,13,35,57,1)

>> Date(2022,1,1) + 2.5
Date(2022,1,3)

>> Date(2022,1,1) + 2.5 + 0.5
Date(2022,1,4)

>> 2.5 + Date(2022,1,1)
Date(2022,1,3)

>> 2.5 + Date(2022,1,1) + 1.75
Date(2022,1,5)

>> Time(12,0,0) - Date(2022,10,10)
Errors: Error 13-14: This operation isn't valid on these types: Time, Date.

>> Time(12,0,0) - DateTime(2022,10,10,0,0,0)
Errors: Error 13-14: This operation isn't valid on these types: Time, DateTime.

>> 0 - Time(2,30,45)
Error({Kind:ErrorKind.NotSupported})

// *********** COMPONENTS FROM OVERFLOWS **********
>> Hour(Time(26,90,90))
3

>> Minute(Time(26,90,90))
31

>> Second(Time(26,90,90,5500))
35

>> Hour(DateTime(2000,15,40,26,90,90))
3

>> Minute(DateTime(2000,15,40,26,90,90))
31

>> Second(DateTime(2000,15,40,26,90,90,5500))
35

>> Hour(Time(12,50,45,950) + Time(6,15,35,750))
19

>> Minute(Time(12,50,45,950) + Time(6,15,35,750))
6

>> Second(Time(12,50,45,950) + Time(6,15,35,750))
21

// ********** COMPONENTS FROM UNDERFLOWS **********
>> Hour(Time(4,-90,-90))
2

>> Minute(Time(4,-90,-90))
28

>> Second(Time(4,-90,-90))
30

>> Hour(DateTime(2000,15,10,-4,-300,-300,-30000))
14

>> Minute(DateTime(2000,15,10,-4,-300,-300,-30000))
54

>> Second(DateTime(2000,15,10,-4,-300,-300,-30000))
30

// ************** BLANK AND ERRORS ****************
>> Time(Blank(), 34, 56)
Time(0,34,56,0)

>> Time(12, Blank(), 56)
Time(12,0,56,0)

>> Time(12, 34, Blank())
Time(12,34,0,0)

>> Time(12, 34, 56, Blank())
Time(12,34,56,0)

>> Hour(If(1<0,Time(1,1,1)))
0

>> Hour(If(1<0,DateTime(2000,1,1,1,1,1)))
0

>> Minute(If(1<0,Time(1,1,1)))
0

>> Minute(If(1<0,DateTime(2000,1,1,1,1,1)))
0

>> Second(If(1<0,Time(1,1,1)))
0

>> Second(If(1<0,DateTime(2000,1,1,1,1,1)))
0

>> Time(1/0, 34, 56)
Error({Kind:ErrorKind.Div0})

>> Time(12, Sqrt(-1), 56)
Error({Kind:ErrorKind.Numeric})

>> Time(12, 34, 2/0)
Error({Kind:ErrorKind.Div0})

>> Time(12, 34, 56, Sqrt(-1))
Error({Kind:ErrorKind.Numeric})

>> Time(Sqrt(-2), 34, 2/0)
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Div0}))

>> Hour(If(1/0<2,Time(1,1,1)))
Error({Kind:ErrorKind.Div0})

>> Hour(If(Sqrt(-1)<0,DateTime(2000,1,1,1,1,1)))
Error({Kind:ErrorKind.Numeric})

>> Minute(If(Sqrt(-1)<0,Time(1,1,1)))
Error({Kind:ErrorKind.Numeric})

>> Minute(If(1/0>2,DateTime(2000,1,1,1,1,1)))
Error({Kind:ErrorKind.Div0})

>> Second(If(10/0>0,Time(1,1,1)))
Error({Kind:ErrorKind.Div0})

>> Second(If(Sqrt(-1)<0,DateTime(2000,1,1,1,1,1)))
Error({Kind:ErrorKind.Numeric})

// ********** COERCION CASES **************

// String to number
>> Time("22", "11", "45","3")
Time(22,11,45,3)

// Boolean to number
>> Time(false, true, false, true)
Time(0,1,0,1)

// String to time, hour
>> Hour("12:34:56")
12

// String to time, minute
>> Minute("12:34:56")
34

// String to time, second
>> Second("12:34:56")
56

// Number to time, hour
>> Hour(12345.5)
12

// Number to time, minute
>> Minute(12345.0625)
30

// Number to time, second
>> Second(12345.77)
48

// Boolean to time, should fail
>> Hour(true)
Errors: Error 5-9: Invalid argument type (Boolean). Expecting a DateTime value instead.

>> Minute(true)
Errors: Error 7-11: Invalid argument type (Boolean). Expecting a DateTime value instead.

>> Second(true)
Errors: Error 7-11: Invalid argument type (Boolean). Expecting a DateTime value instead.

>> TimeValue("11:12:00.000")
Time(11,12,0,0)

>> TimeValue("11:12:00")
Time(11,12,0,0)

>> TimeValue("11:12:00.1234567")
Time(11,12,0,123)
