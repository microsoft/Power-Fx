// ******** NUMBER COLUMNS ********

>> Sort([-2, -1, 5, 1, 2], Value)
Table({Value:-2},{Value:-1},{Value:1},{Value:2},{Value:5})

>> Sort([-2, -1, 5, 1, 2], Value, SortOrder.Descending)
Table({Value:5},{Value:2},{Value:1},{Value:-1},{Value:-2})

>> Sort([-2, Blank(), 5, 1, 2], Value)
Table({Value:-2},{Value:1},{Value:2},{Value:5},{Value:Blank()})

>> Sort([-2, Blank(), 5, 1, 2], Value, SortOrder.Descending)
Table({Value:5},{Value:2},{Value:1},{Value:-2},{Value:Blank()})

>> Sort([-2, -1, 0, 1, 2], 1 / Value)
Error({Kind:ErrorKind.Div0})

>> Sort(Table({a:8, b:-1}, {a:2}, {b:5}), a)
Table({a:2,b:Blank()},{a:8,b:-1},{a:Blank(),b:5})

>> Sort(Table({a:8, b:-1}, {a:2}, {b:5}), b, SortOrder.Descending)
Table({a:Blank(),b:5},{a:8,b:-1},{a:2,b:Blank()})

// ******** STRING COLUMNS ********

>> Sort(["a", "b", "D", "x", "J", "C"], Value)
Table({Value:"a"},{Value:"b"},{Value:"C"},{Value:"D"},{Value:"J"},{Value:"x"})

>> Sort(["a", "b", "D", "x", "J", "C"], Value, SortOrder.Descending)
Table({Value:"x"},{Value:"J"},{Value:"D"},{Value:"C"},{Value:"b"},{Value:"a"})

>> Sort(["a", "b", Blank(), "x", "J", "C"], Value)
Table({Value:"a"},{Value:"b"},{Value:"C"},{Value:"J"},{Value:"x"},{Value:Blank()})

>> Sort(["a", "b", Blank(), "x", "J", "C"], Value, SortOrder.Descending)
Table({Value:"x"},{Value:"J"},{Value:"C"},{Value:"b"},{Value:"a"},{Value:Blank()})

>> Sort(["Hello", "hellO", "hello", "heLLo", "HELLO", "hElLo"], Value)
Table({Value:"hello"},{Value:"hellO"},{Value:"heLLo"},{Value:"hElLo"},{Value:"Hello"},{Value:"HELLO"})

>> Sort(["Hello", "hellO", "1", "%", "2", "hElLo"], Value)
Table({Value:"%"},{Value:"1"},{Value:"2"},{Value:"hellO"},{Value:"hElLo"},{Value:"Hello"})

// ******** BOOLEAN COLUMNS ********

>> Sort([true,false,true,false,true], Value)
Table({Value:false},{Value:false},{Value:true},{Value:true},{Value:true})

>> Sort([true,false,true,false,true], Value, SortOrder.Descending)
Table({Value:true},{Value:true},{Value:true},{Value:false},{Value:false})

>> Sort([true,false,Blank(),false,true], Value)
Table({Value:false},{Value:false},{Value:true},{Value:true},{Value:Blank()})

>> Sort([true,false,Blank(),false,true], Value, SortOrder.Descending)
Table({Value:true},{Value:true},{Value:false},{Value:false},{Value:Blank()})

// ******** DATE/TIME COLUMNS ********

>> Sort([Date(2020, 01, 05), Date(2020, 01, 01), Date(1995, 01, 01)], Value)
Table({Value:Date(1995,1,1)},{Value:Date(2020,1,1)},{Value:Date(2020,1,5)})

>> Sort([Date(2020, 01, 05), Date(2020, 01, 01), Date(1995, 01, 01)], Value, SortOrder.Descending)
Table({Value:Date(2020,1,5)},{Value:Date(2020,1,1)},{Value:Date(1995,1,1)})

// ******** TIME COLUMNS ********

>> Sort([Time(12,35,55), Time(23, 01, 01), Time(5,30,50)], Value)
Table({Value:Time(5,30,50,0)},{Value:Time(12,35,55,0)},{Value:Time(23,1,1,0)})

>> Sort([Time(12,35,55), Time(23, 01, 01), Time(5,30,50)], Value, SortOrder.Descending)
Table({Value:Time(23,1,1,0)},{Value:Time(12,35,55,0)},{Value:Time(5,30,50,0)})

>> Sort([Time(17,29,0), Blank(), Time(5,30,50)], Value)
Table({Value:Time(5,30,50,0)},{Value:Time(17,29,0,0)},{Value:Blank()})

// ******** DATETIME COLUMNS ********

>> Sort([DateTime(2019,5,16,8,0,0), DateTime(2019,5,16,20,0,0), DateTime(2019,5,16,20,0,1)], Value)
Table({Value:DateTime(2019,5,16,8,0,0,0)},{Value:DateTime(2019,5,16,20,0,0,0)},{Value:DateTime(2019,5,16,20,0,1,0)})

>> Sort([DateTime(2019,5,16,8,0,0), DateTime(2019,5,16,20,0,0), DateTime(2019,5,16,20,0,1)], Value, SortOrder.Descending)
Table({Value:DateTime(2019,5,16,20,0,1,0)},{Value:DateTime(2019,5,16,20,0,0,0)},{Value:DateTime(2019,5,16,8,0,0,0)})

>> First(LastN(Sort([-2, -1, 0, 1, 2], 1 / Value), 3)).Value
Error({Kind:ErrorKind.Div0})

// ******** NULL and ERROR PARAMETERS ********

>> Sort([-2, -1, 5, 1, 2], 1/0, SortOrder.Descending)
Error({Kind:ErrorKind.Div0})

//Error passed as one of the table records
>> Sort([-2, -1, 5, 1/0, 2], Value)
Error({Kind:ErrorKind.Div0})

>> Sort(["a", "b", "D", "x", "J", Error({Kind: 11})], Value)
Error({Kind:ErrorKind.Validation})

>> Sort([1/0], Blank())
Table({Value:Error({Kind:ErrorKind.Div0})})

// Sort error with bool value as sort formula
>> Sort([1/0],true)
Table({Value:Error({Kind:ErrorKind.Div0})})

//Empty table and Blank sort formula parameter
>> Sort([], Blank())
Table()

//Empty table and Error sort formula parameter
>> Sort([], 1/0)
Table()

//Empty table and Numeric sort formula parameter
>> Sort([], 1)
Table()

//Empty table and String sort formula parameter
>> Sort([], "Hello")
Table()

// ERROR HANDLED IN SORT FORMULA
>> Sort([10, 2, 30, Sqrt(-1), 4, 1/0, 50], IfError(Value, -FirstError.Kind))
Table({Value:Error({Kind:ErrorKind.Numeric})},{Value:Error({Kind:ErrorKind.Div0})},{Value:2},{Value:4},{Value:10},{Value:30},{Value:50})

// ERROR PASSED AS SORT FORMULA

>> Sort(Table(
  { First: "Bob", Last: Blank(), Age: 2, Gender: "Male", Vaccinated: true, HasDog: true },
  { First: "Alice", Last: "Smith", Age: 5, Gender: "Female", Vaccinated: true, HasDog: true },
  { First: "Liam", Last: "Clark", Age: Blank(), Gender: "Male", Vaccinated: Blank(), HasDog: Blank() },
  { First: Blank(), Last: "Allen", Age: Blank(), Gender: "Male", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Fiona", Last: "Brown", Age: Blank(), Gender: "Female", Vaccinated: Blank(), HasDog: Blank() },
  { First: "John", Last: "Batali", Age: 17, Gender: "Male", Vaccinated: false, HasDog: false },
  { First: "Emily", Last: "Jones", Age: 29, Gender: "Female", Vaccinated: true, HasDog: Blank() },
  { First: "Helio", Last: Blank(), Age: 63, Gender: "Unknown", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Mary", Last: "Harris", Age: 48, Gender: "Female", Vaccinated: false, HasDog: false },
  { First: "Titan", Last: Blank(), Age: 79, Gender: "Unknown", Vaccinated: Blank(), HasDog: Blank() },
  { First: Blank(), Last: "Walker", Age: Blank(), Gender: "Male", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Andrew", Last: "Lee", Age: 27, Gender: "Male", Vaccinated: true, HasDog: false },
  { First: "Nizam", Last: "Lewis", Age: 32, Gender: "Male", Vaccinated: true, HasDog: false },
  { First: "Amelia", Last: "Bedelia", Age: 40, Gender: "Female", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Dora", Last: "TheExplorer", Age: 4, Gender: "Female", Vaccinated: Blank(), HasDog: true },
  { First: "Maria", Last: "Martinez", Age: 20, Gender: "Female", Vaccinated: true, HasDog: false },
  { First: "Ivor", Last: Blank(), Age: Blank(), Gender: "Female", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Jaideep", Last: "Lopez", Age: 29, Gender: "Male", Vaccinated: true, HasDog: false }), 1/0)
Error({Kind:ErrorKind.Div0})

// SORT FORMULA - IF VACCINATED=TRUE, PASS ERROR AS THE SORT PARAMETER

>> Sort(Table(
  { First: "Bob", Last: Blank(), Age: 2, Gender: "Male", Vaccinated: true, HasDog: true },
  { First: "Alice", Last: "Smith", Age: 5, Gender: "Female", Vaccinated: true, HasDog: true },
  { First: "Liam", Last: "Clark", Age: Blank(), Gender: "Male", Vaccinated: Blank(), HasDog: Blank() },
  { First: Blank(), Last: "Allen", Age: Blank(), Gender: "Male", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Fiona", Last: "Brown", Age: Blank(), Gender: "Female", Vaccinated: Blank(), HasDog: Blank() },
  { First: "John", Last: "Batali", Age: 17, Gender: "Male", Vaccinated: false, HasDog: false },
  { First: "Emily", Last: "Jones", Age: 29, Gender: "Female", Vaccinated: true, HasDog: Blank() },
  { First: "Helio", Last: Blank(), Age: 63, Gender: "Unknown", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Mary", Last: "Harris", Age: 48, Gender: "Female", Vaccinated: false, HasDog: false },
  { First: "Titan", Last: Blank(), Age: 79, Gender: "Unknown", Vaccinated: Blank(), HasDog: Blank() },
  { First: Blank(), Last: "Walker", Age: Blank(), Gender: "Male", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Andrew", Last: "Lee", Age: 27, Gender: "Male", Vaccinated: true, HasDog: false },
  { First: "Nizam", Last: "Lewis", Age: 32, Gender: "Male", Vaccinated: true, HasDog: false },
  { First: "Amelia", Last: "Bedelia", Age: 40, Gender: "Female", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Dora", Last: "TheExplorer", Age: 4, Gender: "Female", Vaccinated: Blank(), HasDog: true },
  { First: "Maria", Last: "Martinez", Age: 20, Gender: "Female", Vaccinated: true, HasDog: false },
  { First: "Ivor", Last: Blank(), Age: Blank(), Gender: "Female", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Jaideep", Last: "Lopez", Age: 29, Gender: "Male", Vaccinated: true, HasDog: false }), If(Vaccinated=true,1/0))
Error({Kind:ErrorKind.Div0})

// SORT ON TABLE WITH ERROR VALUES FOR SOME COLUMNS - ASCENDING ORDER

>> Sort(Table(
  { First: "Bob", Last: "Smith", Age: 2, Gender: "Male", Vaccinated: true, HasDog: true },
  { First: "Alice", Last: "Smith", Age: 5, Gender: "Female", Vaccinated: true, HasDog: true },
  { First: "John", Last: "Batali", Age: 17, Gender: "Male", Vaccinated: false, HasDog: false },
  { First: "Emily", Last: "Jones", Age: 29, Gender: "Female", Vaccinated: true, HasDog: Blank() },
  { First: "Helio", Last: Left("Hello", -1), Age: 263, Gender: "Unknown", Vaccinated: Blank(), HasDog: Blank() },
  { First: "Mary", Last: "Harris", Age: 48, Gender: "Female", Vaccinated: false, HasDog: false },
  { First: "Titan", Last: Left("Hello", -1), Age: 792, Gender: "Unknown", Vaccinated: Blank(), HasDog: Blank() }),Last)
Error({Kind:ErrorKind.InvalidArgument})

// SORT HIERARCHICAL DATA ON BOOL EXPRESSION - DESCENDING ORDER 

>> Sort(Table(
  { First: "Bob", Age: 2, Properties: { Vaccinated: true, HasDog: true }},
  { First: "Alice", Age: 5, Properties: { Vaccinated: true, HasDog: true }},
  { First: "John", Age: 17, Properties: { Vaccinated: false, HasDog: false }},
  { First: "Emily", Age: 29, Properties: { Vaccinated: true, HasDog: Blank() }},
  { First: "Helio", Age: 63, Properties: { Vaccinated: Blank(), HasDog: Blank() }},
  { First: "Mary", Age: 48, Properties: Blank()},
  { First: "Titan", Age: 79, Properties: Blank() }),Properties.HasDog, SortOrder.Descending)
Table({Age:2,First:"Bob",Properties:{HasDog:true,Vaccinated:true}},{Age:5,First:"Alice",Properties:{HasDog:true,Vaccinated:true}},{Age:17,First:"John",Properties:{HasDog:false,Vaccinated:false}},{Age:29,First:"Emily",Properties:{HasDog:Blank(),Vaccinated:true}},{Age:63,First:"Helio",Properties:{HasDog:Blank(),Vaccinated:Blank()}},{Age:48,First:"Mary",Properties:Blank()},{Age:79,First:"Titan",Properties:Blank()})

// SORT HIERARCHICAL DATA ON STRING EXPRESSION - ASCENDING ORDER 

>> Sort(Table(
  { First: "Bob", Age: 2, Properties: { Last: "Smith", Vaccinated: true, HasDog: true }},
  { First: "Alice", Age: 5, Properties: { Last: "Miller", Vaccinated: true, HasDog: true }},
  { First: "John", Age: 17, Properties: { Last:"Jones", Vaccinated: false, HasDog: false }},
  { First: "Emily", Age: 29, Properties: { Last:"Harris", Vaccinated: true, HasDog: Blank() }},
  { First: "Helio", Age: 63, Properties: { Last:"Miller", Vaccinated: Blank(), HasDog: Blank() }},
  { First: "Mary", Age: 48, Properties: Blank()},
  { First: "Titan", Age: 79, Properties: Blank() }),Properties.Last)
Table({Age:29,First:"Emily",Properties:{HasDog:Blank(),Last:"Harris",Vaccinated:true}},{Age:17,First:"John",Properties:{HasDog:false,Last:"Jones",Vaccinated:false}},{Age:5,First:"Alice",Properties:{HasDog:true,Last:"Miller",Vaccinated:true}},{Age:63,First:"Helio",Properties:{HasDog:Blank(),Last:"Miller",Vaccinated:Blank()}},{Age:2,First:"Bob",Properties:{HasDog:true,Last:"Smith",Vaccinated:true}},{Age:48,First:"Mary",Properties:Blank()},{Age:79,First:"Titan",Properties:Blank()})

// SORT HIERARCHICAL DATA ON STRING EXPRESSION - DESCENDING ORDER 

>> Sort(Table(
  { First: "Bob", Age: 2, Properties: { Last: "Smith", Vaccinated: true, HasDog: true }},
  { First: "Alice", Age: 5, Properties: { Last: "Miller", Vaccinated: true, HasDog: true }},
  { First: "John", Age: 17, Properties: { Last:"Jones", Vaccinated: false, HasDog: false }},
  { First: "Emily", Age: 29, Properties: { Last:"Harris", Vaccinated: true, HasDog: Blank() }},
  { First: "Helio", Age: 63, Properties: { Last:"Miller", Vaccinated: Blank(), HasDog: Blank() }},
  { First: "Mary", Age: 48, Properties: Blank()},
  { First: "Titan", Age: 79, Properties: Blank() }),Properties.Last, SortOrder.Descending)
Table({Age:2,First:"Bob",Properties:{HasDog:true,Last:"Smith",Vaccinated:true}},{Age:5,First:"Alice",Properties:{HasDog:true,Last:"Miller",Vaccinated:true}},{Age:63,First:"Helio",Properties:{HasDog:Blank(),Last:"Miller",Vaccinated:Blank()}},{Age:17,First:"John",Properties:{HasDog:false,Last:"Jones",Vaccinated:false}},{Age:29,First:"Emily",Properties:{HasDog:Blank(),Last:"Harris",Vaccinated:true}},{Age:48,First:"Mary",Properties:Blank()},{Age:79,First:"Titan",Properties:Blank()})
