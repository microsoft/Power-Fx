// Blank table
>> Distinct(If(1<0,[1,2]), true)
Blank()

// Empty table
>> Distinct(Filter([1,2,3],Value>10), true)
Table()

// Constant expressions
>> Distinct(Table({a:1,b:2},{a:3,b:4},{a:5,b:6}), true)
Table({Result:true})

>> Distinct(Table({a:1,b:2},{a:3,b:4},{a:5,b:6}), false)
Table({Result:false})

// Distinct values for a column
>> Distinct(Table({a:1,b:2},{a:3,b:4},{a:5,b:6}), a)
Table({Result:1},{Result:3},{Result:5})

// Distinct values for an expression
>> Distinct(Table({a:1,b:2},{a:3,b:4},{a:5,b:6}), a * 2)
Table({Result:2},{Result:6},{Result:10})

>> Distinct(Table({a:1,b:2},{a:3,b:4},{a:5,b:6}), Trunc(a / 2))
Table({Result:0},{Result:1},{Result:2})

// Distinct values for an expression that generates same result
>> Distinct([-2,-1,0,1,0],Value^2)
Table({Result:4},{Result:1},{Result:0})

// Distinct values with blanks
>> Distinct(Table({FirstName:"Harry"},{FirstName:Blank()},{FirstName:"Sally"},{FirstName:"Harry"},{FirstName:Blank()},{FirstName:"Alice"},{FirstName:"Sally"}), FirstName)
Table({Result:"Harry"},{Result:Blank()},{Result:"Sally"},{Result:"Alice"})

// Distinct is case sensitive
>> Distinct(Table({FirstName:"Harry"},{FirstName:"HARRY"},{FirstName:"Sally"},{FirstName:"Harry"},{FirstName:"Alice"},{FirstName:"Sally"}), FirstName)
Table({Result:"Harry"},{Result:"HARRY"},{Result:"Sally"},{Result:"Alice"})

// Distinct values from an error table
>> Distinct(If(1/0<2,[1,2,3]), true)
Error({Kind:ErrorKind.Div0})

// Distinct values where expression can return an error
>> Distinct([-2,-1,0,1,0], 1/Value)
Error({Kind:ErrorKind.Div0})

// Distinct values where expression handles errors
>> Distinct(Table({a:1},{a:2},{a:If(1/0<2,{a:2}).a},{a:7},{a:Sqrt(-1)},{a:-13},{a:2}), IfError(a,-FirstError.Kind))
Table({Result:1},{Result:2},{Result:-13},{Result:7},{Result:-24})

// Distinct which ignores columns with errors
>> Distinct(Table({a:10,b:1/0},{a:9,b:Sqrt(-1)},{a:8,b:3},{a:10,b:1/0},{a:8,b:Ln(-1)}), a)
Table({Result:10},{Result:9},{Result:8})

// The Distinct keeps the same ordering as the input
>> Distinct([1,2,3,2,1], Value)
Table({Result:1},{Result:2},{Result:3})

>> Distinct([3,2,1,3,3,3,3], Value)
Table({Result:3},{Result:2},{Result:1})

>> Distinct(Blank(), true)
Blank()

>> Distinct([1/0], Value)
Error({Kind:ErrorKind.Div0})

>> Distinct([], true)
Table()

>> Sort(Distinct([{FirstName: "Harry"}, {FirstName: "Sally"}, {FirstName: "Harry"}, {FirstName: "Alice"}, {FirstName: "Sally"}], Value.FirstName), Result)
Table({Result:"Alice"},{Result:"Harry"},{Result:"Sally"})

>> Distinct(Error("error"), true)
Error({Kind:ErrorKind.Custom})

>> Distinct([{A: 1}, {A: 2}, {A: 3}, Error("error")], Value.A)
Error({Kind:ErrorKind.Custom})

>> Distinct([{A: 1}, {A: 2}, {A: 3}, {A: Error("error")}], Value.A)
Error({Kind:ErrorKind.Custom})

>> Distinct([{A: 1, B: 1}, {A: 2, B: 2}, {A: 3, B: 3}, {A: Error("error"), B: 4}], Value.B)
Table({Result:1},{Result:2},{Result:3},{Result:4})

>> Distinct([{A: 1}, {A: 2}, {A: 3}, Error("error")], IfError(Value.A, 4))
Table({Result:1},{Result:2},{Result:3},{Result:4})

>> Distinct([GUID("c203b79b-b985-42f0-b523-c10eb64387c6"), GUID("c203b79b-b985-42f0-b523-c10eb64387c6")], Value)
Table({Result:GUID("c203b79b-b985-42f0-b523-c10eb64387c6")})

>> Distinct(Table({a:1,b:2},{a:3,b:4},{a:5,b:6}), Blank())
Table({Result:Blank()})

// Distinct only supports Primitive types.
>> Distinct(Table({a:1,b:2},{a:3,b:4},{a:5,b:6}), Table({test: a * 2}))
Error({Kind:ErrorKind.InvalidArgument})

>> Distinct(Table({x:1,y:2},{x:10,y:2}), ThisRecord)
Error({Kind:ErrorKind.InvalidArgument})