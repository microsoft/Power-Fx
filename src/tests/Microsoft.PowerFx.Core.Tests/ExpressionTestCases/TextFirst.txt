#SETUP: TextFirst

// An alternative parser mode for hosts that wish to start in a "text first" manner.
// Mode is enabled with ParserOptions.TextFirst.
// This is done as a parser mode for consistency and to ensure parser column offsets are correct.
//
// The semantic rules:
//
// 1. The input buffer is in general treated as a text string.
// 2. There is no need to escape ", {, or }.
// 3. String interpolation are supported, starting with ${ rather than the normal {. This is to allow { to be used without interpretation. String interpolation can be nested by using standard string interpolation within.
// 4. A single = starts a normal formula.
//
// For example:
//
//  Normal ParserOptions                 TextFirst ParserOptions                Result
// ==================================== ====================================== =========================
//  "3+3"                                3+3                                    "3+3"
//  3+3                                  =3+3                                   6
//  $"3 {3+3}"                           3 ${3+3}                               "3 6" 
//  $"3 {{3+3}}"                         3 {3+3}                                "3 {3+3}"
//  $"3 ' {{}} {3+3} "" {$"{7+7}"}"      3 ' {} ${3+3} " ${$"{7+7}"}            "3 ' {} 6 "" 14"
//  "3 ' {} " & 3+3 & " "" " & 7+7       =$"3 ' {{}} {3+3} "" {$"{7+7}"}"       "3 ' {} 6 "" 14"

// examples above

>> 3+3
"3+3"

>> =3+3
6

>> 3 ${3+3}
"3 6"

>> 3 {3+3}
"3 {3+3}"

>> 3 ' {} ${3+3} " ${$"{7+7}"}
"3 ' {} 6 "" 14"

>> =$"3 ' {{}} {3+3} "" {$"{7+7}"}"
"3 ' {} 6 "" 14"

// basics

>> Hello, World
"Hello, World"

>> ="Hello, World"
"Hello, World"

>> 1+1
"1+1"

>> =1+1
2

>> =$"1+1"
"1+1"

>> =$"{1+1}"
"2"

>> ${"1+1"}
"1+1"

>> ${1+1}
"2"

>> ${$"{1+1}"}
"2"

>> ${$"${1+1}"}
"$2"

// escaping characters and lack thereof from standard string interpolation

>> {{34+6}}
"{{34+6}}"

>> "foo"
"""foo"""

>> ""foobar""
"""""foobar"""""

>> {
"{"

>> {{
"{{"

>> {{{
"{{{"

>> }
"}"

>> }}
"}}"

>> }}}
"}}}"

>> ${1+3}
"4"

>> $${1+3}
"${1+3}"

>> $$${1+3}
"$${1+3}"

>> $$$${1+3}
"$$${1+3}"

>> $
"$"

>> $$
"$$"

>> $$$
"$$$"

>> $$$$
"$$$$"

>> $}
"$}"

>> $$}
"$$}"

>> $$$}
"$$$}"

>> $$$$}
"$$$$}"

>> 'identifier name'
"'identifier name'"

>> "Quoted string"
"""Quoted string"""

>> They're here!
"They're here!"

>> They"re here!
"They""re here!"

// escaping strings starting with =

>> =
Blank()

>> ==
Errors: Error 1-2: Unexpected characters. Characters are used in the formula in an unexpected way.

>> ===
Errors: Error 1-2: Unexpected characters. Characters are used in the formula in an unexpected way.

>> ====
Errors: Error 1-2: Unexpected characters. Characters are used in the formula in an unexpected way.

>> ${"="}
"="

>> ="="
"="

// JSON should pass through without interpretation

>> [{"a":1,"b":"happy"},{"b":"days"}]
"[{""a"":1,""b"":""happy""},{""b"":""days""}]"

>> {"name":"John", "age":30, "car":null}
"{""name"":""John"", ""age"":30, ""car"":null}"

>> {"foo":{"bar":34}}
"{""foo"":{""bar"":34}}"

>> {{"bar":"asdf"},"foo":"oret"}
"{{""bar"":""asdf""},""foo"":""oret""}"

>> {{{"bar":"asdf"},"foo":"oret"},"goo":34}
"{{{""bar"":""asdf""},""foo"":""oret""},""goo"":34}"

// Power Fx records should pass through without interpretation

>> [{a:1,b:"happy"},{b:"days"}]
"[{a:1,b:""happy""},{b:""days""}]"

>> {name:"John", age:30, car:null}
"{name:""John"", age:30, car:null}"

>> {foo:{bar:34}}
"{foo:{bar:34}}"

>> {{bar:"asdf"},foo:"oret"}
"{{bar:""asdf""},foo:""oret""}"

>> {{{bar:"asdf"},foo:"oret"},goo:34}
"{{{bar:""asdf""},foo:""oret""},goo:34}"

// escaping islands

>> Hello $${1+1} World
"Hello ${1+1} World"

>> $${${3+1}}
"${4}"

// multiple islands

>> 1, ${2}, ${"3"}, ${3+1}, ${$"{3+2}"}, ${$"{$"{5+1}"}"}, ${$"7"}, 8
"1, 2, 3, 4, 5, 6, 7, 8"

>> =$"1, {2}, {"3"}, {3+1}, {$"{3+2}"}, {$"{$"{5+1}"}"}, {$"7"}, 8"
"1, 2, 3, 4, 5, 6, 7, 8"

// mixing with records

>> ${{a:1,b:2}.a}
"1"

>> ${ {a:1,b:2}.a}
"1"

>> ={a:1,b:2}.a
1

>> =$"{ {a:1,b:2}.a}"
"1"

>> =$"{{{ {a:1,b:2}.a}"
"{1"


// error messages provide correct column offsets

// without TextFirst, for comparison, note zero based
// >> UnknownFunction("arg")
// Errors: Error 0-22: 'UnknownFunction' is an unknown or unsupported function.

>> =UnknownFunction("arg")
Errors: Error 1-23: 'UnknownFunction' is an unknown or unsupported function.

>> ${UnknownFunction("arg")}
Errors: Error 2-24: 'UnknownFunction' is an unknown or unsupported function.|Error 0-25: Expressions which appear inside an interpolated string must evaluate to a Text value or to a compatible type.

>> Happy ${UnknownFunction("arg")} Days
Errors: Error 8-30: 'UnknownFunction' is an unknown or unsupported function.|Error 0-36: Expressions which appear inside an interpolated string must evaluate to a Text value or to a compatible type.

>> ="Happy " & UnknownFunction("arg") & "Days"
Errors: Error 12-34: 'UnknownFunction' is an unknown or unsupported function.

// comments

>> // Hello, World
"// Hello, World"

>> =// Hello, World
Blank()

>> // Hello ${1+1}, World
"// Hello 2, World"

>> =$"// Hello {1+1}, World"
"// Hello 2, World"

>> // Hello ${// 1+1} World
Errors: Error 24-24: Unexpected characters. Characters are used in the formula in an unexpected way.|Error 24-24: Invalid argument type (Error). Expecting a Text value instead.|Error 0-24: Expressions which appear inside an interpolated string must evaluate to a Text value or to a compatible type.

>> =$"// Hello {// 1+1} World"
Errors: Error 27-27: Unexpected characters. Characters are used in the formula in an unexpected way.|Error 27-27: Invalid argument type (Error). Expecting a Text value instead.|Error 1-27: Expressions which appear inside an interpolated string must evaluate to a Text value or to a compatible type.

