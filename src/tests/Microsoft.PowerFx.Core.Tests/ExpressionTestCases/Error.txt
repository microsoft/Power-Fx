>> 1/0
Error({Kind:ErrorKind.Div0})

>> Sqrt(-1)
Error({Kind:ErrorKind.Numeric})

>> IsError(1/0)
true

>> IsError(1)
false

>> IsError(Error({Kind: ErrorKind.Validation}))
true

>> IsError(Error({Kind: 11}))
true

>> Error({Kind:ErrorKind.InvalidArgument})
Error({Kind:ErrorKind.InvalidArgument})

>> Error({Kind:ErrorKind.Validation})
Error({Kind:ErrorKind.Validation})

>> Error({Kind:Validation}) // We need to use the fully-qualified enum value
Errors: Error 12-22: Name isn't valid. 'Validation' isn't recognized.

>> Error({Kind:"Validation"}) // Error kind needs to be numeric!
Errors: Error 6-25: Invalid argument type. Expecting a Record value, but of a different schema.|Error 6-25: Invalid type for field 'Kind'. Expected field type of 'ErrorKind'.

>> IfError(1/0, Error({Kind:FirstError.Kind}))
Error({Kind:ErrorKind.Div0})

>> IfError(1/0, 3)
3

>> IfError(1/0, FirstError.Kind)
13

>> IfError(Error({Kind:12}), FirstError.Kind)
12

>> IfError(0, 1, Sqrt(-2), 2)
2

>> IfError(0, 1, Error({Kind: ErrorKind.Unknown}), 2)
2

>> IfError(1, 2)
1

>> IfError(1, 2, 3)
3

>> IfError(1, 2, 3, 4)
3

>> IfError(Text(1/0), FirstError.Message)
"Invalid operation: division by zero."

>> IsBlank(1/0)
Error({Kind:ErrorKind.Div0})

>> Not(IsBlank(1/0))
Error({Kind:ErrorKind.Div0})

>> "Result: " & IfError(1/0, -1)
"Result: -1"

>> "Result: " & IfError(1, "error 1", 2, "error 2", "no error")
"Result: no error"

>> "Result: " & IfError({a:1, b:"hello"}, {a:2, b:"error"}).b
"Result: hello"

>> "Result: " & IfError(1, {a:1}, 2, {a:2}, {a:3}).a
"Result: 3"

>> "Result: " & IfError({a:{a1:true},b:"hello"}, {a:1,b:"error 1"}, {a:{a1:{a2:3}},b:"world"}, {a:1,b:"error 2"}, {a:1,b:"valid"}, {a:1,b:"error 3"}).a
"Result: 1"

>> Error("lorem ipsum")
Error({Kind:ErrorKind.Custom})

>> IfError(Error("lorem ipsum"), FirstError.Message)
"lorem ipsum"

>> Date(2000, Sqrt(-1), Error("lorem ipsum"))
Error(Table({Kind:ErrorKind.Numeric},{Kind:ErrorKind.Custom}))