#SETUP: NumberIsFloat

// Float() calls from the original DecimalMathFuncs have been replaced with Value() for compatibility with Canvas

// decimal aware aggregate functions

>> Sum( 1.0000000000000000000000001, 2.0000000000000000000000002)
3

>> Sum( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
3

>> Average( 1.0000000000000000000000001, 2.0000000000000000000000002 )
1.5

>> Average( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
1.5

>> Min( 1.0000000000000000000000001, 2.0000000000000000000000002 )
1

>> Min( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
1

>> Max( 1.0000000000000000000000001, 2.0000000000000000000000002 )
2

>> Max( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
2

// decimal aware aggregate functions with mixed inputs -> float

>> Sum( 1.0000000000000000000000001, 2.0000000000000000000000002, Value(3))
6

>> Sum( [1.0000000000000000000000001, 2.0000000000000000000000002, Value(3)], Value )
6

>> Average( 1.0000000000000000000000001, 2.0000000000000000000000002, Value(3) )
2

>> Average( [1.0000000000000000000000001, 2.0000000000000000000000002, Value(3)], Value )
2

>> Min( 1.0000000000000000000000001, 2.0000000000000000000000002, Value(3) )
1

>> Min( [1.0000000000000000000000001, 2.0000000000000000000000002, Value(3)], Value )
1

>> Max( 1.0000000000000000000000001, 2.0000000000000000000000002, Value(-3) )
2

>> Max( [1.0000000000000000000000001, 2.0000000000000000000000002, Value(-3)], Value )
2

// non-decimal aware aggregate functions

>> VarP( 1.0000000000000000000000001, 2.0000000000000000000000002)
0.25

>> VarP( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
0.25

>> StdevP( 1.0000000000000000000000001, 2.0000000000000000000000002)
0.5

>> StdevP( [1.0000000000000000000000001, 2.0000000000000000000000002], Value )
0.5

>> VarP( 1.0000000000000000000000001, 2.0000000000000000000000002, Value(3) )
0.6666666666666666

>> VarP( [1.0000000000000000000000001, 2.0000000000000000000000002, Value(3)], Value )
0.6666666666666666

>> StdevP( 1.0000000000000000000000001, 2.0000000000000000000000002, Value(3) )
0.816496580927726

>> StdevP( [1.0000000000000000000000001, 2.0000000000000000000000002, Value(3)], Value )
0.816496580927726

// decimal aware numeric functions, stays on decimal

>> Int( 1000000000000000000000001.1 )
1E+24

>> Int( -1000000000000000000000001.1 )
-1E+24

>> Int( [1000000000000000000000001.1, 2000000000000000000000002.2] )
Table({Value:1E+24},{Value:2E+24})

>> Trunc( 1000000000000000000000001.1 )
1E+24

>> Trunc( [1000000000000000000000001.1, 2000000000000000000000002.2] )
Table({Value:1E+24},{Value:2E+24})

>> Round( 1000000000000000000000001.1, 2 )
1E+24

>> Round( [1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
Table({Value:1E+24},{Value:2E+24})

>> Round( 1000000000000000000000001.1, Value(2) )
1E+24

>> Round( [1000000000000000000000001.1, 2000000000000000000000002.2], Value(2) )
Table({Value:1E+24},{Value:2E+24})

>> RoundUp( 1000000000000000000000001.1, 2 )
1E+24

>> RoundUp( [1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
Table({Value:1E+24},{Value:2E+24})

>> RoundUp( 1000000000000000000000001.1, Value(2) )
1E+24

>> RoundUp( [1000000000000000000000001.1, 2000000000000000000000002.2], Value(2) )
Table({Value:1E+24},{Value:2E+24})

>> RoundDown( 1000000000000000000000001.1, 2 )
1E+24

>> RoundDown( [1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
Table({Value:1E+24},{Value:2E+24})

>> RoundDown( 1000000000000000000000001.1, Value(2) )
1E+24

>> RoundDown( [1000000000000000000000001.1, 2000000000000000000000002.2], Value(2) )
Table({Value:1E+24},{Value:2E+24})

>> Abs( 10000000000000000000000001 )
1E+25

>> Abs( -10000000000000000000000001 )
1E+25

>> Abs( [10000000000000000000000001, 20000000000000000000000002, -10000000000000000000000001, -20000000000000000000000002])
Table({Value:1E+25},{Value:2E+25},{Value:1E+25},{Value:2E+25})

>> Abs( [10000000000000000000000001, 20000000000000000000000002, -10000000000000000000000001, -20000000000000000000000002, Value(1)])
Table({Value:1E+25},{Value:2E+25},{Value:1E+25},{Value:2E+25},{Value:1})

// decimal aware functions with mixed inputs

>> Int( [1000000000000000000000001.1, 2000000000000000000000002.2, Value(100000.12)] )
Table({Value:1E+24},{Value:2E+24},{Value:100000})

>> Trunc( [1000000000000000000000001.1, 2000000000000000000000002.2, Value(100000.12)] )
Table({Value:1E+24},{Value:2E+24},{Value:100000})

>> Round( [1000000000000000000000001.1, 2000000000000000000000002.2, Value(300000.1234)], 2 )
Table({Value:1E+24},{Value:2E+24},{Value:300000.12})

>> RoundUp( [1000000000000000000000001.1, 2000000000000000000000002.2, Value(300000.1234)], 2 )
Table({Value:1E+24},{Value:2E+24},{Value:300000.13})

>> RoundDown( [1000000000000000000000001.1, 2000000000000000000000002.2, Value(30000.1234)], 2 )
Table({Value:1E+24},{Value:2E+24},{Value:30000.12})

>> Int( [Value(100000.12), 1000000000000000000000001.1, 2000000000000000000000002.2] )
Table({Value:100000},{Value:1E+24},{Value:2E+24})

>> Trunc( [Value(100000.12), 1000000000000000000000001.1, 2000000000000000000000002.2] )
Table({Value:100000},{Value:1E+24},{Value:2E+24})

>> Round( [Value(300000.1234), 1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
Table({Value:300000.12},{Value:1E+24},{Value:2E+24})

>> RoundUp( [Value(300000.1234), 1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
Table({Value:300000.13},{Value:1E+24},{Value:2E+24})

>> RoundDown( [Value(30000.1234), 1000000000000000000000001.1, 2000000000000000000000002.2], 2 )
Table({Value:30000.12},{Value:1E+24},{Value:2E+24})

// non-decimal aware numeric functions

// exact square of 1234567899876 is 1524157899404237160815376
// taking dquare root of 1524157899404230000000000 should result in a difference between float and decimal
>> Sqrt( 1524157899404230000000000 )
1234567899876

>> Sqrt( Value(1524157899404230000000000) )
1234567899876

>> Sqrt( 4.000000000000000004 )              // outside of float range, will round to 4
2

>> Sqrt( 4.0000000004 )                      // within float range
2.0000000001

>> Log( 100, 10 )
2

>> Log( 10000000000000050000000, 10 )         // input will be rounded with float conversion
22

>> Log( 10000000000000050000000, Value(10) )
22

>> Log( 10000000000000000000000, 10 )         // above tests should match these answers
22

>> Log( 10000000000000000000000, Value(10) )  
22

>> Log( Value("1e100"), 10 )
100

>> Ln( 2.71828182845904523536028747135266249775724709369995 )
1

>> Ln( 100000000 )
18.420680743952367

>> Exp( 18.420680743952367 )
100000000.00000007

>> Pi()
3.141592653589793

>> Cos( 0 )
1

>> Cos( [0] )
Table({Value:1})

>> Cos( Pi() )
-1

>> Cos( [Pi()] )
Table({Value:-1})

>> Sin( 0 )
0

>> Sin( [0] )
Table({Value:0})

>> Sin( Pi()/2 )
1

>> Cot( 0 )
Error({Kind:ErrorKind.Div0})

>> Cot( [0] )
Table({Value:Error({Kind:ErrorKind.Div0})})

>> Cot( 3.14159265358979323846264338327950288419716939937510 )
-8165619676597685

>> Cot( [3.14159265358979323846264338327950288419716939937510] )
Table({Value:-8165619676597685})

>> Cot( Pi()/4 )
1

>> Round( Cot( [Pi()/4] ), 10 )
Table({Value:1})

>> Tan( 0 )
0

>> Tan( [0] )
Table({Value:0})

>> Tan( Pi()/4 )
1

>> Round( Tan( [Pi()/4] ), 10 )
Table({Value:1})

>> Acos( 0 )
1.5707963267948966

>> Acos( [0] )
Table({Value:1.5707963267948966})

>> Acos( 1 )
0

>> Acos( [1] )
Table({Value:0})

>> Acot( 0 )
1.5707963267948966

>> Acot( [0] )
Table({Value:1.5707963267948966})

>> Acot( 1 )
0.7853981633974483

>> Acot( [1] )
Table({Value:0.7853981633974483})

>> Asin( 0 )
0

>> Asin( [0] )
Table({Value:0})

>> Asin( 1 )
1.5707963267948966

>> Asin( [1] )
Table({Value:1.5707963267948966})

>> Atan( 0 )
0

>> Atan( [0] )
Table({Value:0})

>> Atan( 1 )
0.7853981633974483

>> Atan( [1] )
Table({Value:0.7853981633974483})

>> 4 * Atan(1) - Pi()
0

>> Atan( [4 * Atan(1) - Pi()] )
Table({Value:0})

>> Atan2( 0, 0 )
Error({Kind:ErrorKind.Div0})

>> Atan2( 1, 1 )
0.7853981633974483

>> Degrees( Pi() )
180

>> Degrees( 3.14159265358979323846264338327950288419716939937510 )
180

>> Radians( 0 )
0

>> Radians( 180 )
3.141592653589793

>> Power( 2.0000000000000000000000002, 2.0000000000000000000000002)
4

>> 2.0000000000000000000000002 ^ 2.0000000000000000000000002
4

// Decimal and Float functions

>> Value( 1e100 )
1E+100

>> Value( "1e100" )
1E+100

>> Value( true )
1

>> Value( "12,00000000000000000000003", "Fr-fr" )
12

>> Value( ParseJSON("""12,00000000000000000000003"""), "Fr-fr" )
12

// ParseJSON

>> Value( ParseJSON("12.00000000000000000000003") )
12

>> Value( Index( ParseJSON("[1e300,12.00000000000000000000003]"), 2 ) )
12

>> Value( ParseJSON("{""a"":12.00000000000000000000003}").a )
12

