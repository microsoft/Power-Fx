#SETUP: BlankKeyword

// Blank is type compatible with other types
>> If(true, 2,blank)
2

>> If(false, 2,blank)
Blank()

>> If(false, blank, "hi")
"hi"

>> If(blank, 1, 2)
2

>> Abs([blank,blank,4])
Table({Value:0},{Value:0},{Value:4})

>> Max(blank,-2)
Blank()

>> Switch(blank,1,2,blank,3)
3

//-----------------------------------------------
// Numerically, blank evaulates to 0

>> blank - blank
0

>> blank + blank
0

>> blank - 5
-5

>> -5 < blank
true

>> 5 < blank
false

>> 5 / blank
Error({Kind:ErrorKind.Div0})

>> blank%
0

// But Blank is not 0 
>> blank = 0
false

>> blank <> 0
true

>> 0 = blank
false

>> 0 <> blank
true

>> blank
Blank()

//-----------------------------------------------
// String 
>> IsBlank("")
true

// whitespace 
>> IsBlank(" ")
false

>> IsBlank(blank)
true

//-----------------------------------------------
// Booleans 
>> Not(blank)
true

>> IsBlank(false)
false

>> IsBlank(true)
false

// Acts like a number
>> 5 + blank
5

// Acts like "", but still not a string  
>> "A" & blank & "B"
"AB"

>> Len(blank) 
0

>> blank = blank
true

>> blank <> blank
false

// Blank and empty string
>> blank = ""
false

>> blank <> ""
true

>> IsBlank(blank + blank)
false


// Blank is type compatible with other types

>> Abs([blank,Blank(),4])
Table({Value:0},{Value:0},{Value:4})

// Max with a string of arguments, not a lambda
>> Max(blank,-3,-2)
-2

>> Max(Blank(),-3,-2)
-2

>> Max(blank,Blank(),-2)
-2

>> Min(blank,-3,-2)
-3

>> Min(Blank(),-3,-2)
-3

>> Min(blank,Blank(),-3)
-3

>> Switch(blank,1,2,Blank(),3)
3

//-----------------------------------------------
// Numerically, blank evaulates to 0

>> blank - Blank()
0

>> blank + Blank()
0

>> blank = Blank()
true

>> blank <> Blank()
false

>> IsBlank(blank + Blank())
false