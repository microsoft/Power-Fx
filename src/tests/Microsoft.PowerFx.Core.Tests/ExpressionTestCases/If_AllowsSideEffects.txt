#SETUP: EnableExpressionChaining


// These test cases are part of the code coverage and are meant to reach IfFunction.IsArgTypeInconsequential

// This If() expression is allowed to have mismatching types between arg1 and arg2 because
// a) it's behavior,
// b) it's verified nobody is actually using the return value.

>> If(1<0, "abc1", {x:3})
If(true, {test:1}, "Mismatched args")

>> If(1>0, 100, {x:3}) + 1
Errors: Error 0-19: Invalid argument type. Expecting one of the following: Number, Text, Boolean.

>> If(1>0, 100; 30, {x:3}) + 1
Errors: Error 0-23: Invalid argument type. Expecting one of the following: Number, Text, Boolean.

>> If(1>0, 100; 30, {x:3}; 60) + 1
31

>> Value(If(1>0, 100; 30, {x:3}) + 1)
Errors: Error 6-29: Invalid argument type. Expecting one of the following: Number, Text, Boolean.

>> Value(1 + If(1>0, 100; 30, {x:3}))
Errors: Error 10-33: Invalid argument type. Expecting one of the following: Number, Text, Boolean.

>> If(1<0, "abc2", {x:3}; {x:2})
If(true, {test:1}, "Mismatched args")

>> If(false, "abc3", {x:3}; If(true, Value(10); {x:3})); Value(101)
101

>> Value(If(false, "abc4", {x:3}; If(true, Value(10); {x:3})); Value(102))
102

>> If(Value("1")>Value("0"), Blank(), 3)
Blank()

>> If(Value("1")<Value("0"), Blank(), 3)
3

>> If(Value("1")<Value("0"), Blank(), Blank(); 3 + If(1<0, 2, "2"))
5

>> If(Value("1")>Value("0"), Blank(); 1/0; Blank(), 3)
Error({Kind:ErrorKind.Div0})

>> If(1<0, "abc", If(1<0, {x:3}, 1), 1>0, 2)
Errors: Error 15-32: Invalid argument type (Void). Expecting a Boolean value instead.|Error 0-41: The function 'If' has some invalid arguments.

>> If(1<0, {x:3}, 1/0)
Error({Kind:ErrorKind.Div0})