

>> Average(1,0,5)
2

>> Average("1",0,5) // coerce
2

// With new error semantics, blank yields error.
>> Average(Blank())
#Error

>> Average(1,Blank(),5)
3

// scalar 
>> Sum(1,2)
3

>> Sum(1)
1

>> Sum(0)
0

// Basic math 
>> Sqrt(4)+1
3

>> Mod(7,3)
1

>> Mod(Blank(),3)
0

>> Mod(7,Blank())
#Error

>> Mod(7,1/0)
#Error

>> Mod(1/0,3)
#Error

>> Mod(1, 0)
#Error

>> Abs(-5)
5

>> Abs(5)
5

>> Abs(0)
0

>> Abs(Blank())
Blank()

>> Abs(1/0)
#Error

// use Text to ignore precision issues
>> Text(Exp(Ln(2)), "#")
"2"

>> Text(Ln(Exp(2)), "#")
"2"

>> Ln(0)
#Error

>> Ln(Blank())
Blank()

>> Ln(1/0)
#Error

// Log is not implemented for SQL

>> Log(100)
/*SqlRunner*/ Compile Error
2

>> Log(0)
/*SqlRunner*/ Compile Error
#Error

>> Log(Blank())
/*SqlRunner*/ Compile Error
Blank()

>> Log(1/0)
/*SqlRunner*/ Compile Error
#Error

>> IsError(Ln(0))
true

>> Power(2, 3)
8

>> Sqrt(Power(5.5, 2))
5.5

>> Sqrt(0)
0

>> Sqrt(Blank())
Blank()

>> Sqrt(1/0)
#Error

>> Power(2, -2)
0.25

>> Power(Blank(), -2)
Blank()

>> Power(1/0, -2)
#Error

>> Round(Exp(2), 2)
7.39

>> Exp(Blank())
Blank()

>> Exp(1/0)
#Error

>> 2^3
8

>> 2^-2
0.25

>> Max(Blank(), 100, -5, "2000", Value("2001"), Text(2002))
2002

>> Min(-100, If(true, -1000, 200))
-1000

>> Round(1.5, 0)
2

>> Round(2.1, 0)
2

>> Round(1.95, 1)
2

>> Round(225, -2)
200

>> Round(225, -3)
0

>> Round(550, -3)
1000

>> Round(550, -4)
0

>> RoundUp(1.1, 0)
2

>> RoundUp(0, 0)
0

>> RoundUp(2.2222, 2)
2.23

>> RoundUp(1.99, 3)
1.99

>> RoundUp(88, -1)
90

>> RoundUp(88, -4)
10000

>> RoundUp(Blank(), 0)
0

>> RoundUp(Blank(), 2)
0

>> RoundUp(1.1, Blank())
2

>> RoundUp(Blank(), Blank())
0

>> RoundUp(1.1, 1/0)
#Error

>> RoundUp(1/0, 0)
#Error

>> RoundDown(1.9, 0)
1

>> RoundDown(2.111, 2)
2.11

>> RoundDown(2.111, Blank())
2

>> RoundDown(Blank(), 2)
0

>> RoundDown(Blank(), Blank())
0

>> RoundDown(699, -2)
600

>> RoundDown(2.111, 1/0)
#Error

>> RoundDown(1/0, 2)
#Error

>> Trunc(2.111, 2)
2.11

>> Trunc(2.111)
2

>> Trunc(2.111, Blank())
2

>> Trunc(Blank())
0

>> Trunc(Blank(), 2)
0

>> Trunc(Blank(), Blank())
0

>> Trunc(1.1, 1/0)
#Error

>> Trunc(1/0, 0)
#Error

>> Trunc(1/0)
#Error

>> Int(4.1)
4

>> Int(-4.1)
-5

>> Int(Blank())
Blank()

>> Int(1/0)
#Error

>>IsNumeric("A")
/*SqlRunner*/ Compile Error
false

>>IsNumeric(123)
/*SqlRunner*/ Compile Error
true

>>IsNumeric(-123)
/*SqlRunner*/ Compile Error
true

>>IsNumeric(-123.1)
/*SqlRunner*/ Compile Error
true

>>IsNumeric(123.1)
/*SqlRunner*/ Compile Error
true

>>IsNumeric("1" + 2)
/*SqlRunner*/ Compile Error
true

>>IsNumeric(1/0)
/*SqlRunner*/ Compile Error
#Error

>>IsNumeric(Blank())
/*SqlRunner*/ Compile Error
false

>>IsNumeric({RecordValue: 123})
/*SqlRunner*/ Compile Error
false

>>IsNumeric([1,2,3,4])
/*SqlRunner*/ Compile Error
false

>>RandBetween(1, 1)
/*SqlRunner*/ Compile Error
1

>>IsError(RandBetween(5, 1))
/*SqlRunner*/ Compile Error
true

>>RandBetween(Blank(),1)
/*SqlRunner*/ Compile Error
0

>>IsError(RandBetween(1/0, 1))
/*SqlRunner*/ Compile Error
true

>>IsError(RandBetween(0, 1/0))
/*SqlRunner*/ Compile Error
true

>>RandBetween(100.5, 100.7)
/*SqlRunner*/ Compile Error
100

>> Sum(Sequence(100), With({RandomNumber: RandBetween(1,20)}, If(RandomNumber >=1 && RandomNumber <= 20, 1, 0)))
/*SqlRunner*/ Compile Error
100

>> Sum(Sequence(100), With({RandomNumber: RandBetween(2-1,50-30)}, If(RandomNumber >=1 && RandomNumber <= 20, 1, 0)))
/*SqlRunner*/ Compile Error
100

>> Sum(Sequence(100), With({RandomNumber: Rand()}, If(RandomNumber > 0 && RandomNumber < 1.0, 1, 0)))
/*SqlRunner*/ Compile Error
100
