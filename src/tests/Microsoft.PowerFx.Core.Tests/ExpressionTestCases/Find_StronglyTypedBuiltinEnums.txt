#SKIPFILE: disable:StronglyTypedBuiltinEnums

>> Find("", "")
1

>> Find("", "", 1)
1

>> Find("", "", 2)
Error({Kind:ErrorKind.InvalidArgument})

>> Find("", "textToBeSearchedIn")
1

>> Find("", "textToBeSearchedIn", 1)
1

>> Find("", "textToBeSearchedIn", 4)
4

>> Find("textToFind", "")
Blank()

>> Find("textToFind", "", 2)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(",", "LastName,FirstName")
9

>> Find(",", "LastName,FirstName", 2)
9

>> Find(",", "LastName,FirstName", 9)
9

>> Find(",", "LastName,FirstName", 9.5)
9

>> Find(",", "LastName,FirstName", 10)
Blank()

>> Find("#", "LastName,FirstName")
Blank()

>> Find("#", "LastName,FirstName", 3)
Blank()

>> Find("#", "LastName,FirstName", 100)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(",", "LastName,First,Name")
9

>> Find(",", "LastName,First,Name", 2)
9

>> Find(",", "LastName,First,Name", 9)
9

>> Find(",", "LastName,First,Name", 10)
15

>> Find(",", "LastNameFirstName,")
18

>> Find(",", "LastNameFirstName,", 18)
18

>> Find(",", "LastNameFirstName,", 19)
Blank()

>> Find("MULTIPLECHARS", "LastNameMULTIPLECHARSFirstName")
9

>> Find("MULTIPLECHARS", "LastNameMULTIPLEFirstName")
Blank()

>> Find(",", ",,,,,,")
1

>> Find(",", ",,,,,,", 2)
2

>> Find(Blank(), Blank())
1

>> Find(Blank(), Blank(), 2)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(Blank(), "textToBeSearchedIn")
1

>> Find(Blank(), "textToBeSearchedIn", 2)
2

>> Find("textToFind", Blank())
Blank()

>> Find("textToFind", Blank(), 3)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(",", "LastName,FirstName", -1)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(",", "LastName,FirstName", 0)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(",", "LastName,FirstName", Blank())
Error({Kind:ErrorKind.InvalidArgument})

>> Find("B", "LastNameisBlah")
11

>> Find("B", "LastNameisblah")
Blank()

>> Find("b", "LastNameisblah")
11

>> Find("b", "LastNameisBlah")
Blank()

>> Find("BB", "LastNameisBBlah")
11

>> Find("BB", "LastNameisBblah")
Blank()

>> Find("bb", "LastNameisbblah")
11

>> Find("bb", "LastNameisbBlah")
Blank()

>> Find("B", "LastNameisBlahFirstNameisBlah")
11

>> Find("B", "LastNameisBlahFirstNameisBlah", 2)
11

>> Find("B", "LastNameisBlahFirstNameisBlah", 11)
11

>> Find("B", "LastNameisBlahFirstNameisBlah", 12)
26

>> Find("B", "LastNameisBlahFirstNameisblah", 12)
Blank()

>> Find("B", "LastNameisBiller")
11

>> Find("B", "LastNameisbiller")
Blank()

>> Find("b", "LastNameisbiller")
11

>> Find("b", "LastNameisBiller")
Blank()

>> Find("BB", "LastNameisBBiller")
11

>> Find("BB", "LastNameisBbiller")
Blank()

>> Find("bb", "LastNameisbbiller")
11

>> Find("bb", "LastNameisbBiller")
Blank()

>> Find("B", "LastNameisBillerFirstNameisBethy")
11

>> Find("B", "LastNameisBillerFirstNameisBethy", 2)
11

>> Find("B", "LastNameisBillerFirstNameisBethy", 11)
11

>> Find("B", "LastNameisBillerFirstNameisBethy", 12)
28

>> Find("B", "LastNameisBillerFirstNameisbethy", 12)
Blank()

>> Find("", "", -1)
Error({Kind:ErrorKind.InvalidArgument})

>> Find("", "", 0)
Error({Kind:ErrorKind.InvalidArgument})

>> Find("", "textToBeSearchedIn", -1)
Error({Kind:ErrorKind.InvalidArgument})

>> Find("", "textToBeSearchedIn", 0)
Error({Kind:ErrorKind.InvalidArgument})

>> Find("", "textToBeSearchedIn", 2)
2

>> Find("", "textToBeSearchedIn", 100)
Error({Kind:ErrorKind.InvalidArgument})

>> Find("textToFind", "",-1)
Error({Kind:ErrorKind.InvalidArgument})

>> Find("textToFind", "",0)
Error({Kind:ErrorKind.InvalidArgument})

>> Find("textToFind", "",1)
Blank()

>> Find("textToFind", "",2)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(Blank(), Blank(), -1)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(Blank(), Blank(), 0)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(Blank(), Blank(), 1)
1

// ************************* SCALAR PARAMETERS - EMPTY, NULL or ERROR *************************

>> Find(Blank(), "")
1

>> Find("", Blank())
1

>> Find(1/0, "", 1)
Error({Kind:ErrorKind.Div0})

>> Find(1, 1/0, 1)
Error({Kind:ErrorKind.Div0})

>> Find(1, 1, 1/0)
Error({Kind:ErrorKind.Div0})

>> Find(18, 18, ErrorKind.Sync)
1

>> Find(18, 18, ErrorKind.MissingRequired)
Blank()

>> Find(1, ErrorKind.BadRegex)
Blank()

>> Find("x", ErrorKind.BadRegex, 1)
8

>> Find("a", ErrorKind.BadRegex, 2)
2

>> Find("a", ErrorKind.BadRegex, 4)
Blank()

>> Find(1, ErrorKind.BadRegex, 20)
Error({Kind:ErrorKind.InvalidArgument})

>> Find(ErrorKind.BadRegex, 156)
Blank()

>> Find(ErrorKind.BadRegex, "SoBadRegexSo", 1)
3

>> Find(ErrorKind.BadRegex, "SoBadRegexSo", 4)
Blank()

>> Find(ErrorKind.BadRegex, "SoBadRegexSo", 8)
Blank()

>> Find(ErrorKind.BadRegex, "SoBadRegexSo", 20)
Error({Kind:ErrorKind.InvalidArgument})
