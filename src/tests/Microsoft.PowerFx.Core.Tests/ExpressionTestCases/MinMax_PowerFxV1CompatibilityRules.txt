#SETUP: PowerFxV1CompatibilityRules

// With this flag enabled, return type is
// - always argTypes[0] if 1st element is [Date, Time, DateTime, Number, Decimal]
// - otherwise it's Decimal or Number, depending on NumberIsFloat flag

>> Max(1)
1

>> Min(1)
1

>> Max(1,2)
2

>> Min(1,2)
1

>> Max(0)
0

>> Min(0)
0

>> Max(0,0,0,0)
0

>> Min(0,0,0,0)
0

>> Max(1, 2, 3, 4, 5)
5

>> Min(1, 2, 3, 4, 5)
1

>> Max(-1, -2, -3, -4, -5)
-1

>> Min(-1, -2, -3, -4, -5)
-5

>> Max(2.34567)
2.34567

>> Min(2.34567)
2.34567

>> Max(-1.23, 23.4, -345.6, 4567.89, -5678.912)
4567.89

>> Min(-1.23, 23.4, -345.6, 4567.89, -5678.912)
-5678.912

>> Max(-123, 234, -3456, 4567, -5678)
4567

>> Min(-123, 234, -3456, 4567, -5678)
-5678

>> Max(-100, If(true, -1000, 200))
-100

>> Min(-100, If(true, -1000, 200))
-1000

>> Max(Blank())
Blank()

>> Min(Blank())
Blank()

>> Max(Blank(), Blank(), Blank())
Blank()

>> Min(Blank(), Blank(), Blank())
Blank()

>> Min(1, 2, 3, Blank(), 2, 3)
1

>> Max(1, 2, 3, Blank(), 2, 3)
3

>> Min(-1, -2, -3, Blank(), -2, -3)
-3

>> Max(-1, -2, -3, Blank(), -2, -3)
-1

// ****** Date/time arguments, scalar arguments ******

>> Max(Min(Date(2022,3,8)))
Date(2022,3,8)

>> Max(Date(1985,3,5),Date(1986,10,19))
Date(1986,10,19)

>> Min(Date(1985,3,5),Date(1986,10,19))
Date(1985,3,5)

>> Max(DateTime(2014,11,10,13,50,0), DateTime(2014,11,11,13,50,0))
DateTime(2014,11,11,13,50,0,0)

>> Min(DateTime(2014,11,10,13,50,0), DateTime(2014,11,11,13,50,0))
DateTime(2014,11,10,13,50,0,0)

>> Max(DateTime(2014,11,10,13,50,0), DateTime(2014,11,10,14,50,0))
DateTime(2014,11,10,14,50,0,0)

>> Min(DateTime(2014,11,10,13,50,0), DateTime(2014,11,10,14,50,0))
DateTime(2014,11,10,13,50,0,0)

>> Max(Time(1,50,0),Time(2,0,0))
Time(2,0,0,0)

>> Min(Time(1,50,0),Time(2,0,0))
Time(1,50,0,0)

>> Max(Date(2022,3,8),DateTime(2022,3,8,13,50,0))
Date(2022,3,8)

>> Min(Date(2022,3,8),DateTime(2022,3,8,13,50,0))
Date(2022,3,8)

// Date(2022, 9, 9) = 44813
>> Max(Date(2022, 9, 9), 50000)
Date(2036,11,21)

>> Min(Date(2022, 9, 9), 50000)
Date(2022,9,9)

>> Max(Date(2022, 9, 9), 40000)
Date(2022,9,9)

>> Min(Date(2022, 9, 9), 40000)
Date(2009,7,6)

>> Min(40000, Date(2022, 9, 9))
40000

// ****** Coercions, scalar arguments ******

>> Max("1","2")
2

>> Min("1","2")
1

>> Max(Blank(), 100, -5, "2000", Value("2001"), Text(2002))
2002

>> Min(Blank(), 100, -5, "2000", Value("2001"), Text(2002))
-5

>> Max("200", "2000")
2000

>> Min("200", "2000")
200

>> Max("sampleText")
Error({Kind:ErrorKind.InvalidArgument})

>> Min("sampleText")
Error({Kind:ErrorKind.InvalidArgument})

>> Max("10")
10

>> Min("10")
10

>> Max("-10.123", 1.234)
1.234

>> Min("-10.123", 1.234)
-10.123

>> Max("9", "10")
10

>> Min("9", "10")
9

>> Max("100", "AB")
Error({Kind:ErrorKind.InvalidArgument})

>> Min("100", "AB")
Error({Kind:ErrorKind.InvalidArgument})

>> Max(true,true)
1

>> Min(true,true)
1

>> Max(false,false)
0

>> Min(false,false)
0

>> Max(true,false)
1

>> Min(true,false)
0

>> Max("true","false")
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.InvalidArgument}))

>> Min("true","false")
Error(Table({Kind:ErrorKind.InvalidArgument},{Kind:ErrorKind.InvalidArgument}))

// ****** Errors, scalar arguments ******

>> Max(1/0)
Error({Kind:ErrorKind.Div0})

>> Min(1/0)
Error({Kind:ErrorKind.Div0})

>> Max(Time(3,4,5), Time(2,1/0,8))
Error({Kind:ErrorKind.Div0})

>> Min(Time(3,4,5), Time(2,1/0,8))
Error({Kind:ErrorKind.Div0})

>> Max(1, 3, Sqrt(-1), -3)
Error({Kind:ErrorKind.Numeric})

>> Min(1, 3, Sqrt(-1), -3)
Error({Kind:ErrorKind.Numeric})

// ****** Table + expression, numeric ******

>> Max([1, 2, 3, 4, 5], Value)
5

>> Min([1, 2, 3, 4, 5], Value)
1

>> Max([1, 2, 3], 4)
4

>> Min([1, 2, 3], 4)
4

>> Max(Table({Name:"John Doe", DOB:Date(1985,3,5), Thing: "1"},{Name:"Jane Roe", DOB:Date(1986,10,19), Thing: "2"}),Thing)
2

>> Min(Table({Name:"John Doe", DOB:Date(1985,3,5), Thing: "1"},{Name:"Jane Roe", DOB:Date(1986,10,19), Thing: "2"}),Thing)
1

// ****** Table + expression, date/time ******

>> Max(Table({Name:"John Doe", DOB:Date(1985,3,5)},{Name:"Jane Roe", DOB:Date(1986,10,19)}),DOB)
Date(1986,10,19)

>> Min(Table({Name:"John Doe", DOB:Date(1985,3,5)},{Name:"Jane Roe", DOB:Date(1986,10,19)}),DOB)
Date(1985,3,5)

>> Max(Sequence(10), Date(2000,1,10 + Value))
Date(2000,1,20)

>> Min(Sequence(10), Date(2000,1,10 + Value))
Date(2000,1,11)

// ****** Errors, table + expression ******

>> Max([1, 2, 1/0, 4, 5], Value)
Error({Kind:ErrorKind.Div0})

>> Min([1, 2, 1/0, 4, 5], Value)
Error({Kind:ErrorKind.Div0})

>> Max(If(Sqrt(-1) < 1, [1,2,3]), Value)
Error({Kind:ErrorKind.Numeric})

>> Min(If(Sqrt(-1) < 1, [1,2,3]), Value)
Error({Kind:ErrorKind.Numeric})

// ****** Compiler errors ******

>> Max(1, 2, {a:3})
Errors: Error 10-15: Expected number. We expect a number at this point in the formula.

>> Min(1, 2, {a:3})
Errors: Error 10-15: Expected number. We expect a number at this point in the formula.

>> Max({a:1}, {a:2}, {a:3})
Errors: Error 4-9: Expected number. We expect a number at this point in the formula.|Error 11-16: Expected number. We expect a number at this point in the formula.|Error 18-23: Expected number. We expect a number at this point in the formula.

>> Min({a:1}, {a:2}, {a:3})
Errors: Error 4-9: Expected number. We expect a number at this point in the formula.|Error 11-16: Expected number. We expect a number at this point in the formula.|Error 18-23: Expected number. We expect a number at this point in the formula.

>> Min([1,2,3], [1])
Errors: Error 13-16: Expected number. We expect a number at this point in the formula.|Error 0-17: The function 'Min' has some invalid arguments.

>> Max([1,2,3], [1])
Errors: Error 13-16: Expected number. We expect a number at this point in the formula.|Error 0-17: The function 'Max' has some invalid arguments.

>> Min(Date(1985,3,5), DateTime(2014,11,11,13,50,0), Time(12, 1, 7))
Date(1899,12,30)

>> Min(DateTime(2014,11,11,13,50,0), Date(1985,3,5), Time(12, 1, 7))
DateTime(1899,12,30,12,1,7,0)

>> Min(Time(12, 1, 7), Date(1985,3,5), DateTime(2014,11,11,13,50,0))
Time(12,1,7,0)

>> Min(Date(1985,3,5), DateTime(2014,11,11,13,50,0))
Date(1985,3,5)

>> Min(DateTime(2014,11,11,13,50,0), Date(1985,3,5))
DateTime(1985,3,5,0,0,0,0)

>> Max("1",2)
2

>> Max(1,"2")
2

>> Min(1/0, Date(2023, 4, 20)) 
Error({Kind:ErrorKind.Div0})

>> Min(Date(2023, 4, 20), 1/0)
Error({Kind:ErrorKind.Div0})

>> Min(1, "foo")
Error({Kind:ErrorKind.InvalidArgument})

>> Min(Today(), 3)
Date(1900,1,2)

// "2023" as a string cannot be coerced to a DateTime (invalid format)
>> Min(Now(), "2023")
Error({Kind:ErrorKind.InvalidArgument})

>>Min(Now(), "2023-01-01")
DateTime(2023,1,1,0,0,0,0)

>> Min("1E1", "20")
10

>> Min(true, false)
0

>> Max(false, true)
1

// Value(Date(2023,3,15)) = 45000
>> Min(Date(2112,1,1), 45000)
Date(2023,3,15)

>> Min(Date(2023,3,15), DateTime(2021,2,3,4,5,6))
Date(2021,2,3)

>> Min(Today(), Time(12,0,0))
Date(1899,12,30)

>> Min(Date(2112,1,1), "2023-01-01", "2022-12-30")
Date(2022,12,30)

>> Min(Now(), 45000.5)
DateTime(2023,3,15,12,0,0,0)

>> Min(DateTime(2023,3,15,0,0,0), Date(2021,2,3))
DateTime(2021,2,3,0,0,0,0)

>> Min(Now(), Time(12,34,56))
DateTime(1899,12,30,12,34,56,0)

>> Min(Now(), "2023-01-01T12:34:56", "2022-12-30")
DateTime(2022,12,30,0,0,0,0)

>> Min(Time(12,0,0),0.25)
Time(6,0,0,0)

>> Min(Time(12,0,0), DateTime(1888,10,20,12,34,56,789))
Time(12,34,56,789)

>> Max(Time(12,0,0), DateTime(1888,10,20,12,34,56,789))
Time(12,0,0,0)

>> Min(Time(12,0,0), Today())
Time(12,0,0,0)

>> Min(Time(12,0,0), "06:00:00", "03:45:00")
Time(3,45,0,0)

>> Min(50000, Date(2023,3,15))
45000

>> Min(50000, DateTime(2023,3,15,18,0,0))
45000.75

>> Min(0.75, Time(12,0,0))
0.5

>> Min(3, true, "5")
1

>> Min(3, true, "-5")
-5
 