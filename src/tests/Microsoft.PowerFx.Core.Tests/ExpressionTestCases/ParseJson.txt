// Value tests
>> Value(Index(ParseJSON("[5]"), 1))
5

>> IfError(Text(Index(ParseJSON("123"),1)),$"Kind={FirstError.Kind}")
"Kind=25"

>> Value(ParseJSON("5"))
5

>> Value(ParseJSON("true"))
#Error

>> Value(ParseJSON("false"))
#Error

>> Value(ParseJSON("""5"""))
#Error

>> Value(ParseJSON("""a"""))
#Error

>> Value(ParseJSON("null"))
Blank()

>> Value(ParseJSON("{""a"": 5}").a)
5

>> Value(ParseJSON("{""a"": 5, ""A"": 10}").a)
5

>> Value(ParseJSON("{""a"": 5, ""A"": 10}").A)
10

>> Value(ParseJSON("{""a"": 5}").b)
Blank()

>> Value(ParseJSON("""s""").a)
#Error

>> Value(ParseJSON("This "" Is , "" Invalid ").a)
#Error

// Text tests
>> Text(Index(ParseJSON("[""s""]"), 1))
"s"

>> Text(ParseJSON("""s"""))
"s"

>> Text(ParseJSON("null"))
Blank()

>> Text(ParseJSON("true"))
#Error

>> Text(ParseJSON("false"))
#Error

>> Text(ParseJSON("5"))
#Error

>> Boolean(ParseJSON("true"))
true

>> Boolean(ParseJSON("false"))
false

>> Boolean(ParseJSON("null"))
Blank()

>> ParseJSON("{""a"": null}").a
Blank()

>> ParseJSON("{""a"": null}").a.b
Blank()

>> ParseJSON("null").a
Blank()

>> ParseJSON("null").a.b
Blank()

>> ParseJSON("{}").a
Blank()

>> ParseJSON("{}").a.b
Blank()

>> Sum(Table(ParseJSON("[1, 2, 3, 4, 5]")), Value(Value))
15

>> ForAll(ParseJSON("[5, 6, 7]"), Value(ThisItem))
[5,6,7]

>> ForAll(ParseJSON("null"), Value(ThisItem))
Blank()

>> ForAll(ParseJSON("[null, null, null]"), Value(ThisItem))
[Blank(),Blank(),Blank()]

>> ForAll(ParseJSON("[5, null, 7]"), Value(ThisItem))
[5,Blank(),7]

>> ForAll(ParseJSON("[""hi"", null, ""hello""]"), Text(ThisItem))
["hi",Blank(),"hello"]

>> ForAll(ParseJSON("[true, null, false]"), Boolean(ThisItem))
[true,Blank(),false]

>> ForAll(ParseJSON("[""2011-01-15"", null]"), Text(DateValue(ThisItem), "yyyy-MM-dd"))
["2011-01-15",""]

>> ForAll(ParseJSON("[""08:03:05.000"", null]"), Text(TimeValue(ThisItem), "HH:mm:ss"))
["08:03:05",""]

>> ForAll(ParseJSON("[""5cc45615-f759-4a53-b225-d3a2497f60ad"", null]"), GUID(ThisItem))
[GUID("5cc45615-f759-4a53-b225-d3a2497f60ad"),Blank()]

>> ForAll(ParseJSON("[1]"), Value(ThisItem) / 0)
#Error

>> CountRows(ForAll(ParseJSON("[1,2,3]"), Value(ThisItem)))
3

>> Sum(ForAll(ParseJSON("[5, 6, 7]"), Value(ThisItem)), Value)
18

>> Sum(ForAll(ParseJSON("[5, 6, 7]"), ThisItem), Value(Value))
18

>> ForAll(ParseJSON("[1,{""a"":false},""hello""]"), IfError(Text(ThisItem), IfError(Text(Value(ThisItem)), Text(Boolean(ThisItem.a)))))
["1","false","hello"]

>> ForAll(ParseJSON("[1,true,3,false]"), Value(ThisItem))
#Error

>> ForAll(ParseJSON("[1,2,3]"), If(Value(ThisItem) < 2, Value(ThisItem), ThisItem))
Errors: Error 70-78: Invalid argument type (UntypedObject). Expecting a Number value instead.|Error 29-79: The function 'If' has some invalid arguments.

>> ForAll(ParseJSON("[1,2,3]"), ThisRecord)
Errors: Error 29-39: Name isn't valid. 'ThisRecord' isn't recognized.|Error 0-40: The function 'ForAll' has some invalid arguments.

>> ParseJSON("5") + ParseJSON("5")
Errors: Error 0-14: Invalid argument type. Expecting one of the following: Number, Text, Boolean.|Error 17-31: Invalid argument type. Expecting one of the following: Number, Text, Boolean.

>> ParseJSON("5") - ParseJSON("5")
Errors: Error 17-31: Invalid argument type. Expecting one of the following: Number, Text, Boolean.|Error 0-14: Invalid argument type. Expecting one of the following: Number, Text, Boolean.

>> ParseJSON("5") * ParseJSON("5")
Errors: Error 0-14: Invalid argument type. Expecting one of the following: Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime.|Error 17-31: Invalid argument type. Expecting one of the following: Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime.

>> ParseJSON("5") / ParseJSON("5")
Errors: Error 0-14: Invalid argument type. Expecting one of the following: Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime.|Error 17-31: Invalid argument type. Expecting one of the following: Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime.

>> ParseJSON("5") = ParseJSON("5")
Errors: Error 15-16: Incompatible types for comparison. These types can't be compared: UntypedObject, UntypedObject.

>> ParseJSON("5") > ParseJSON("5")
Errors: Error 0-14: Invalid argument type. Expecting one of the following: Number, Date, Time, DateTime.|Error 17-31: Invalid argument type. Expecting one of the following: Number, Date, Time, DateTime.

>> ParseJSON("5") < ParseJSON("5")
Errors: Error 0-14: Invalid argument type. Expecting one of the following: Number, Date, Time, DateTime.|Error 17-31: Invalid argument type. Expecting one of the following: Number, Date, Time, DateTime.

>> ParseJSON("5") <> ParseJSON("5")
Errors: Error 15-17: Incompatible types for comparison. These types can't be compared: UntypedObject, UntypedObject.

>> ParseJSON("5") >= ParseJSON("5")
Errors: Error 0-14: Invalid argument type. Expecting one of the following: Number, Date, Time, DateTime.|Error 18-32: Invalid argument type. Expecting one of the following: Number, Date, Time, DateTime.

>> ParseJSON("5") <= ParseJSON("5")
Errors: Error 0-14: Invalid argument type. Expecting one of the following: Number, Date, Time, DateTime.|Error 18-32: Invalid argument type. Expecting one of the following: Number, Date, Time, DateTime.

>> CountRows(ParseJSON("[1, 2, 3]"))
3

>> CountRows(ParseJSON("[]"))
0

>> CountRows(ParseJSON("1"))
#Error

// --- Testing heterogeneous arrays --

>> Text(Index(ParseJSON("{""a"": 5, ""b"": [{""c"": 174 }, {""c"": ""foo"" }] }").b, 2).c)
"foo"

>> Value(Index(ParseJSON("{""a"": 5, ""b"": [{""c"": 19 }, {""c"": ""foo"" }] }").b, 1).c)
19

>> DateDiff(DateValue(ParseJSON("""2011-01-15""")), DateValue(ParseJSON("""2011-01-30""")))
15

>> DateValue(ParseJSON("""2011-1-15"""))
#Error(Kind=InvalidArgument)

>> DateValue(ParseJSON("""2011-01"""))
#Error(Kind=InvalidArgument)

>> DateValue(ParseJSON("""2011"""))
#Error(Kind=InvalidArgument)

>> DateValue(ParseJSON("null"))
Blank()

>> DateValue(ParseJSON("""abcdef"""))
#Error(Kind=InvalidArgument)

>> DateDiff(DateTimeValue(ParseJSON("""2011-01-15T08:00:00.000Z""")), DateTimeValue(ParseJSON("""2011-01-30T08:00:00.000Z""")))
15

>> DateDiff(DateTimeValue(ParseJSON("""2011-01-15T08:00:00Z""")), DateTimeValue(ParseJSON("""2011-01-30T08:00:00Z""")))
15

>> DateDiff(DateTimeValue(ParseJSON("""2011-01-15T08:00:00.000""")), DateTimeValue(ParseJSON("""2011-01-30T08:00:00.000""")))
15

>> DateDiff(DateTimeValue(ParseJSON("""2011-01-15T00:00:00""")), DateTimeValue(ParseJSON("""2011-01-30""")))
15

>> DateTimeValue(ParseJSON("""2011-01-15T08:0:00.000Z"""))
#Error(Kind=InvalidArgument)

>> DateTimeValue(ParseJSON("""2011-01-15T08"""))
#Error(Kind=InvalidArgument)

>> DateTimeValue(ParseJSON("""2011T08:00:00.000Z"""))
#Error(Kind=InvalidArgument)

>> DateTimeValue(ParseJSON("null"))
Blank()

>> DateTimeValue(ParseJSON("""abcdef"""))
#Error(Kind=InvalidArgument)

>> Text(DateTimeValue(ParseJSON("""2022-05-05""")), "yyyy-MM-dd HH:mm:ss")
"2022-05-05 00:00:00"

>> DateDiff(DateValue(ParseJSON("""2011-01-15T08:00:00.000Z""")), DateValue(ParseJSON("""2011-01-30T08:00:00.000Z""")))
15

>> DateDiff(DateValue(ParseJSON("""2011-01-15T08:00:00Z""")), DateValue(ParseJSON("""2011-01-30T08:00:00Z""")))
15

>> DateDiff(DateValue(ParseJSON("""2011-01-15T00:00:00""")), DateValue(ParseJSON("""2011-01-30""")))
15

>> DateDiff(DateValue(ParseJSON("""2011-01-15T08:00:00.000""")), DateValue(ParseJSON("""2011-01-30T08:00:00.000""")))
15

>> Text(TimeValue(ParseJSON("""08:03:05.000""")), "HH:mm:ss")
"08:03:05"

>> TimeValue(ParseJSON("""08:93:05.000"""))
#Error(Kind=InvalidArgument)

>> TimeValue(ParseJSON("null"))
Blank()

>> TimeValue(ParseJSON("""abcdef"""))
#Error(Kind=InvalidArgument)

>> GUID(ParseJSON("""5cc45615-f759-4a53-b225-d3a2497f60ad"""))
GUID("5cc45615-f759-4a53-b225-d3a2497f60ad")

>> GUID(ParseJSON("null"))
Blank()

// heterogeneous/ mixed-type arrays
>> Value(Index(ParseJSON("[ { ""a"" : 10 }, { ""b"" : ""str"" } ]"),1).a)
10

>> Value(Index(ParseJSON("[ { ""a"" : 10 }, { ""b"" : ""str"" } ]"),1).b)
Blank()

>> Text(Index(ParseJSON("[ { ""a"" : 10 }, { ""b"" : ""str"" } ]"),2).b)
"str"

>> Text(Index(ParseJSON("[ { ""a"" : 10 }, { ""b"" : ""str"" } ]"),2).a)
Blank()