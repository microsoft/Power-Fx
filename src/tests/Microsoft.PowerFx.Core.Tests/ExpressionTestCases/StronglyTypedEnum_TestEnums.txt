#SETUP: StronglyTypedBuiltinEnums,PowerFxV1CompatibilityRules,AllEnumsPlusTestEnumsSetup,RegEx,EnableJsonFunctions

// **** Using test enums, V1 compat. ****
// Some enum varients are not represented in the Builtin set, including for example, any Boolean enums.
// The companion _BuiltInEnums version of this file uses only the built in enums.

// Strongly typed enums were strengthened to:
//    0. Strongly typed enum usage is the most common scenario and what Intellisense will suggest.
//    1. Avoid passing the wrong kind of enum to a function. For example JSON( [1,2,3], Match.IgnoreCase )
//    2. Avoid passing an enum where a scalar was expected, except for text backed enums. For example Mid( "foo", StartOfWeek.Tuesday )
//    3. Avoid passing a scalar where an enum was expected, excepf for text backed enums. For example Weekday( Now(), 12 )
//
// Default operations with backing type
//    4. Equals/not equals between enum values of the same enum is always supported.  For example, StartOfWeek.Tuesday = StartOfWeek.Monday
//    5. By default, Equals/not equals with the backing kind is not supported.  For example, StartOfWeek.Tuesday = 12
//    6. By default, Order comparisons between number based enums are not supported, by default. For example StartOfWeek.Tuesday < StartOfWeek.Monday
//    7. By default, math operations between number based enums are never supported. For example, StartOfWeek.Tuesday + StartOfWeek.Monday 
//    8. By default, Boolean operations between Boolean based enums is not supported, but can be overriden with CanCoerceToBackingKind
//    9. If the underlying value is desired, the Text, Value, Decimal, Float, and Boolean functions can be called to get the backing value.
//
// In addition, there are flags for each option set that govern how it can be used.  Default is no flags, used by Dataverse option sets.
//   10. CanCoerceFromBackingKind - For example, Match which allows a string in place of the enum
//   11. CanCoerceToBackingKind - For example, ErrorKind that can be used as a number
//   12. CanConcatenateStronglyTyped (text only) - For example, JSONFormat which can concatenate different members together to create a new member
//   13. CanCompareNumeric (numbers only) - For example, ErrorKind can compare values
//   14. CanConcatenateStronglyTyped & CanCoerceFromBackingKind - An important combination, used by Match, allows strings and enums to be mixed
//
// Misc
//   15. Since there is no longer an Accepts relationship between enums and their backing kinds, more likely to get Void results
//   16. Everything coerces to string

//============================================================================================================
//
// 0. Strongly typed enum usage is the most common scenario and what Intellisense will suggest.
//

>> TestColorInvert( Color.Blue )
RGBA(255,255,0,1)

>> TestColorBlueRampInvert( TestBlueRamp.Blue25 )
RGBA(64,64,0,1)

>> TestXORYesNo( TestYesNo.Yes, TestYesNo.No )
true

//============================================================================================================
//
// 1. Avoid passing the wrong kind of enum to a function. For example JSON( [1,2,3], Match.IgnoreCase )
//

>> TestXORYesNo( TestYeaNay.Yea, TestYeaNay.Nay )
Errors: Error 24-28: Invalid argument type (Enum (TestYeaNay)). Expecting a Enum (TestYesNo) value instead.|Error 40-44: Invalid argument type (Enum (TestYeaNay)). Expecting a Enum (TestYesNo) value instead.|Error 0-12: The function 'TestXORYesNo' has some invalid arguments.

>> TestColorBlueRampInvert( TestRedRamp.Red25 )
Errors: Error 36-42: Invalid argument type (Enum (TestRedRamp)). Expecting a Enum (TestBlueRamp) value instead.|Error 0-23: The function 'TestColorBlueRampInvert' has some invalid arguments.

>> TestColorBlueRampInvert( Color.Purple )
Errors: Error 30-37: Invalid argument type (Enum (Color)). Expecting a Enum (TestBlueRamp) value instead.|Error 0-23: The function 'TestColorBlueRampInvert' has some invalid arguments.

>> TestColorBlueRampInvert( ColorFade( Color.Yellow, 25% ) )
Errors: Error 25-55: Invalid argument type (Color). Expecting a Enum (TestBlueRamp) value instead.|Error 0-23: The function 'TestColorBlueRampInvert' has some invalid arguments.

>> ColorFade( TestRedRamp.Red25, 10% )
Errors: Error 0-9: The function 'ColorFade' has some invalid arguments.|Error 22-28: Invalid argument type (Enum (TestRedRamp)). Expecting a Color value instead.

>> TestColorInvert( TestRedRamp.Red50 )
Errors: Error 28-34: Invalid argument type (Enum (TestRedRamp)). Expecting a Color value instead.|Error 0-15: The function 'TestColorInvert' has some invalid arguments.

//===========================================================================================================
//
// 2. Avoid passing an enum where a scalar was expected, except for text.  For example Mid( "foo", StartOfWeek.Tuesday ). 
//

//===========================================================================================================
//
// 3. Avoid passing a scalar where an enum was expected, excepf for text backed enums. For example Weekday( Now(), 12 )
//

>> TestColorBlueRampInvert( RGBA( 128, 128, 128, 100% ) )
Errors: Error 25-52: Invalid argument type (Color). Expecting a Enum (TestBlueRamp) value instead.|Error 0-23: The function 'TestColorBlueRampInvert' has some invalid arguments.

//===========================================================================================================
//
// 4. Equals/not equals between enum values of the same enum is always supported.  For example, StartOfWeek.Tuesday = StartOfWeek.Monday
//

>> TestYesNo.Yes = TestYesNo.No
false

>> TestYesNo.Yes = TestYesNo.Yes
true

>> TestYesNo.Yes <> TestYesNo.No
true

>> TestBooleanNoCoerceTo.SuperTrue = TestBooleanNoCoerceTo.SuperFalse
false

>> TestBooleanNoCoerceTo.SuperTrue <> TestBooleanNoCoerceTo.SuperFalse
true

>> TestNumberCoerceTo.V = TestNumberCoerceTo.V2
true

// Not supported between different enums, even if the same backing kind or if CanCoerceToBackindKind is true

>> TestNumberCoerceTo.V = ErrorKind.Div0
Errors: Error 21-22: Incompatible types for comparison. These types can't be compared: Enum (TestNumberCoerceTo), Enum (ErrorKind).

>> TestYesNo.Yes = TestYeaNay.Nay
Errors: Error 14-15: Incompatible types for comparison. These types can't be compared: Enum (TestYesNo), Enum (TestYeaNay).

>> TestYesNo.Yes <> TestYeaNay.Nay
Errors: Error 14-16: Incompatible types for comparison. These types can't be compared: Enum (TestYesNo), Enum (TestYeaNay).

>> Color.Red = TestRedRamp.Red100
Errors: Error 10-11: Incompatible types for comparison. These types can't be compared: Enum (Color), Enum (TestRedRamp).

//===========================================================================================================
//
//  5. By default, Equals/not equals with the backing kind is not supported.  For example, StartOfWeek.Tuesday = 12
//

>> TestRedRamp.Red25 = RGBA( 1,1,1,1 )
Errors: Error 18-19: Incompatible types for comparison. These types can't be compared: Enum (TestRedRamp), Color.

>> TestBooleanNoCoerceTo.SuperTrue = true
Errors: Error 32-33: Incompatible types for comparison. These types can't be compared: Enum (TestBooleanNoCoerceTo), Boolean.

//===========================================================================================================
//
// 6. By default, Order comparisons between number based enums are not supported by default, for example StartOfWeek.Tuesday < StartOfWeek.Monday
//

//===========================================================================================================
//
// 7. By default, math operations between number based enums are never supported. For example, StartOfWeek.Tuesday + StartOfWeek.Monday 
//

// Booleans cannot be used in math expressions, even if they support coercion to backing kind

>> TestBooleanNoCoerceTo.SuperFalse + 2
Errors: Error 21-32: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestBooleanNoCoerceTo.SuperFalse * 2
Errors: Error 21-32: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestBooleanNoCoerceTo.SuperFalse / 2
Errors: Error 21-32: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestBooleanNoCoerceTo.SuperFalse ^ 2
Errors: Error 21-32: Invalid argument type. Expecting one of the following: Number, Decimal, Text, Boolean, UntypedObject.

>> TestYesNo.Yes + 2
Errors: Error 9-13: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestYesNo.No * 2
Errors: Error 9-12: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestYesNo.Yes / 2
Errors: Error 9-13: Invalid argument type. Expecting one of the following: Decimal, Number, Text, Boolean, Date, Time, DateTimeNoTimeZone, DateTime, UntypedObject.

>> TestYesNo.Yes ^ 2
Errors: Error 9-13: Invalid argument type. Expecting one of the following: Number, Decimal, Text, Boolean, UntypedObject.

//===========================================================================================================
//
// 8. By default, Boolean operations between Boolean based enums is not supported, but can be overriden with CanCoerceToBackingKind
//

>> TestYesNo.Yes && TestBooleanNoCoerceTo.SuperTrue
Errors: Error 38-48: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> TestBooleanNoCoerceTo.SuperTrue && TestBooleanNoCoerceTo.SuperFalse
Errors: Error 21-31: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.|Error 56-67: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> TestBooleanNoCoerceTo.SuperTrue && false
Errors: Error 21-31: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> !TestBooleanNoCoerceTo.SuperTrue
Errors: Error 22-32: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> TestYesNo.Yes Or TestBooleanNoCoerceTo.SuperTrue
Errors: Error 38-48: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> Not TestBooleanNoCoerceTo.SuperTrue And Not TestBooleanNoCoerceTo.SuperFalse
Errors: Error 25-35: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.|Error 65-76: Invalid argument type. Expecting one of the following: Boolean, Number, Decimal, Text, UntypedObject.

>> TestBooleanNoCoerceTo.SuperTrue
TestBooleanNoCoerceTo.SuperTrue

>> And( TestBooleanNoCoerceTo.SuperTrue, TestBooleanNoCoerceTo.SuperTrue )
Errors: Error 26-36: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 59-69: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 0-3: The function 'And' has some invalid arguments.

>> Not( TestBooleanNoCoerceTo.SuperTrue )
Errors: Error 26-36: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 0-3: The function 'Not' has some invalid arguments.

>> Or( TestBooleanNoCoerceTo.SuperTrue, TestBooleanNoCoerceTo.SuperFalse )
Errors: Error 25-35: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 58-69: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 0-2: The function 'Or' has some invalid arguments.

>> Or(Not(TestBooleanNoCoerceTo.SuperFalse),  Not(TestBooleanNoCoerceTo.SuperTrue))
Errors: Error 28-39: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 3-6: The function 'Not' has some invalid arguments.|Error 68-78: Invalid argument type (Enum (TestBooleanNoCoerceTo)). Expecting a Boolean value instead.|Error 43-46: The function 'Not' has some invalid arguments.

//===========================================================================================================
//
// 9. If the underlying value is desired, the Text, Value, Decimal, Float, and Boolean functions can be called to get the backing value.
//

// Text can be called on all option set values

>> Text( TestYesNo.Yes )
"Yes"

>> Value( TestYesNo.Yes )
Errors: Error 0-5: The function 'Value' has some invalid arguments.|Error 16-20: Expected text or number. We expect text or a number at this point in the formula.

>> Float( TestYesNo.Yes )
Errors: Error 0-5: The function 'Float' has some invalid arguments.|Error 16-20: Expected text or number. We expect text or a number at this point in the formula.

>> Decimal( TestYesNo.Yes )
Errors: Error 0-7: The function 'Decimal' has some invalid arguments.|Error 18-22: Expected text or number. We expect text or a number at this point in the formula.

>> Boolean( TestYesNo.No )
false

>> Boolean( TestYesNo.Yes )
true

>> Boolean( TestYeaNay.Nay )
false

>> Boolean( TestYeaNay.Yea )
true

>> Boolean( TestBooleanNoCoerceTo.SuperTrue )
true

>> Boolean( TestBooleanNoCoerceTo.SuperFalse )
false

// no constructor for Color values

//===========================================================================================================
//
// 10. CanCoerceFromBackingKind - For example, Match which allows a string in place of the enum
//

//===========================================================================================================
//
// 11. CanCoerceToBackingKind - For example, ErrorKind that can be used as a number
//

>> TestNumberCoerceTo.V + TestNumberCoerceTo.X
15

>> Int( TestNumberCoerceTo.V )
5

>> Power( TestNumberCoerceTo.V, TestNumberCoerceTo.V )
3125

// Unless there is a specific reason, CanCoerceToBackingKind is expected to be true for most Boolean option sets

>> TestYesNo.Yes && TestYeaNay.Yea
true

>> !TestYesNo.Yes
false

>> TestYesNo.Yes || TestYeaNay.Nay
true

>> !TestYesNo.Yes || !TestYeaNay.Yea
false

>> TestYesNo.Yes And TestYeaNay.Yea
true

>> Not TestYesNo.Yes
false

>> TestYesNo.Yes Or TestYeaNay.Nay
true

>> Not TestYesNo.Yes And Not TestYeaNay.Yea
false

>> TestYesNo.No
TestYesNo.No

>> And( TestYesNo.Yes, TestYeaNay.Yea )
true

>> Not( TestYesNo.Yes )
false

>> Or( TestYesNo.Yes, TestYeaNay.Nay )
true

>> Or(Not(TestYesNo.Yes),  Not(TestYeaNay.Yea))
false

// Equals/not equals comparisons

>> TestYesNo.Yes = false
false

>> TestYesNo.Yes <> true
false

>> TestYesNo.Yes = true
true

>> TestYesNo.Yes <> false
true

//===========================================================================================================
//
// 12. CanConcatenateStronglyTyped (text only) - For example, JSONFormat which can concatenate different members together to create a new member
//

//===========================================================================================================
//
// 13. CanCompareNumeric (numbers only) - For example, ErrorKind can compare values
//

>> TestNumberCompareNumeric.V2 < TestNumberCompareNumeric.V
false

>> TestNumberCompareNumeric.V2 <= TestNumberCompareNumeric.V
true

>> TestNumberCompareNumeric.V2 >= TestNumberCompareNumeric.V
true

>> TestNumberCompareNumeric.V2 > TestNumberCompareNumeric.V
false

>> TestNumberCompareNumericCoerceFrom.V2 < TestNumberCompareNumericCoerceFrom.V
false

>> TestNumberCompareNumericCoerceFrom.V2 <= TestNumberCompareNumericCoerceFrom.V
true

>> TestNumberCompareNumericCoerceFrom.V2 >= TestNumberCompareNumericCoerceFrom.V
true

>> TestNumberCompareNumericCoerceFrom.V2 > TestNumberCompareNumericCoerceFrom.V
false

// Paired with CoerceFromBackingKind, can compare with backing kind

>> TestNumberCompareNumeric.V < 5
Errors: Error 27-28: Incompatible types for comparison. These types can't be compared: Enum (TestNumberCompareNumeric), Decimal.

>> TestNumberCompareNumeric.V2 < 5
Errors: Error 28-29: Incompatible types for comparison. These types can't be compared: Enum (TestNumberCompareNumeric), Decimal.

>> TestNumberCompareNumericCoerceFrom.V < 5
false

>> TestNumberCompareNumericCoerceFrom.V2 < 5
false

//===========================================================================================================
//
// 14. CanConcatenateStronglyTyped & CanCoerceFromBackingKind - An important combination, used by Match, allows strings and enums to be mixed
//

//===========================================================================================================
//
// 15. Since there is no longer an Accepts relationship between enums and their backing kinds, more likely to get Void results
//

//===========================================================================================================
//
// 16. Everything coerces to string
//

>> Text( TestYesNo.No )
"No"

>> "Label:" & TestYesNo.No
"Label:No"

>> Text( TestYeaNay.Nay )
"Nay"

>> "Label:" & TestYeaNay.Nay
"Label:Nay"

>> Text( TestBooleanNoCoerceTo.SuperTrue )
"SuperTrue"

>> "Label:" & TestBooleanNoCoerceTo.SuperTrue
"Label:SuperTrue"

>> Text( TestYeaNay.Yea )
"Yea"

>> "Label:" & TestYeaNay.Yea
"Label:Yea"

>> Text( TestBlueRamp.Blue50 )
"Blue50"

>> "Label:" & TestBlueRamp.Blue50
"Label:Blue50"

>> Mid( TestBlueRamp.Blue50, 2 )
"lue50"

>> Len( TestBlueRamp.Blue50 )
6

>> Text( TestRedRamp.Red25 )
"Red25"

>> "Label:" & TestRedRamp.Red25
"Label:Red25"

>> Mid( TestRedRamp.Red25, 2 )
"ed25"

>> Len( TestRedRamp.Red25 )
5
