>> Concat(ForAll(["a","b","c"], With({x:Value}, x)), Value)
"abc"

>> Concat(ForAll(["a","b","c"], With({x:Value}, x)), Value, "-")
"a-b-c"

// On name collision, closest scope wins. 
>> Concat(ForAll(["a","b","c"] As x, With({x:"hide"}, x)), Value)
"hidehidehide"

>> Concat(ForAll(["a","b","c"] As x, With({y:"hide"}, x)), Value)
"abc"

// Explicit 'ThisRecord'
>> Concat(["A", "B", "C"], ThisRecord.Value)
"ABC"

// Explicit 'ThisRecord', with separator
>> Concat(["A", "B", "C"], ThisRecord.Value, ", ")
"A, B, C"

// Using 'As'
>> Concat(["A", "B", "C"] As X, X.Value)
"ABC"

// Using 'As' and separators
>> Concat(["A", "B", "C"] As X, X.Value, ".")
"A.B.C"

// Implicit 'ThisRecord'
>> Concat(["A", "B", "C"], Value)
"ABC"

// Good example of nested ForAll
// https://powerapps.microsoft.com/en-us/blog/formulas-thisrecord-as-and-sequence/

>> Concat(ForAll(["A","B"] As X,Concat(ForAll(["C","D"] As Y,X.Value&Y.Value),Value)),Value)
"ACADBCBD"

>> Concat(ForAll(["A","B"] As X,Concat(ForAll(["C","D"] As Y, X.Value & Y.Value),Value, "-")),Value, ", ")
"AC-AD, BC-BD"

// X dst,src = 2,3
// Y         = 3,3
// dst,src is tied to internal binder scopes stack. 
// But Int doesn't want ot walk and resolve itself (Don't duplicate Binder.IsRowScopeField)

// Nested cases.
// See https://powerapps.microsoft.com/en-us/blog/formulas-thisrecord-as-and-sequence/ 
>> Concat(
    ForAll(
        ["A","B"] As X,
        Concat(
            ForAll(["C","D"] As Y,X.Value&Y.Value),
            Value
        )
    ),
    Value)

"ACADBCBD"


>> Concat(ForAll(["A", "B"], ThisRecord), Value)
"AB"

// In name collision, inner nesting (closest) takes precedence 
>> Concat(
    ForAll(
        ["A","B"],
        Concat(
            ["C","D"],
            Value
        )
    ),
    Value)
"CDCD"

// Concat with empty table
>> Concat(ForAll(FirstN([60, 61, 62, 63, 64], Blank()), Char(Value)), Value)
""

// Concat with blank table
>> Concat(ForAll(If(1<0,[60, 61, 62]), Char(Value)), Value)
Blank()

>> Concat(ForAll(Sort([60, 61, 0, 63, 64], 1/Value), Char(Value)), Value)
#Error

>> Concat(Table({a: "one"}, {a: "two"}, {a: "three"}), a, ", ")
"one, two, three"

>> Concat(Table({a: "one"}, {a: "two"}, {a: "three"}), a, Left(", ", -1))
#Error

>> With({a:"."}, Concat(Sequence(5, 65), Char(Value), $"-{a}-"))
"A-.-B-.-C-.-D-.-E"

>> Concat(["one", "two", "three"], Value, Len(Value)) // Separator cannot access record
Errors: Error 43-48: Name isn't valid. 'Value' isn't recognized.

// Blank results in the lambda
>> Concat([2, 1, 0, -1, -2], If(Value <> 0, Text(1 / Value)), ",")
"0.5,1,,-1,-0.5"

// Errors in the lambda
>> Concat([2, 1, 0, -1, -2], Text(1 / Value), ",")
#Error(Kind=Div0)
